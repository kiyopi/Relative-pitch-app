{"version":3,"file":"pitchpro.umd.js","sources":["../src/utils/DeviceDetection.ts","../src/utils/errors.ts","../src/core/AudioManager.ts","../node_modules/fft.js/lib/fft.js","../node_modules/pitchy/index.js","../src/utils/performance-optimized.ts","../src/core/PitchDetector.ts","../src/core/NoiseFilter.ts","../src/core/MicrophoneLifecycleManager.ts","../src/core/ErrorNotificationSystem.ts","../src/core/MicrophoneController.ts","../src/advanced/HarmonicCorrection.ts","../src/types/index.ts","../src/advanced/VoiceAnalyzer.ts","../src/advanced/CalibrationSystem.ts","../src/utils/FrequencyUtils.ts","../src/utils/MusicTheory.ts","../src/index.ts"],"sourcesContent":["/**\n * DeviceDetection - Cross-platform device detection and optimization\n * \n * Detects device types, capabilities, and provides optimized settings\n * Handles iPadOS 13+ detection issues and provides device-specific configurations\n */\n\nimport type { DeviceSpecs } from '../types';\n\nexport class DeviceDetection {\n  private static cachedSpecs: DeviceSpecs | null = null;\n\n  /**\n   * Detect current device and return optimized specifications\n   */\n  static getDeviceSpecs(): DeviceSpecs {\n    // Return cached result if available\n    if (DeviceDetection.cachedSpecs) {\n      return DeviceDetection.cachedSpecs;\n    }\n\n    // SSR compatibility\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return DeviceDetection.getDefaultSpecs();\n    }\n\n    const userAgent = navigator.userAgent;\n    const deviceSpecs = DeviceDetection.analyzeUserAgent(userAgent);\n    \n    // Cache the result\n    DeviceDetection.cachedSpecs = deviceSpecs;\n    \n    console.log('📱 [DeviceDetection] Device analysis:', {\n      userAgent: userAgent.substring(0, 100) + '...',\n      deviceType: deviceSpecs.deviceType,\n      isIOS: deviceSpecs.isIOS,\n      sensitivity: deviceSpecs.sensitivity,\n      divisor: deviceSpecs.divisor\n    });\n\n    return deviceSpecs;\n  }\n\n  /**\n   * Analyze user agent string and determine device specifications\n   */\n  private static analyzeUserAgent(userAgent: string): DeviceSpecs {\n    // iOS device detection (including iPadOS 13+ workaround)\n    const isIPhone = /iPhone/.test(userAgent);\n    const isIPad = /iPad/.test(userAgent);\n    \n    // iPadOS 13+ reports as \"Macintosh\" but has touch support\n    const isIPadOS = /Macintosh/.test(userAgent) && 'ontouchend' in document;\n    \n    // Additional iOS detection methods\n    const hasIOSNavigator = /iPad|iPhone|iPod/.test(userAgent);\n    const hasIOSPlatform = /iPad|iPhone|iPod/.test((navigator as any).platform || '');\n    \n    // Combined iOS detection\n    const isIOS = isIPhone || isIPad || isIPadOS || hasIOSNavigator || hasIOSPlatform;\n    \n    // More specific device type detection\n    let deviceType: 'iPhone' | 'iPad' | 'PC' = 'PC';\n    \n    if (isIPhone) {\n      deviceType = 'iPhone';\n    } else if (isIPad || isIPadOS) {\n      deviceType = 'iPad';\n    } else if (isIOS) {\n      // Fallback iOS device - could be iPhone or iPad\n      deviceType = DeviceDetection.detectIOSDeviceType();\n    }\n\n    // Get device-specific optimizations\n    const optimizations = DeviceDetection.getDeviceOptimizations(deviceType, isIOS);\n\n    return {\n      deviceType,\n      isIOS,\n      sensitivity: optimizations.sensitivity,\n      noiseGate: optimizations.noiseGate,\n      divisor: optimizations.divisor,\n      gainCompensation: optimizations.gainCompensation,\n      noiseThreshold: optimizations.noiseThreshold,\n      smoothingFactor: optimizations.smoothingFactor\n    };\n  }\n\n  /**\n   * Detect iOS device type when specific detection fails\n   */\n  private static detectIOSDeviceType(): 'iPhone' | 'iPad' {\n    // Use screen size as a heuristic\n    const screenWidth = window.screen.width;\n    const screenHeight = window.screen.height;\n    const maxDimension = Math.max(screenWidth, screenHeight);\n    const minDimension = Math.min(screenWidth, screenHeight);\n    \n    // iPad generally has larger screens\n    // iPhone 6 Plus and newer have screens around 414x736 or similar\n    // iPad screens are typically 768+ in at least one dimension\n    if (maxDimension >= 768 || (maxDimension >= 700 && minDimension >= 500)) {\n      return 'iPad';\n    }\n    \n    return 'iPhone';\n  }\n\n  /**\n   * Get device-specific optimization parameters\n   */\n  private static getDeviceOptimizations(deviceType: 'iPhone' | 'iPad' | 'PC', _isIOS: boolean) {\n    switch (deviceType) {\n      case 'iPad':\n        return {\n          sensitivity: 7.0,        // High sensitivity for iPad microphones\n          noiseGate: 0.01,         // Low noise gate\n          divisor: 4.0,            // Volume calculation divisor\n          gainCompensation: 1.5,   // Gain compensation for low-frequency cut\n          noiseThreshold: 12,      // Noise threshold for silence detection\n          smoothingFactor: 0.2     // Smoothing factor\n        };\n        \n      case 'iPhone':\n        return {\n          sensitivity: 2.0,        // Lower sensitivity for cleaner signal\n          noiseGate: 0.018,        // Slightly higher noise gate\n          divisor: 4.0,            // Keep original divisor\n          gainCompensation: 1.5,   // Keep original gain compensation\n          noiseThreshold: 12,      // Keep original noise threshold\n          smoothingFactor: 0.2     // Keep original smoothing factor\n        };\n        \n      case 'PC':\n      default:\n        return {\n          sensitivity: 1.0,        // Standard sensitivity for PC\n          noiseGate: 0.02,         // Higher noise gate for PC microphones\n          divisor: 6.0,            // Different volume calculation for PC\n          gainCompensation: 1.0,   // No additional gain compensation needed\n          noiseThreshold: 5,       // Adjusted noise threshold\n          smoothingFactor: 0.2     // Standard smoothing\n        };\n    }\n  }\n\n  /**\n   * Get default specifications for SSR or fallback\n   */\n  private static getDefaultSpecs(): DeviceSpecs {\n    return {\n      deviceType: 'PC',\n      isIOS: false,\n      sensitivity: 1.0,\n      noiseGate: 0.02,\n      divisor: 6.0,\n      gainCompensation: 1.0,\n      noiseThreshold: 5,\n      smoothingFactor: 0.2\n    };\n  }\n\n  /**\n   * Check if device supports Web Audio API\n   */\n  static supportsWebAudio(): boolean {\n    return typeof window !== 'undefined' && \n           (typeof window.AudioContext !== 'undefined' || typeof (window as any).webkitAudioContext !== 'undefined');\n  }\n\n  /**\n   * Check if device supports MediaDevices API\n   */\n  static supportsMediaDevices(): boolean {\n    return typeof navigator !== 'undefined' && \n           typeof navigator.mediaDevices !== 'undefined' && \n           typeof navigator.mediaDevices.getUserMedia !== 'undefined';\n  }\n\n  /**\n   * Check if device supports MediaRecorder API\n   */\n  static supportsMediaRecorder(): boolean {\n    return typeof window !== 'undefined' && typeof (window as any).MediaRecorder !== 'undefined';\n  }\n\n  /**\n   * Get comprehensive device capabilities\n   */\n  static getDeviceCapabilities() {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    return {\n      deviceSpecs: specs,\n      webAudioSupport: DeviceDetection.supportsWebAudio(),\n      mediaDevicesSupport: DeviceDetection.supportsMediaDevices(),\n      mediaRecorderSupport: DeviceDetection.supportsMediaRecorder(),\n      touchSupport: 'ontouchend' in document,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Unknown',\n      screenSize: typeof window !== 'undefined' ? {\n        width: window.screen.width,\n        height: window.screen.height,\n        pixelRatio: window.devicePixelRatio\n      } : null,\n      language: typeof navigator !== 'undefined' ? navigator.language : 'Unknown',\n      platform: typeof navigator !== 'undefined' ? (navigator as any).platform || 'Unknown' : 'Unknown'\n    };\n  }\n\n  /**\n   * Check if current device is mobile\n   */\n  static isMobile(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    return specs.isIOS || /Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator?.userAgent || '');\n  }\n\n  /**\n   * Check if current device is tablet\n   */\n  static isTablet(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    if (specs.deviceType === 'iPad') return true;\n    \n    // Android tablet detection\n    const userAgent = navigator?.userAgent || '';\n    return /Android/i.test(userAgent) && !/Mobile/i.test(userAgent);\n  }\n\n  /**\n   * Check if current device is desktop\n   */\n  static isDesktop(): boolean {\n    return !DeviceDetection.isMobile() && !DeviceDetection.isTablet();\n  }\n\n  /**\n   * Get recommended audio constraints for current device\n   */\n  static getOptimalAudioConstraints(): MediaStreamConstraints {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    const baseConstraints: MediaStreamConstraints = {\n      audio: {\n        echoCancellation: false,\n        noiseSuppression: false,\n        autoGainControl: false,\n        sampleRate: 44100,\n        channelCount: 1,\n        sampleSize: 16,\n        // latency: 0.1, // Not supported in MediaTrackConstraints\n        // volume: 1.0, // Not supported in MediaTrackConstraints\n        deviceId: { ideal: 'default' }\n      }\n    };\n\n    // Add iOS-specific optimizations\n    if (specs.isIOS && baseConstraints.audio && typeof baseConstraints.audio === 'object') {\n      (baseConstraints.audio as any) = {\n        ...baseConstraints.audio,\n        // Disable all browser-level processing for iOS\n        googAutoGainControl: false,\n        googNoiseSuppression: false,\n        googEchoCancellation: false,\n        googHighpassFilter: false,\n        googTypingNoiseDetection: false,\n        googBeamforming: false,\n        mozAutoGainControl: false,\n        mozNoiseSuppression: false\n      };\n    }\n\n    return baseConstraints;\n  }\n\n  /**\n   * Clear cached device specifications (for testing)\n   */\n  static clearCache(): void {\n    DeviceDetection.cachedSpecs = null;\n  }\n\n  /**\n   * Get device-specific debugging information\n   */\n  static getDebugInfo() {\n    const capabilities = DeviceDetection.getDeviceCapabilities();\n    \n    return {\n      ...capabilities,\n      detectionMethods: {\n        userAgentIPhone: /iPhone/.test(navigator?.userAgent || ''),\n        userAgentIPad: /iPad/.test(navigator?.userAgent || ''),\n        userAgentMacintosh: /Macintosh/.test(navigator?.userAgent || ''),\n        touchSupport: 'ontouchend' in document,\n        navigatorPlatform: (navigator as any)?.platform || 'Unknown',\n        screenAspectRatio: typeof window !== 'undefined' ? \n          (window.screen.width / window.screen.height).toFixed(2) : 'Unknown'\n      }\n    };\n  }\n}","export enum ErrorCode {\n  AUDIO_CONTEXT_ERROR = 'AUDIO_CONTEXT_ERROR',\n  MICROPHONE_ACCESS_DENIED = 'MICROPHONE_ACCESS_DENIED',\n  PITCH_DETECTION_ERROR = 'PITCH_DETECTION_ERROR',\n  BUFFER_OVERFLOW = 'BUFFER_OVERFLOW',\n  INVALID_SAMPLE_RATE = 'INVALID_SAMPLE_RATE',\n  DEVICE_NOT_SUPPORTED = 'DEVICE_NOT_SUPPORTED',\n  PROCESSING_TIMEOUT = 'PROCESSING_TIMEOUT'\n}\n\nexport class PitchProError extends Error {\n  public readonly code: ErrorCode;\n  public readonly timestamp: Date;\n  public readonly context?: Record<string, any>;\n\n  constructor(\n    message: string,\n    code: ErrorCode,\n    context?: Record<string, any>\n  ) {\n    super(message);\n    this.name = 'PitchProError';\n    this.code = code;\n    this.timestamp = new Date();\n    this.context = context;\n    \n    // Maintain proper stack trace for where our error was thrown\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, PitchProError);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      timestamp: this.timestamp,\n      context: this.context,\n      stack: this.stack\n    };\n  }\n}\n\nexport class AudioContextError extends PitchProError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, ErrorCode.AUDIO_CONTEXT_ERROR, context);\n    this.name = 'AudioContextError';\n  }\n}\n\nexport class MicrophoneAccessError extends PitchProError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, ErrorCode.MICROPHONE_ACCESS_DENIED, context);\n    this.name = 'MicrophoneAccessError';\n  }\n}\n\nexport class PitchDetectionError extends PitchProError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, ErrorCode.PITCH_DETECTION_ERROR, context);\n    this.name = 'PitchDetectionError';\n  }\n}\n\nexport function handleError(error: unknown): PitchProError {\n  if (error instanceof PitchProError) {\n    return error;\n  }\n  \n  if (error instanceof Error) {\n    return new PitchProError(\n      error.message,\n      ErrorCode.PITCH_DETECTION_ERROR,\n      { originalError: error.name }\n    );\n  }\n  \n  return new PitchProError(\n    'An unknown error occurred',\n    ErrorCode.PITCH_DETECTION_ERROR,\n    { error: String(error) }\n  );\n}\n\nexport function isRecoverableError(error: PitchProError): boolean {\n  const recoverableErrors = [\n    ErrorCode.BUFFER_OVERFLOW,\n    ErrorCode.PROCESSING_TIMEOUT,\n    ErrorCode.PITCH_DETECTION_ERROR\n  ];\n  \n  return recoverableErrors.includes(error.code);\n}\n\n/**\n * User-friendly error message generator for different error types\n * \n * @description Converts technical error messages into user-friendly Japanese messages\n * with actionable guidance for resolution.\n */\nexport class ErrorMessageBuilder {\n  /**\n   * Generates user-friendly error messages with resolution steps\n   * \n   * @param error - PitchProError instance\n   * @returns Object containing user message and suggested actions\n   */\n  static getUserFriendlyMessage(error: PitchProError): {\n    title: string;\n    message: string;\n    actions: string[];\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    canRetry: boolean;\n  } {\n    switch (error.code) {\n      case ErrorCode.MICROPHONE_ACCESS_DENIED:\n        return {\n          title: 'マイクアクセスが拒否されました',\n          message: 'ピッチ検出を行うには、マイクへのアクセス許可が必要です。',\n          actions: [\n            'ブラウザのアドレスバーにあるマイクアイコンをクリック',\n            '「このサイトでマイクを許可する」を選択',\n            'ページを再読み込みしてもう一度試す',\n            'プライベートブラウジングモードを無効にする（Safariの場合）'\n          ],\n          severity: 'high',\n          canRetry: true\n        };\n\n      case ErrorCode.AUDIO_CONTEXT_ERROR:\n        return {\n          title: 'オーディオシステムエラー',\n          message: 'オーディオの初期化に失敗しました。デバイスの音響設定を確認してください。',\n          actions: [\n            '他のアプリケーションでマイクが使用中でないか確認',\n            'ブラウザを再起動してもう一度試す',\n            'システムの音響設定でマイクが有効になっているか確認',\n            '外部マイクを使用している場合は接続を確認'\n          ],\n          severity: 'high',\n          canRetry: true\n        };\n\n      case ErrorCode.PITCH_DETECTION_ERROR:\n        return {\n          title: 'ピッチ検出エラー',\n          message: '音程の検出中に一時的な問題が発生しました。',\n          actions: [\n            'マイクに向かって明確に歌ってみる',\n            '周囲のノイズを減らす',\n            '感度設定を調整する',\n            '数秒待ってからもう一度試す'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n\n      case ErrorCode.BUFFER_OVERFLOW:\n        return {\n          title: 'バッファオーバーフロー',\n          message: 'オーディオデータの処理が追いついていません。',\n          actions: [\n            '他のタブやアプリケーションを閉じる',\n            'ブラウザのハードウェアアクセラレーションを有効にする',\n            'より高性能なデバイスを使用する',\n            'ページを再読み込みする'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n\n      case ErrorCode.PROCESSING_TIMEOUT:\n        return {\n          title: '処理タイムアウト',\n          message: 'オーディオ処理の応答時間が長すぎます。',\n          actions: [\n            'デバイスの負荷を減らす（他のアプリを閉じる）',\n            'ネットワーク接続を確認する',\n            'ブラウザを再起動する',\n            'しばらく待ってからもう一度試す'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n\n      case ErrorCode.INVALID_SAMPLE_RATE:\n        return {\n          title: 'サンプリングレート不適合',\n          message: 'お使いのデバイスのサンプリングレートがサポートされていません。',\n          actions: [\n            'システムの音響設定で44.1kHz または 48kHzに設定',\n            '外部オーディオインターフェースの設定を確認',\n            'デバイスドライバを更新',\n            '別のマイクを試す'\n          ],\n          severity: 'high',\n          canRetry: false\n        };\n\n      case ErrorCode.DEVICE_NOT_SUPPORTED:\n        return {\n          title: 'デバイス非対応',\n          message: 'お使いのデバイスまたはブラウザはサポートされていません。',\n          actions: [\n            'Chrome、Firefox、Safari の最新版を使用',\n            'より新しいデバイスを使用',\n            'ブラウザの互換性情報を確認',\n            '技術サポートにお問い合わせ'\n          ],\n          severity: 'critical',\n          canRetry: false\n        };\n\n      default:\n        return {\n          title: '予期しないエラー',\n          message: 'システムで予期しない問題が発生しました。',\n          actions: [\n            'ページを再読み込み',\n            'ブラウザを再起動',\n            'しばらく時間をおいて再試行',\n            '問題が続く場合はサポートへ連絡'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n    }\n  }\n\n  /**\n   * Generates detailed technical error information for developers\n   * \n   * @param error - PitchProError instance\n   * @returns Formatted technical error details\n   */\n  static getTechnicalDetails(error: PitchProError): {\n    errorCode: string;\n    timestamp: string;\n    context: Record<string, any>;\n    stackTrace?: string;\n    diagnosticInfo: Record<string, any>;\n  } {\n    return {\n      errorCode: error.code,\n      timestamp: error.timestamp.toISOString(),\n      context: error.context || {},\n      stackTrace: error.stack,\n      diagnosticInfo: {\n        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\n        timestamp: Date.now(),\n        url: typeof window !== 'undefined' ? window.location.href : 'unknown',\n        isRecoverable: isRecoverableError(error)\n      }\n    };\n  }\n\n  /**\n   * Creates formatted console error messages for development\n   * \n   * @param error - PitchProError instance\n   * @param context - Additional context information\n   */\n  static logError(error: PitchProError, context?: string): void {\n    const friendlyMessage = this.getUserFriendlyMessage(error);\n    const technicalDetails = this.getTechnicalDetails(error);\n\n    console.group(`🚨 [PitchPro Error] ${friendlyMessage.title}`);\n    \n    // User-friendly information\n    console.log('👤 User Message:', friendlyMessage.message);\n    console.log('📋 Suggested Actions:', friendlyMessage.actions);\n    console.log('⚠️ Severity:', friendlyMessage.severity);\n    console.log('🔄 Can Retry:', friendlyMessage.canRetry);\n    \n    // Technical details\n    console.log('🔧 Error Code:', technicalDetails.errorCode);\n    console.log('⏰ Timestamp:', technicalDetails.timestamp);\n    \n    if (context) {\n      console.log('📍 Context:', context);\n    }\n    \n    if (technicalDetails.context && Object.keys(technicalDetails.context).length > 0) {\n      console.log('🔍 Additional Context:', technicalDetails.context);\n    }\n    \n    if (technicalDetails.stackTrace) {\n      console.log('📜 Stack Trace:', technicalDetails.stackTrace);\n    }\n    \n    console.groupEnd();\n  }\n\n  /**\n   * Creates recovery suggestions based on error type and context\n   * \n   * @param error - PitchProError instance\n   * @param deviceType - Device type for specific recommendations\n   * @returns Recovery strategy object\n   */\n  static getRecoveryStrategy(error: PitchProError, deviceType?: string): {\n    immediate: string[];\n    fallback: string[];\n    preventive: string[];\n  } {\n    const base = this.getUserFriendlyMessage(error);\n    \n    const immediate = base.actions.slice(0, 2);\n    const fallback = base.actions.slice(2);\n    \n    // Device-specific preventive measures\n    let preventive: string[] = [];\n    \n    if (deviceType === 'iPhone' || deviceType === 'iPad') {\n      preventive = [\n        '感度を高めに設定（7.0x推奨）',\n        'Safari使用を推奨',\n        'iOS 14以上で使用',\n        '低電力モードを無効にする'\n      ];\n    } else if (deviceType === 'Android') {\n      preventive = [\n        'Chrome使用を推奨',\n        'バックグラウンドアプリを制限',\n        '省電力モードを無効にする',\n        'マイク権限を常に許可に設定'\n      ];\n    } else {\n      preventive = [\n        '安定したネットワーク環境で使用',\n        'ブラウザを最新版に更新',\n        'ハードウェアアクセラレーションを有効化',\n        '外部ノイズの少ない環境で使用'\n      ];\n    }\n    \n    return {\n      immediate,\n      fallback,\n      preventive\n    };\n  }\n}","/**\n * AudioManager - Framework-agnostic Global Audio Resource Management System\n * \n * @description Provides centralized management of Web Audio API resources with automatic\n * device optimization, reference counting, and health monitoring. Solves common issues\n * with AudioContext sharing and MediaStream lifecycle management.\n * \n * @example\n * ```typescript\n * const audioManager = new AudioManager({\n *   sampleRate: 44100,\n *   echoCancellation: false,\n *   autoGainControl: false\n * });\n * \n * const resources = await audioManager.initialize();\n * const analyser = audioManager.createAnalyser('pitch-detection');\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { \n  AudioManagerConfig, \n  MediaStreamResources, \n  HealthStatus, \n  TrackState,\n  DeviceSpecs\n} from '../types';\nimport { DeviceDetection } from '../utils/DeviceDetection';\nimport { \n  AudioContextError, \n  MicrophoneAccessError, \n  PitchProError, \n  ErrorCode,\n  ErrorMessageBuilder\n} from '../utils/errors';\n\nexport class AudioManager {\n  /** @private Global AudioContext instance shared across the application */\n  private audioContext: AudioContext | null = null;\n  \n  /** @private MediaStream from user's microphone */\n  private mediaStream: MediaStream | null = null;\n  \n  /** @private Source node for audio processing pipeline */\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\n  \n  /** @private Gain node for microphone sensitivity adjustment */\n  private gainNode: GainNode | null = null;\n  \n  /** @private Map of analyser nodes by identifier for reuse */\n  private analysers = new Map<string, AnalyserNode>();\n  \n  /** @private Map of filter chains for noise reduction */\n  private filters = new Map<string, { highpass: BiquadFilterNode; lowpass: BiquadFilterNode; notch: BiquadFilterNode }>();\n  \n  /** @private Reference count for safe resource sharing */\n  private refCount = 0;\n  \n  /** @private Promise to prevent duplicate initialization */\n  private initPromise: Promise<MediaStreamResources> | null = null;\n  \n  /** @private Initialization state flag */\n  private isInitialized = false;\n  \n  /** @private Last error encountered during operations */\n  private lastError: Error | null = null;\n  \n  /** @private Current microphone sensitivity multiplier */\n  private currentSensitivity: number;\n  \n  /** @private Interval ID for gain monitoring (hotfix v1.1.3) */\n  private gainMonitorInterval: number | null = null;\n  \n  /** @private AudioManager configuration */\n  private config: AudioManagerConfig;\n\n  /**\n   * Creates a new AudioManager instance with device-optimized configuration\n   * \n   * @param config - Optional configuration to override defaults\n   * @param config.sampleRate - Audio sample rate in Hz (default: 44100)\n   * @param config.channelCount - Number of audio channels (default: 1)\n   * @param config.echoCancellation - Enable echo cancellation (default: false)\n   * @param config.noiseSuppression - Enable noise suppression (default: false)\n   * @param config.autoGainControl - Enable auto gain control (default: false)\n   * @param config.latency - Target latency in seconds (default: 0.1)\n   * \n   * @example\n   * ```typescript\n   * // Basic usage with defaults\n   * const audioManager = new AudioManager();\n   * \n   * // Custom configuration\n   * const audioManager = new AudioManager({\n   *   sampleRate: 48000,\n   *   echoCancellation: true,\n   *   latency: 0.05\n   * });\n   * ```\n   */\n  constructor(config: AudioManagerConfig = {}) {\n    this.config = {\n      sampleRate: 44100,\n      channelCount: 1,\n      echoCancellation: false,\n      noiseSuppression: false,\n      autoGainControl: false,\n      latency: 0.1,\n      ...config\n    };\n    \n    this.currentSensitivity = this._getDefaultSensitivity();\n  }\n\n  /**\n   * Gets device-specific default sensitivity multiplier\n   * \n   * @private\n   * @returns Device-optimized sensitivity value (PC: 1.0x, iPhone: 3.0x, iPad: 7.0x)\n   */\n  private _getDefaultSensitivity(): number {\n    const deviceSpecs = DeviceDetection.getDeviceSpecs();\n    \n    console.log(`🔧 [AudioManager] ${deviceSpecs.deviceType} detected - setting default sensitivity ${deviceSpecs.sensitivity}x`);\n    return deviceSpecs.sensitivity;\n  }\n\n  /**\n   * Initializes audio resources including AudioContext and MediaStream\n   * \n   * @description Safe to call multiple times - uses reference counting and health checks.\n   * Automatically handles browser-specific quirks and device optimization.\n   * \n   * @returns Promise resolving to audio resources\n   * @throws {Error} If microphone permission is denied or AudioContext creation fails\n   * \n   * @example\n   * ```typescript\n   * try {\n   *   const { audioContext, mediaStream, sourceNode } = await audioManager.initialize();\n   *   console.log('Audio initialized:', audioContext.state);\n   * } catch (error) {\n   *   console.error('Failed to initialize audio:', error.message);\n   * }\n   * ```\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    // If already initializing, wait for completion\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    // If already initialized - perform MediaStream health check\n    if (this.isInitialized && this.audioContext && this.mediaStream) {\n      const healthCheck = this.checkMediaStreamHealth();\n      \n      if (healthCheck.healthy) {\n        this.refCount++;\n        return {\n          audioContext: this.audioContext,\n          mediaStream: this.mediaStream,\n          sourceNode: this.sourceNode!\n        };\n      } else {\n        // Force re-initialization if MediaStream is unhealthy\n        console.warn('⚠️ [AudioManager] Unhealthy MediaStream detected - force re-initialization:', healthCheck);\n        console.log('🔄 [AudioManager] Unhealthy MediaStream details:', {\n          mediaStreamActive: this.mediaStream?.active,\n          trackCount: this.mediaStream?.getTracks().length,\n          trackStates: this.mediaStream?.getTracks().map(t => ({\n            kind: t.kind,\n            readyState: t.readyState,\n            enabled: t.enabled,\n            muted: t.muted\n          }))\n        });\n        \n        // Perform safe cleanup\n        this._cleanup();\n        this.isInitialized = false;\n        this.refCount = 0;\n        \n        // Short wait to ensure resource release\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        console.log('🔄 [AudioManager] Cleanup complete - starting re-initialization');\n        // Continue to next block for re-initialization\n      }\n    }\n\n    // Execute initialization\n    this.initPromise = this._doInitialize();\n    \n    try {\n      const result = await this.initPromise;\n      this.initPromise = null;\n      return result;\n    } catch (error) {\n      this.initPromise = null;\n      throw error;\n    }\n  }\n\n  /**\n   * Performs the actual initialization process\n   * \n   * @private\n   * @returns Promise resolving to initialized audio resources\n   * @throws {Error} If any step of initialization fails\n   */\n  private async _doInitialize(): Promise<MediaStreamResources> {\n    try {\n      console.log('🎤 [AudioManager] Starting initialization');\n\n      // Create AudioContext (single instance)\n      if (!this.audioContext) {\n        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n        console.log('✅ [AudioManager] AudioContext creation complete');\n      }\n\n      // Resume AudioContext if suspended\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n        console.log('✅ [AudioManager] AudioContext resume complete');\n      }\n\n      // Get MediaStream (single instance)\n      if (!this.mediaStream) {\n        const deviceSpecs = this.getPlatformSpecs();\n        \n        console.log(`🔍 [AudioManager] Device detection: ${deviceSpecs.deviceType}`, navigator.userAgent);\n        console.log(`🔍 [AudioManager] Touch support: ${'ontouchend' in document}`);\n        \n        // Safari WebKit compatibility: Maximum compatibility audio settings\n        const audioConstraints: MediaStreamConstraints = {\n          audio: {\n            // Basic settings: Safari WebKit stability focused\n            echoCancellation: this.config.echoCancellation,\n            noiseSuppression: this.config.noiseSuppression,\n            autoGainControl: this.config.autoGainControl,\n            \n            // HOTFIX: Enhanced AGC disable for all platforms to prevent level drop\n            ...(window as any).chrome && {\n              googAutoGainControl: false,     // Google AGC complete disable\n              googNoiseSuppression: false,    // Google noise suppression disable\n              googEchoCancellation: false,    // Google echo cancellation disable\n              googHighpassFilter: false,      // Google highpass filter disable\n              googTypingNoiseDetection: false, // Typing noise detection disable\n              googBeamforming: false,         // Beamforming disable\n            },\n            \n            // Mozilla-specific constraints\n            ...(navigator.userAgent.includes('Firefox')) && {\n              mozAutoGainControl: false,      // Mozilla AGC disable\n              mozNoiseSuppression: false,     // Mozilla noise suppression disable\n            },\n            \n            // Safari compatibility: Explicit quality settings  \n            sampleRate: this.config.sampleRate,\n            channelCount: this.config.channelCount,\n            sampleSize: 16,\n            \n            // Flexible device selection (Safari compatibility)\n            deviceId: { ideal: 'default' }\n          }\n        };\n        \n        console.log('🎤 [AudioManager] Getting MediaStream with Safari-compatible settings:', audioConstraints);\n        this.mediaStream = await navigator.mediaDevices.getUserMedia(audioConstraints);\n        console.log('✅ [AudioManager] MediaStream acquisition complete');\n      }\n\n      // Create SourceNode (single instance)\n      if (!this.sourceNode) {\n        this.sourceNode = this.audioContext.createMediaStreamSource(this.mediaStream);\n        console.log('✅ [AudioManager] SourceNode creation complete');\n        \n        // MediaStream state check\n        const tracks = this.mediaStream.getTracks();\n        console.log('🎤 [AudioManager] MediaStream tracks:', tracks.map(t => ({\n          kind: t.kind,\n          label: t.label,\n          enabled: t.enabled,\n          readyState: t.readyState,\n          muted: t.muted\n        })));\n      }\n\n      // Create GainNode (for microphone sensitivity adjustment)\n      if (!this.gainNode) {\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.gain.setValueAtTime(this.currentSensitivity, this.audioContext.currentTime);\n        \n        // Connect SourceNode -> GainNode\n        this.sourceNode.connect(this.gainNode);\n        console.log(`✅ [AudioManager] GainNode creation complete (sensitivity: ${this.currentSensitivity}x)`);\n        \n        // HOTFIX: Start gain monitoring to prevent level drops\n        this.startGainMonitoring();\n      }\n\n      this.isInitialized = true;\n      this.refCount++;\n      this.lastError = null;\n\n      console.log(`🎤 [AudioManager] Initialization complete (refCount: ${this.refCount})`);\n\n      return {\n        audioContext: this.audioContext,\n        mediaStream: this.mediaStream,\n        sourceNode: this.sourceNode\n      };\n\n    } catch (error) {\n      // Convert to structured error with context\n      const structuredError = this._createStructuredError(error as Error, 'initialization');\n      \n      // Enhanced error logging with user-friendly information\n      ErrorMessageBuilder.logError(structuredError, 'AudioManager initialization');\n      \n      this.lastError = structuredError;\n      this.isInitialized = false;\n      \n      // Cleanup on error\n      this._cleanup();\n      \n      throw structuredError;\n    }\n  }\n\n  /**\n   * Create dedicated AnalyserNode\n   * @param id - Analyser identifier\n   * @param options - Option settings\n   */\n  createAnalyser(id: string, options: {\n    fftSize?: number;\n    smoothingTimeConstant?: number;\n    minDecibels?: number;\n    maxDecibels?: number;\n    useFilters?: boolean;\n  } = {}): AnalyserNode {\n    if (!this.isInitialized || !this.audioContext || !this.sourceNode) {\n      const error = new AudioContextError(\n        'AudioManagerが初期化されていません。initialize()メソッドを最初に呼び出してください。',\n        {\n          operation: 'createAnalyser',\n          analyserId: id,\n          currentState: {\n            isInitialized: this.isInitialized,\n            hasAudioContext: !!this.audioContext,\n            hasSourceNode: !!this.sourceNode\n          }\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'Analyser creation');\n      throw error;\n    }\n\n    // Remove existing analyser if present\n    this.removeAnalyser(id);\n\n    const {\n      fftSize = 2048,\n      smoothingTimeConstant = 0.8,\n      minDecibels = -90,\n      maxDecibels = -10,\n      useFilters = true\n    } = options;\n\n    // Create Analyser (Safari WebKit optimized)\n    const analyser = this.audioContext.createAnalyser();\n    \n    // Safari load reduction settings\n    analyser.fftSize = Math.min(fftSize, 2048); // Safari upper limit restriction\n    analyser.smoothingTimeConstant = Math.max(smoothingTimeConstant, 0.7); // Safari stabilization\n    analyser.minDecibels = Math.max(minDecibels, -80); // Safari range optimization\n    analyser.maxDecibels = Math.min(maxDecibels, -10);\n\n    let finalNode: AudioNode = this.gainNode || this.sourceNode;\n\n    // Create filter chain (optional)\n    if (useFilters) {\n      const filterChain = this._createFilterChain();\n      this.filters.set(id, filterChain);\n      \n      // Connect filter chain (starting from GainNode)\n      finalNode.connect(filterChain.highpass);\n      filterChain.highpass.connect(filterChain.lowpass);\n      filterChain.lowpass.connect(filterChain.notch);\n      filterChain.notch.connect(analyser);\n      \n      console.log(`🔧 [AudioManager] Filtered Analyser created: ${id}`);\n    } else {\n      // Direct connection (signal from GainNode)\n      finalNode.connect(analyser);\n      console.log(`🔧 [AudioManager] Raw signal Analyser created: ${id}`);\n    }\n    \n    // Important: Analyser only passes audio through, don't connect to destination\n    // (prevents microphone feedback)\n\n    this.analysers.set(id, analyser);\n    return analyser;\n  }\n\n  /**\n   * Create 3-stage noise reduction filter chain\n   */\n  private _createFilterChain() {\n    if (!this.audioContext) {\n      const error = new AudioContextError(\n        'AudioContextが利用できません。ブラウザでオーディオ機能が無効になっているか、デバイスがサポートされていません。',\n        {\n          operation: '_createFilterChain',\n          audioContextState: 'null'\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'Filter chain creation');\n      throw error;\n    }\n\n    // 1. Highpass filter (remove low frequency noise: cut below 80Hz)\n    const highpass = this.audioContext.createBiquadFilter();\n    highpass.type = 'highpass';\n    highpass.frequency.setValueAtTime(80, this.audioContext.currentTime);\n    highpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n    const lowpass = this.audioContext.createBiquadFilter();\n    lowpass.type = 'lowpass';\n    lowpass.frequency.setValueAtTime(800, this.audioContext.currentTime);\n    lowpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 3. Notch filter (remove power noise: 60Hz)\n    const notch = this.audioContext.createBiquadFilter();\n    notch.type = 'notch';\n    notch.frequency.setValueAtTime(60, this.audioContext.currentTime);\n    notch.Q.setValueAtTime(10, this.audioContext.currentTime);\n\n    return { highpass, lowpass, notch };\n  }\n\n  /**\n   * Removes a specific analyser and its associated filter chain\n   * \n   * @param id - Unique identifier for the analyser to remove\n   * \n   * @example\n   * ```typescript\n   * audioManager.removeAnalyser('pitch-detection');\n   * ```\n   */\n  removeAnalyser(id: string): void {\n    if (this.analysers.has(id)) {\n      const analyser = this.analysers.get(id)!;\n      analyser.disconnect();\n      this.analysers.delete(id);\n      console.log(`🗑️ [AudioManager] Analyser removed: ${id}`);\n    }\n\n    if (this.filters.has(id)) {\n      const filterChain = this.filters.get(id)!;\n      filterChain.highpass.disconnect();\n      filterChain.lowpass.disconnect();\n      filterChain.notch.disconnect();\n      this.filters.delete(id);\n      console.log(`🗑️ [AudioManager] Filter chain removed: ${id}`);\n    }\n  }\n\n  /**\n   * Adjusts microphone sensitivity with automatic gain monitoring\n   * \n   * @param sensitivity - Sensitivity multiplier (0.1 ~ 10.0)\n   * - 0.1-1.0: Reduced sensitivity for loud environments\n   * - 1.0: Standard sensitivity (PC default)\n   * - 3.0: iPhone optimized sensitivity\n   * - 7.0: iPad optimized sensitivity\n   * - 10.0: Maximum sensitivity for quiet environments\n   * \n   * @example\n   * ```typescript\n   * // Set sensitivity for iPad\n   * audioManager.setSensitivity(7.0);\n   * \n   * // Reduce for loud environment\n   * audioManager.setSensitivity(0.5);\n   * ```\n   */\n  setSensitivity(sensitivity: number): void {\n    // Range limit (extended to 10.0x for iPad real device support)\n    const clampedSensitivity = Math.max(0.1, Math.min(10.0, sensitivity));\n    \n    if (this.gainNode) {\n      // HOTFIX: Ensure gain value is properly set and monitored\n      this.gainNode.gain.setValueAtTime(clampedSensitivity, this.audioContext?.currentTime || 0);\n      this.currentSensitivity = clampedSensitivity;\n      \n      // Verify the gain was actually set\n      setTimeout(() => {\n        if (this.gainNode && Math.abs(this.gainNode.gain.value - clampedSensitivity) > 0.1) {\n          const driftError = new PitchProError(\n            `ゲイン値のドリフトが検出されました。期待値: ${clampedSensitivity}, 実際値: ${this.gainNode.gain.value}`,\n            ErrorCode.AUDIO_CONTEXT_ERROR,\n            {\n              operation: 'setSensitivity_verification',\n              expectedGain: clampedSensitivity,\n              actualGain: this.gainNode.gain.value,\n              driftAmount: Math.abs(this.gainNode.gain.value - clampedSensitivity)\n            }\n          );\n          \n          ErrorMessageBuilder.logError(driftError, 'Gain drift detection');\n          this.gainNode.gain.setValueAtTime(clampedSensitivity, this.audioContext?.currentTime || 0);\n        }\n      }, 100);\n      \n      console.log(`🎤 [AudioManager] Microphone sensitivity updated: ${clampedSensitivity.toFixed(1)}x`);\n    } else {\n      // If GainNode not initialized, save setting only\n      this.currentSensitivity = clampedSensitivity;\n      console.log(`🎤 [AudioManager] Microphone sensitivity set (awaiting initialization): ${clampedSensitivity.toFixed(1)}x`);\n    }\n  }\n\n  /**\n   * Get current microphone sensitivity\n   */\n  getSensitivity(): number {\n    return this.currentSensitivity;\n  }\n\n  /**\n   * HOTFIX: Start gain monitoring to prevent level drops\n   */\n  private startGainMonitoring(): void {\n    if (this.gainMonitorInterval) {\n      clearInterval(this.gainMonitorInterval);\n    }\n    \n    this.gainMonitorInterval = window.setInterval(() => {\n      if (this.gainNode && this.audioContext) {\n        const currentGainValue = this.gainNode.gain.value;\n        const expectedGain = this.currentSensitivity;\n        \n        // Check for significant drift (more than 10% difference)\n        if (Math.abs(currentGainValue - expectedGain) > expectedGain * 0.1) {\n          const monitorError = new PitchProError(\n            `ゲインモニタリングでドリフト検出: 期待値 ${expectedGain}, 現在値 ${currentGainValue}`,\n            ErrorCode.AUDIO_CONTEXT_ERROR,\n            {\n              operation: 'gainMonitoring',\n              expectedGain,\n              currentGain: currentGainValue,\n              driftPercentage: ((Math.abs(currentGainValue - expectedGain) / expectedGain) * 100).toFixed(1)\n            }\n          );\n          \n          ErrorMessageBuilder.logError(monitorError, 'Automatic gain monitoring');\n          \n          // Force reset to expected value\n          this.gainNode.gain.setValueAtTime(expectedGain, this.audioContext.currentTime);\n          console.log(`🔧 [AudioManager] Gain reset to: ${expectedGain}`);\n        }\n      }\n    }, 2000); // Check every 2 seconds\n  }\n\n  /**\n   * HOTFIX: Stop gain monitoring\n   */\n  private stopGainMonitoring(): void {\n    if (this.gainMonitorInterval) {\n      clearInterval(this.gainMonitorInterval);\n      this.gainMonitorInterval = null;\n    }\n  }\n\n  /**\n   * Get platform-specific settings according to specification\n   * Complies with MICROPHONE_PLATFORM_SPECIFICATIONS.md\n   */\n  getPlatformSpecs(): DeviceSpecs {\n    // Use DeviceDetection utility for consistent device detection\n    const deviceSpecs = DeviceDetection.getDeviceSpecs();\n    \n    // Add AudioManager-specific properties\n    return {\n      ...deviceSpecs,\n      sensitivity: this.currentSensitivity || deviceSpecs.sensitivity\n    };\n  }\n\n  /**\n   * Decrement reference count and cleanup\n   */\n  release(analyserIds: string[] = []): void {\n    // Remove specified analysers\n    analyserIds.forEach(id => this.removeAnalyser(id));\n\n    this.refCount = Math.max(0, this.refCount - 1);\n    console.log(`📉 [AudioManager] Reference count decremented: ${this.refCount}`);\n\n    // Full cleanup only when no one is using it\n    if (this.refCount <= 0) {\n      console.log('🧹 [AudioManager] Starting full resource cleanup');\n      this._cleanup();\n    }\n  }\n\n  /**\n   * Force cleanup (for emergency use)\n   */\n  forceCleanup(): void {\n    console.log('🚨 [AudioManager] Force cleanup executed');\n    this._cleanup();\n  }\n\n  /**\n   * Internal cleanup process\n   */\n  private _cleanup(): void {\n    console.log('🧹 [AudioManager] Starting cleanup');\n    \n    // HOTFIX: Stop gain monitoring\n    this.stopGainMonitoring();\n    \n    // Remove all analysers\n    for (const id of this.analysers.keys()) {\n      this.removeAnalyser(id);\n    }\n\n    // Stop MediaStream (health check compatible)\n    if (this.mediaStream) {\n      const tracks = this.mediaStream.getTracks();\n      console.log(`🛑 [AudioManager] Stopping MediaStream: ${tracks.length} tracks`);\n      \n      tracks.forEach((track, index) => {\n        try {\n          if (track.readyState !== 'ended') {\n            track.stop();\n            console.log(`🛑 [AudioManager] Track ${index} stop complete`);\n          } else {\n            console.log(`⚠️ [AudioManager] Track ${index} already ended`);\n          }\n        } catch (error) {\n          const trackError = new PitchProError(\n            `メディアトラック ${index} の停止中にエラーが発生しました: ${(error as Error).message}`,\n            ErrorCode.AUDIO_CONTEXT_ERROR,\n            {\n              operation: 'track_cleanup',\n              trackIndex: index,\n              originalError: (error as Error).message,\n              trackState: track.readyState\n            }\n          );\n          \n          ErrorMessageBuilder.logError(trackError, 'Media track cleanup');\n        }\n      });\n      \n      this.mediaStream = null;\n    }\n\n    // Close AudioContext\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      try {\n        this.audioContext.close();\n        console.log('🛑 [AudioManager] AudioContext close complete');\n      } catch (error) {\n        const contextError = new AudioContextError(\n          `AudioContextの終了中にエラーが発生しました: ${(error as Error).message}`,\n          {\n            operation: 'audioContext_cleanup',\n            contextState: this.audioContext?.state,\n            originalError: (error as Error).message\n          }\n        );\n        \n        ErrorMessageBuilder.logError(contextError, 'AudioContext cleanup');\n      }\n      this.audioContext = null;\n    }\n\n    // Remove GainNode\n    if (this.gainNode) {\n      this.gainNode.disconnect();\n      this.gainNode = null;\n    }\n\n    // Remove SourceNode\n    if (this.sourceNode) {\n      this.sourceNode.disconnect();\n      this.sourceNode = null;\n    }\n\n    // Reset state\n    this.isInitialized = false;\n    this.refCount = 0;\n    this.initPromise = null;\n    this.currentSensitivity = this._getDefaultSensitivity(); // Reset to device-dependent default sensitivity\n\n    console.log('✅ [AudioManager] Cleanup complete');\n  }\n\n  /**\n   * Creates structured error with enhanced context information\n   * \n   * @private\n   * @param error - Original error\n   * @param operation - Operation that failed\n   * @returns Structured PitchProError with context\n   */\n  private _createStructuredError(error: Error, operation: string): PitchProError {\n    // Determine error type based on error message patterns\n    if (error.message.includes('Permission denied') || \n        error.message.includes('NotAllowedError') ||\n        error.message.includes('permission')) {\n      return new MicrophoneAccessError(\n        'マイクへのアクセス許可が拒否されました。ブラウザの設定でマイクアクセスを許可してください。',\n        {\n          operation,\n          originalError: error.message,\n          deviceSpecs: this.getPlatformSpecs(),\n          userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown'\n        }\n      );\n    }\n    \n    if (error.message.includes('AudioContext') || \n        error.message.includes('audio') ||\n        error.message.includes('context')) {\n      return new AudioContextError(\n        'オーディオシステムの初期化に失敗しました。デバイスの音響設定を確認するか、ブラウザを再起動してください。',\n        {\n          operation,\n          originalError: error.message,\n          audioContextState: this.audioContext?.state || 'none',\n          sampleRate: this.audioContext?.sampleRate || 'unknown',\n          deviceSpecs: this.getPlatformSpecs()\n        }\n      );\n    }\n    \n    // Default to generic PitchPro error\n    return new PitchProError(\n      `${operation}中に予期しないエラーが発生しました: ${error.message}`,\n      ErrorCode.AUDIO_CONTEXT_ERROR,\n      {\n        operation,\n        originalError: error.message,\n        stack: error.stack,\n        currentState: {\n          isInitialized: this.isInitialized,\n          refCount: this.refCount,\n          hasResources: !!(this.audioContext && this.mediaStream && this.sourceNode)\n        }\n      }\n    );\n  }\n\n  /**\n   * Gets current AudioManager status for debugging and monitoring\n   * \n   * @returns Status object containing initialization state, reference count, and resource states\n   * \n   * @example\n   * ```typescript\n   * const status = audioManager.getStatus();\n   * console.log('AudioManager Status:', status);\n   * console.log('Active analysers:', status.activeAnalysers);\n   * ```\n   */\n  getStatus() {\n    return {\n      isInitialized: this.isInitialized,\n      refCount: this.refCount,\n      audioContextState: this.audioContext?.state || 'none',\n      mediaStreamActive: this.mediaStream?.active || false,\n      activeAnalysers: Array.from(this.analysers.keys()),\n      activeFilters: Array.from(this.filters.keys()),\n      lastError: this.lastError,\n      currentSensitivity: this.currentSensitivity\n    };\n  }\n\n  /**\n   * Performs comprehensive health check on MediaStream and tracks\n   * \n   * @returns Health status object with detailed track information\n   * \n   * @example\n   * ```typescript\n   * const health = audioManager.checkMediaStreamHealth();\n   * if (!health.healthy) {\n   *   console.warn('MediaStream health issue detected:', health);\n   *   // Perform recovery actions\n   * }\n   * ```\n   */\n  checkMediaStreamHealth(): HealthStatus {\n    if (!this.mediaStream) {\n      return { \n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    // MediaStream state check (Safari compatibility enhanced)\n    if (!this.mediaStream.active) {\n      return {\n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const tracks = this.mediaStream.getTracks();\n    if (tracks.length === 0) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const audioTrack = tracks.find(track => track.kind === 'audio');\n    if (!audioTrack) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: tracks.map(track => ({\n          kind: track.kind,\n          enabled: track.enabled,\n          readyState: track.readyState,\n          muted: track.muted\n        })),\n        healthy: false\n      };\n    }\n\n    const trackStates: TrackState[] = tracks.map(track => ({\n      kind: track.kind,\n      enabled: track.enabled,\n      readyState: track.readyState,\n      muted: track.muted\n    }));\n\n    // AudioTrack detailed state check (Safari WebKit compatibility)\n    if (audioTrack.readyState === 'ended') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    if (!audioTrack.enabled) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // Safari-specific muted state check\n    if (audioTrack.muted) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // Additional check: MediaStream and Track consistency verification\n    if (this.mediaStream.active && audioTrack.readyState !== 'live') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    return {\n      mediaStreamActive: this.mediaStream.active,\n      audioContextState: this.audioContext?.state || 'none',\n      trackStates,\n      healthy: true,\n      refCount: this.refCount\n    };\n  }\n}","'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n","import FFT from \"fft.js\";\n\n/**\n * @typedef {Float32Array | Float64Array | number[]} Buffer One of the supported\n * buffer types. Other numeric array types may not work correctly.\n */\n\n/**\n * A class that can perform autocorrelation on input arrays of a given size.\n *\n * The class holds internal buffers so that no additional allocations are\n * necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use. While inputs to the\n * autocorrelation process can be any array-like type, the output buffer\n * (whether provided explicitly or using a fresh buffer) is always of this type.\n */\nexport class Autocorrelator {\n  /** @private @readonly @type {number} */\n  _inputLength;\n  /** @private @type {FFT} */\n  _fft;\n  /** @private @type {(size: number) => T} */\n  _bufferSupplier;\n  /** @private @type {T} */\n  _paddedInputBuffer;\n  /** @private @type {T} */\n  _transformBuffer;\n  /** @private @type {T} */\n  _inverseBuffer;\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float32Array(length),\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float64Array(length),\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using `number[]`\n   * buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new Autocorrelator(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link Autocorrelator} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `Autocorrelator` will only support operation on arrays of this length.\n   * @param bufferSupplier {(length: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    if (inputLength < 1) {\n      throw new Error(`Input length must be at least one`);\n    }\n    this._inputLength = inputLength;\n    // We need to double the input length to get correct results, and the FFT\n    // algorithm we use requires a length that's a power of 2\n    this._fft = new FFT(ceilPow2(2 * inputLength));\n    this._bufferSupplier = bufferSupplier;\n    this._paddedInputBuffer = this._bufferSupplier(this._fft.size);\n    this._transformBuffer = this._bufferSupplier(2 * this._fft.size);\n    this._inverseBuffer = this._bufferSupplier(2 * this._fft.size);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._inputLength;\n  }\n\n  /**\n   * Autocorrelates the given input data.\n   *\n   * @param input {ArrayLike<number>} the input data to autocorrelate\n   * @param output {T} the output buffer into which to write the autocorrelated\n   * data. If not provided, a new buffer will be created.\n   * @returns {T} `output`\n   */\n  autocorrelate(input, output = this._bufferSupplier(input.length)) {\n    if (input.length !== this._inputLength) {\n      throw new Error(\n        `Input must have length ${this._inputLength} but had length ${input.length}`,\n      );\n    }\n    // Step 0: pad the input array with zeros\n    for (let i = 0; i < input.length; i++) {\n      this._paddedInputBuffer[i] = input[i];\n    }\n    for (let i = input.length; i < this._paddedInputBuffer.length; i++) {\n      this._paddedInputBuffer[i] = 0;\n    }\n\n    // Step 1: get the DFT of the input array\n    this._fft.realTransform(this._transformBuffer, this._paddedInputBuffer);\n    // We need to fill in the right half of the array too\n    this._fft.completeSpectrum(this._transformBuffer);\n    // Step 2: multiply each entry by its conjugate\n    const tb = this._transformBuffer;\n    for (let i = 0; i < tb.length; i += 2) {\n      tb[i] = tb[i] * tb[i] + tb[i + 1] * tb[i + 1];\n      tb[i + 1] = 0;\n    }\n    // Step 3: perform the inverse transform\n    this._fft.inverseTransform(this._inverseBuffer, this._transformBuffer);\n\n    // This last result (the inverse transform) contains the autocorrelation\n    // data, which is completely real\n    for (let i = 0; i < input.length; i++) {\n      output[i] = this._inverseBuffer[2 * i];\n    }\n    return output;\n  }\n}\n\n/**\n * Returns an array of all the key maximum positions in the given input array.\n *\n * In McLeod's paper, a key maximum is the highest maximum between a positively\n * sloped zero crossing and a negatively sloped one.\n *\n * TODO: it may be more efficient not to construct a new output array each time,\n * but that would also make the code more complicated (more so than the changes\n * that were needed to remove the other allocations).\n *\n * @param input {ArrayLike<number>}\n * @returns {number[]}\n */\nfunction getKeyMaximumIndices(input) {\n  // The indices of the key maxima\n  /** @type {number[]} */ const keyIndices = [];\n  // Whether the last zero crossing found was positively sloped; equivalently,\n  // whether we're looking for a key maximum\n  let lookingForMaximum = false;\n  // The largest local maximum found so far\n  let max = -Infinity;\n  // The index of the largest local maximum so far\n  let maxIndex = -1;\n\n  for (let i = 1; i < input.length - 1; i++) {\n    if (input[i - 1] <= 0 && input[i] > 0) {\n      // Positively sloped zero crossing\n      lookingForMaximum = true;\n      maxIndex = i;\n      max = input[i];\n    } else if (input[i - 1] > 0 && input[i] <= 0) {\n      // Negatively sloped zero crossing\n      lookingForMaximum = false;\n      if (maxIndex !== -1) {\n        keyIndices.push(maxIndex);\n      }\n    } else if (lookingForMaximum && input[i] > max) {\n      max = input[i];\n      maxIndex = i;\n    }\n  }\n\n  return keyIndices;\n}\n\n/**\n * Refines the chosen key maximum index chosen from the given data by\n * interpolating a parabola using the key maximum index and its two neighbors\n * and finding the position of that parabola's maximum value.\n *\n * This is described in section 5 of the MPM paper as a way to refine the\n * position of the maximum.\n *\n * @param index {number} the chosen key maximum index. This must be between `1`\n * and `data.length - 2`, inclusive, since it and its two neighbors need to be\n * valid indexes of `data`.\n * @param data {ArrayLike<number>} the input array from which `index` was chosen\n * @returns {[number, number]} a pair consisting of the refined key maximum index and the\n * interpolated value of `data` at that index (the latter of which is used as a\n * measure of clarity)\n */\nfunction refineResultIndex(index, data) {\n  const [x0, x1, x2] = [index - 1, index, index + 1];\n  const [y0, y1, y2] = [data[x0], data[x1], data[x2]];\n\n  // The parabola going through the three data points can be written as\n  // y = y0(x - x1)(x - x2)/(x0 - x1)(x0 - x2)\n  //   + y1(x - x0)(x - x2)/(x1 - x0)(x1 - x2)\n  //   + y2(x - x0)(x - x1)/(x2 - x0)(x2 - x1)\n  // Given the definitions of x0, x1, and x2, we can simplify the denominators:\n  // y = y0(x - x1)(x - x2)/2\n  //   - y1(x - x0)(x - x2)\n  //   + y2(x - x0)(x - x1)/2\n  // We can expand this out and get the coefficients in standard form:\n  // a = y0/2 - y1 + y2/2\n  // b = -(y0/2)(x1 + x2) + y1(x0 + x2) - (y2/2)(x0 + x1)\n  // c = y0x1x2/2 - y1x0x2 + y2x0x1/2\n  // The index of the maximum is -b / 2a (by solving for x where the derivative\n  // is 0).\n\n  const a = y0 / 2 - y1 + y2 / 2;\n  const b = -(y0 / 2) * (x1 + x2) + y1 * (x0 + x2) - (y2 / 2) * (x0 + x1);\n  const c = (y0 * x1 * x2) / 2 - y1 * x0 * x2 + (y2 * x0 * x1) / 2;\n\n  const xMax = -b / (2 * a);\n  const yMax = a * xMax * xMax + b * xMax + c;\n  return [xMax, yMax];\n}\n\n/**\n * A class that can detect the pitch of a note from a time-domain input array.\n *\n * This class uses the McLeod pitch method (MPM) to detect pitches. MPM is\n * described in the paper 'A Smarter Way to Find Pitch' by Philip McLeod and\n * Geoff Wyvill\n * (http://miracle.otago.ac.nz/tartini/papers/A_Smarter_Way_to_Find_Pitch.pdf).\n *\n * The class holds internal buffers so that a minimal number of additional\n * allocations are necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use internally. Inputs to the\n * pitch-detection process can be any numeric array type.\n */\nexport class PitchDetector {\n  /** @private @type {Autocorrelator<T>} */\n  _autocorrelator;\n  /** @private @type {T} */\n  _nsdfBuffer;\n  /** @private @type {number} */\n  _clarityThreshold = 0.9;\n  /** @private @type {number} */\n  _minVolumeAbsolute = 0.0;\n  /** @private @type {number} */\n  _maxInputAmplitude = 1.0;\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float32Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float64Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using `number[]` buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new PitchDetector(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link PitchDetector} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `PitchDetector` will only support operation on arrays of this length.\n   * @param bufferSupplier {(inputLength: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    this._autocorrelator = new Autocorrelator(inputLength, bufferSupplier);\n    this._nsdfBuffer = bufferSupplier(inputLength);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._autocorrelator.inputLength;\n  }\n\n  /**\n   * Sets the clarity threshold used when identifying the correct pitch (the constant\n   * `k` from the MPM paper). The value must be between 0 (exclusive) and 1\n   * (inclusive), with the most suitable range being between 0.8 and 1.\n   *\n   * @param threshold {number} the clarity threshold\n   */\n  set clarityThreshold(threshold) {\n    if (!Number.isFinite(threshold) || threshold <= 0 || threshold > 1) {\n      throw new Error(\"clarityThreshold must be a number in the range (0, 1]\");\n    }\n    this._clarityThreshold = threshold;\n  }\n\n  /**\n   * Sets the minimum detectable volume, as an absolute number between 0 and\n   * `maxInputAmplitude`, inclusive, to consider in a sample when detecting the\n   * pitch. If a sample fails to meet this minimum volume, `findPitch` will\n   * return a clarity of 0.\n   *\n   * Volume is calculated as the RMS (root mean square) of the input samples.\n   *\n   * @param volume {number} the minimum volume as an absolute amplitude value\n   */\n  set minVolumeAbsolute(volume) {\n    if (\n      !Number.isFinite(volume) ||\n      volume < 0 ||\n      volume > this._maxInputAmplitude\n    ) {\n      throw new Error(\n        `minVolumeAbsolute must be a number in the range [0, ${this._maxInputAmplitude}]`,\n      );\n    }\n    this._minVolumeAbsolute = volume;\n  }\n\n  /**\n   * Sets the minimum volume using a decibel measurement. Must be less than or\n   * equal to 0: 0 indicates the loudest possible sound (see\n   * `maxInputAmplitude`), -10 is a sound with a tenth of the volume of the\n   * loudest possible sound, etc.\n   *\n   * Volume is calculated as the RMS (root mean square) of the input samples.\n   *\n   * @param db {number} the minimum volume in decibels, with 0 being the loudest\n   * sound\n   */\n  set minVolumeDecibels(db) {\n    if (!Number.isFinite(db) || db > 0) {\n      throw new Error(\"minVolumeDecibels must be a number <= 0\");\n    }\n    this._minVolumeAbsolute = this._maxInputAmplitude * 10 ** (db / 10);\n  }\n\n  /**\n   * Sets the maximum amplitude of an input reading. Must be greater than 0.\n   *\n   * @param amplitude {number} the maximum amplitude (absolute value) of an input reading\n   */\n  set maxInputAmplitude(amplitude) {\n    if (!Number.isFinite(amplitude) || amplitude <= 0) {\n      throw new Error(\"maxInputAmplitude must be a number > 0\");\n    }\n    this._maxInputAmplitude = amplitude;\n  }\n\n  /**\n   * Returns the pitch detected using McLeod Pitch Method (MPM) along with a\n   * measure of its clarity.\n   *\n   * The clarity is a value between 0 and 1 (potentially inclusive) that\n   * represents how \"clear\" the pitch was. A clarity value of 1 indicates that\n   * the pitch was very distinct, while lower clarity values indicate less\n   * definite pitches.\n   *\n   * @param input {ArrayLike<number>} the time-domain input data\n   * @param sampleRate {number} the sample rate at which the input data was\n   * collected\n   * @returns {[number, number]} the detected pitch, in Hz, followed by the\n   * clarity. If a pitch cannot be determined from the input, such as if the\n   * volume is too low (see `minVolumeAbsolute` and `minVolumeDecibels`), this\n   * will be `[0, 0]`.\n   */\n  findPitch(input, sampleRate) {\n    // If the highest key maximum is less than the minimum volume, we don't need\n    // to bother detecting the pitch, as the sample is too quiet.\n    if (this._belowMinimumVolume(input)) return [0, 0];\n    this._nsdf(input);\n    const keyMaximumIndices = getKeyMaximumIndices(this._nsdfBuffer);\n    if (keyMaximumIndices.length === 0) {\n      // No key maxima means that we either don't have enough data to analyze or\n      // that the data was flawed (such as an input array of zeroes)\n      return [0, 0];\n    }\n    // The highest key maximum\n    const nMax = Math.max(...keyMaximumIndices.map((i) => this._nsdfBuffer[i]));\n    // Following the paper, we return the pitch corresponding to the first key\n    // maximum higher than K * nMax. This is guaranteed not to be undefined, since\n    // we know of at least one key maximum satisfying this condition (whichever\n    // key maximum gave us nMax).\n    const resultIndex = keyMaximumIndices.find(\n      (i) => this._nsdfBuffer[i] >= this._clarityThreshold * nMax,\n    );\n    const [refinedResultIndex, clarity] = refineResultIndex(\n      // @ts-expect-error resultIndex is guaranteed to be defined\n      resultIndex,\n      this._nsdfBuffer,\n    );\n\n    // Due to floating point errors, the clarity may occasionally come out to be\n    // slightly over 1.0. We can avoid incorrect results by clamping the value.\n    return [sampleRate / refinedResultIndex, Math.min(clarity, 1.0)];\n  }\n\n  /**\n   * Returns whether the input audio data is below the minimum volume allowed by\n   * the pitch detector.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   * @returns {boolean}\n   */\n  _belowMinimumVolume(input) {\n    if (this._minVolumeAbsolute === 0) return false;\n    let squareSum = 0;\n    for (let i = 0; i < input.length; i++) {\n      squareSum += input[i] ** 2;\n    }\n    return Math.sqrt(squareSum / input.length) < this._minVolumeAbsolute;\n  }\n\n  /**\n   * Computes the NSDF of the input and stores it in the internal buffer. This\n   * is equation (9) in the McLeod pitch method paper.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   */\n  _nsdf(input) {\n    // The function r'(tau) is the autocorrelation\n    this._autocorrelator.autocorrelate(input, this._nsdfBuffer);\n    // The function m'(tau) (defined in equation (6)) can be computed starting\n    // with m'(0), which is equal to 2r'(0), and then iteratively modified to\n    // get m'(1), m'(2), etc. For example, to get m'(1), we take m'(0) and\n    // subtract x_0^2 and x_{W-1}^2. Then, to get m'(2), we take m'(1) and\n    // subtract x_1^2 and x_{W-2}^2, and further values are similar (see the\n    // note at the end of section 6 in the MPM paper).\n    //\n    // The resulting array values are 2 * r'(tau) / m'(tau). We use m below as\n    // the incremental value of m'.\n    let m = 2 * this._nsdfBuffer[0];\n    /** @type {number} */ let i;\n    // As pointed out by issuefiler on GitHub, we can take advantage of the fact\n    // that m will never increase to avoid division by zero by ending this loop\n    // once m === 0. The rest of the array values after m becomes 0 will just be\n    // set to 0 themselves. We actually check for m > 0 rather than m === 0\n    // because there may be small floating-point errors that cause m to become\n    // negative rather than exactly 0.\n    for (i = 0; i < this._nsdfBuffer.length && m > 0; i++) {\n      this._nsdfBuffer[i] = (2 * this._nsdfBuffer[i]) / m;\n      m -= input[i] ** 2 + input[input.length - i - 1] ** 2;\n    }\n    // If there are any array values remaining, it means m === 0 for those\n    // values of tau, so we can just set them to 0\n    for (; i < this._nsdfBuffer.length; i++) {\n      this._nsdfBuffer[i] = 0;\n    }\n  }\n}\n\n/**\n * Rounds up the input to the next power of 2.\n *\n * @param {number} v\n * @returns {number} the next power of 2 at least as large as `v`\n */\nfunction ceilPow2(v) {\n  // https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n","/**\n * 音響処理に最適化されたパフォーマンス制御\n * 音質を維持しながらCPU負荷を削減\n */\n\nexport class AdaptiveFrameRateLimiter {\n  private lastFrameTime = 0;\n  private nextFrameTime = 0;\n  private targetFPS: number;\n  private frameInterval: number;\n  private frameDrops = 0;\n  \n  // 音楽用途に適した範囲\n  private readonly MIN_FPS = 30;  // 最低30FPS（33ms以下のレイテンシー）\n  private readonly MAX_FPS = 60;  // 最高60FPS（ブラウザ標準）\n  private readonly OPTIMAL_FPS = 45; // 推奨45FPS（22ms、音楽演奏に適切）\n  \n  constructor(initialFPS = 45) {\n    this.targetFPS = Math.max(this.MIN_FPS, Math.min(initialFPS, this.MAX_FPS));\n    this.frameInterval = 1000 / this.targetFPS;\n  }\n  \n  shouldProcess(): boolean {\n    const now = performance.now();\n    \n    // 初回実行時の初期化\n    if (this.nextFrameTime === 0) {\n      this.nextFrameTime = now + this.frameInterval;\n      this.lastFrameTime = now;\n      return true;\n    }\n    \n    // 次フレーム時刻に到達したかチェック\n    if (now >= this.nextFrameTime) {\n      const actualElapsed = now - this.lastFrameTime;\n      \n      // フレーム落ちを検出（期待間隔の1.5倍を超過）\n      if (actualElapsed > this.frameInterval * 1.5) {\n        this.frameDrops++;\n        this.adjustFrameRate();\n      }\n      \n      // 次フレーム時刻を絶対時刻で設定（累積誤差を回避）\n      this.nextFrameTime = now + this.frameInterval;\n      this.lastFrameTime = now;\n      \n      return true;\n    }\n    \n    return false;\n  }\n  \n  // CPU負荷に応じて動的にFPSを調整\n  private adjustFrameRate(): void {\n    if (this.frameDrops > 5 && this.targetFPS > this.MIN_FPS) {\n      // 負荷が高い場合はFPSを下げる\n      this.targetFPS = Math.max(this.MIN_FPS, this.targetFPS - 5);\n      this.frameInterval = 1000 / this.targetFPS;\n      this.frameDrops = 0;\n      \n      // 次フレーム時刻を新しい間隔で再計算\n      const now = performance.now();\n      this.nextFrameTime = now + this.frameInterval;\n      \n      console.log(`Adjusted FPS to ${this.targetFPS} due to high load`);\n    }\n  }\n  \n  // パフォーマンス回復時にFPSを戻す\n  recoverPerformance(): void {\n    if (this.frameDrops === 0 && this.targetFPS < this.OPTIMAL_FPS) {\n      this.targetFPS = Math.min(this.OPTIMAL_FPS, this.targetFPS + 5);\n      this.frameInterval = 1000 / this.targetFPS;\n      \n      // 次フレーム時刻を新しい間隔で再計算\n      const now = performance.now();\n      this.nextFrameTime = now + this.frameInterval;\n    }\n  }\n  \n  reset(): void {\n    this.lastFrameTime = 0;\n    this.nextFrameTime = 0;\n    this.frameDrops = 0;\n    this.targetFPS = this.OPTIMAL_FPS;\n    this.frameInterval = 1000 / this.targetFPS;\n  }\n  \n  getStats() {\n    return {\n      currentFPS: this.targetFPS,\n      frameDrops: this.frameDrops,\n      latency: this.frameInterval\n    };\n  }\n}\n\n/**\n * 音響処理専用のスロットリング\n * 視覚更新と音声処理を分離\n */\nexport class AudioProcessingThrottle {\n  private visualUpdateThrottle: number;\n  private audioProcessingThrottle: number;\n  \n  constructor() {\n    // 視覚更新は30FPS（33ms）で十分\n    this.visualUpdateThrottle = 33;\n    \n    // 音声処理は高頻度を維持（60FPS相当）\n    this.audioProcessingThrottle = 16;\n  }\n  \n  // UI更新用（メーター、グラフなど）\n  throttleVisual<T extends (...args: any[]) => any>(\n    func: T,\n    customWait?: number\n  ): (...args: Parameters<T>) => void {\n    const wait = customWait || this.visualUpdateThrottle;\n    return throttle(func, wait, { leading: true, trailing: true });\n  }\n  \n  // 音声処理用（ピッチ検出など）\n  throttleAudio<T extends (...args: any[]) => any>(\n    func: T,\n    customWait?: number\n  ): (...args: Parameters<T>) => void {\n    const wait = customWait || this.audioProcessingThrottle;\n    return throttle(func, wait, { leading: true, trailing: false });\n  }\n}\n\n// 既存のthrottle関数を再利用\nfunction throttle<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n  options: { leading?: boolean; trailing?: boolean } = {}\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n  let previous = 0;\n  let lastArgs: Parameters<T> | null = null;\n  \n  const { leading = true, trailing = true } = options;\n  \n  return function throttled(...args: Parameters<T>) {\n    const now = Date.now();\n    \n    if (!previous && !leading) {\n      previous = now;\n    }\n    \n    const remaining = wait - (now - previous);\n    lastArgs = args;\n    \n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      func.apply(null, args);\n      lastArgs = null;\n    } else if (!timeout && trailing) {\n      timeout = setTimeout(() => {\n        previous = leading ? Date.now() : 0;\n        timeout = null;\n        if (lastArgs) {\n          func.apply(null, lastArgs);\n          lastArgs = null;\n        }\n      }, remaining);\n    }\n  };\n}","/**\n * PitchDetector - Framework-agnostic High-precision Pitch Detection Engine\n * \n * @description Provides real-time pitch detection using the McLeod Pitch Method (Pitchy library)\n * with advanced features including harmonic correction, adaptive frame rate control,\n * noise filtering, and device-specific optimization for consistent cross-platform performance.\n * \n * @example\n * ```typescript\n * const pitchDetector = new PitchDetector(audioManager, {\n *   fftSize: 4096,\n *   clarityThreshold: 0.4,\n *   minVolumeAbsolute: 0.003\n * });\n * \n * await pitchDetector.initialize();\n * \n * pitchDetector.setCallbacks({\n *   onPitchUpdate: (result) => {\n *     console.log(`Detected: ${result.note} (${result.frequency.toFixed(1)}Hz)`);\n *   }\n * });\n * \n * pitchDetector.startDetection();\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport { PitchDetector as PitchyDetector } from 'pitchy';\nimport type { \n  PitchDetectorConfig, \n  PitchDetectionResult, \n  PitchCallback,\n  ErrorCallback,\n  StateChangeCallback,\n  DeviceSpecs,\n  SilenceDetectionConfig\n} from '../types';\nimport { AudioManager } from './AudioManager';\nimport { AdaptiveFrameRateLimiter } from '../utils/performance-optimized';\nimport { \n  PitchProError, \n  AudioContextError, \n  PitchDetectionError, \n  isRecoverableError,\n  ErrorMessageBuilder\n} from '../utils/errors';\n\nexport class PitchDetector {\n  /** @private AudioManager instance for resource management */\n  private audioManager: AudioManager;\n  \n  /** @private Pitchy library detector instance for McLeod Pitch Method */\n  private pitchDetector: PitchyDetector<Float32Array> | null = null;\n  \n  /** @private AnalyserNode with noise filtering applied */\n  private analyser: AnalyserNode | null = null;\n  \n  /** @private Raw AnalyserNode for unfiltered volume measurement */\n  private rawAnalyser: AnalyserNode | null = null;\n  \n  /** @private RequestAnimationFrame ID for detection loop */\n  private animationFrame: number | null = null;\n  \n  /** @private Adaptive frame rate controller for optimal performance */\n  private frameRateLimiter: AdaptiveFrameRateLimiter;\n  \n  /** @private Current component state for lifecycle management */\n  private componentState: 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'error' = 'uninitialized';\n  \n  /** @private Initialization completion flag */\n  private isInitialized = false;\n  \n  /** @private Detection active flag */\n  private isDetecting = false;\n  \n  /** @private Last error encountered during operations */\n  private lastError: Error | null = null;\n  \n  /** @private Array of analyser IDs for cleanup management */\n  private analyserIds: string[] = [];\n  \n  /** @private Current processed volume level (0-100) */\n  private currentVolume = 0;\n  \n  /** @private Raw volume level before processing (0-100) */\n  private rawVolume = 0;\n  \n  /** @private Currently detected frequency in Hz */\n  private currentFrequency = 0;\n  \n  /** @private Detected musical note name */\n  private detectedNote = '--';\n  \n  /** @private Detected octave number */\n  private detectedOctave: number | null = null;\n  \n  /** @private Pitch detection clarity/confidence (0-1) */\n  private pitchClarity = 0;\n  \n  /** @private Circular buffer for volume stabilization */\n  private volumeHistory: number[] = [0, 0, 0, 0, 0];\n  \n  /** @private Stabilized volume after filtering */\n  private stableVolume = 0;\n  \n  /** @private Previous frequency for harmonic correction */\n  private previousFrequency = 0;\n  \n  /** @private History buffer for harmonic analysis */\n  private harmonicHistory: Array<{frequency: number, confidence: number, timestamp: number}> = [];\n  \n  /** @private PitchDetector configuration with defaults applied */\n  private config: Required<Omit<PitchDetectorConfig, 'silenceDetection'>> & { \n    silenceDetection?: SilenceDetectionConfig \n  };\n  \n  /** @private Flag to disable harmonic correction */\n  private disableHarmonicCorrection = false;\n  \n  /** @private Callback functions for events */\n  private callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  } = {};\n  \n  /** @private Device-specific optimization parameters */\n  private deviceSpecs: DeviceSpecs | null = null;\n  \n  /** @private Silence detection configuration */\n  private silenceDetectionConfig: SilenceDetectionConfig;\n  \n  /** @private Timestamp when silence started */\n  private silenceStartTime: number | null = null;\n  \n  /** @private Timer ID for silence warning */\n  private silenceWarningTimer: number | null = null;\n  \n  /** @private Timer ID for silence timeout */\n  private silenceTimeoutTimer: number | null = null;\n  \n  /** @private Current silence state flag */\n  private isSilent = false;\n  \n  /** @private Silence warning already issued flag */\n  private hasWarned = false;\n\n  /**\n   * Creates a new PitchDetector instance with optimized configuration\n   * \n   * @param audioManager - AudioManager instance for resource management\n   * @param config - Optional configuration to override defaults\n   * @param config.fftSize - FFT size for frequency analysis (default: 4096)\n   * @param config.smoothing - Smoothing factor for AnalyserNode (default: 0.1)\n   * @param config.clarityThreshold - Minimum clarity for valid detection (default: 0.4)\n   * @param config.minVolumeAbsolute - Minimum volume threshold (default: 0.003)\n   * @param config.silenceDetection - Optional silence detection configuration\n   * \n   * @example\n   * ```typescript\n   * // Basic usage\n   * const pitchDetector = new PitchDetector(audioManager);\n   * \n   * // Custom configuration\n   * const pitchDetector = new PitchDetector(audioManager, {\n   *   fftSize: 8192,\n   *   clarityThreshold: 0.6,\n   *   silenceDetection: {\n   *     enabled: true,\n   *     warningThreshold: 10000\n   *   }\n   * });\n   * ```\n   */\n  constructor(audioManager: AudioManager, config: PitchDetectorConfig = {}) {\n    this.audioManager = audioManager;\n    this.config = {\n      fftSize: 4096,\n      smoothing: 0.1,\n      clarityThreshold: 0.4,    // 0.8から0.4に現実的な値に変更\n      minVolumeAbsolute: 0.003, // 0.01から0.003に現実的な値に変更\n      ...config\n    };\n    \n    // Initialize silence detection configuration\n    this.silenceDetectionConfig = {\n      enabled: false,\n      warningThreshold: 15000,  // 15秒で警告\n      timeoutThreshold: 30000,  // 30秒でタイムアウト\n      minVolumeThreshold: 0.01, // 消音判定の音量閾値\n      ...config.silenceDetection\n    };\n    \n    // Note: getPlatformSpecs() will be called during initialize() to avoid timing issues\n    \n    // Initialize performance optimization\n    this.frameRateLimiter = new AdaptiveFrameRateLimiter(45); // 45FPS optimal for music\n  }\n\n  /**\n   * Sets callback functions for pitch detection events\n   * \n   * @param callbacks - Object containing callback functions\n   * @param callbacks.onPitchUpdate - Called when pitch is detected\n   * @param callbacks.onError - Called when errors occur\n   * @param callbacks.onStateChange - Called when component state changes\n   * \n   * @example\n   * ```typescript\n   * pitchDetector.setCallbacks({\n   *   onPitchUpdate: (result) => {\n   *     console.log(`Pitch: ${result.frequency}Hz, Note: ${result.note}`);\n   *   },\n   *   onError: (error) => {\n   *     console.error('Detection error:', error.message);\n   *   },\n   *   onStateChange: (state) => {\n   *     console.log('State changed to:', state);\n   *   }\n   * });\n   * ```\n   */\n  setCallbacks(callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Initializes the pitch detector with audio resources and Pitchy engine\n   * \n   * @description Sets up audio analysers, creates Pitchy detector instance, and initializes\n   * device-specific configurations. Must be called before starting detection.\n   * \n   * @returns Promise that resolves when initialization is complete\n   * @throws {AudioContextError} If AudioManager initialization fails\n   * @throws {PitchDetectionError} If Pitchy detector creation fails\n   * \n   * @example\n   * ```typescript\n   * try {\n   *   await pitchDetector.initialize();\n   *   console.log('Pitch detector ready');\n   * } catch (error) {\n   *   console.error('Initialization failed:', error);\n   * }\n   * ```\n   */\n  async initialize(): Promise<void> {\n    try {\n      this.componentState = 'initializing';\n      this.lastError = null;\n      \n      console.log('🎙️ [PitchDetector] Starting initialization via AudioManager');\n      \n      // Get shared resources from AudioManager\n      await this.audioManager.initialize();\n      \n      // Initialize device specifications after AudioManager is ready\n      this.deviceSpecs = this.audioManager.getPlatformSpecs();\n      console.log('📱 [PitchDetector] Device specs initialized:', this.deviceSpecs.deviceType);\n      \n      console.log('✅ [PitchDetector] AudioManager resources acquired');\n      \n      // Create dedicated Analyser (with filters)\n      const filteredAnalyserId = `pitch-detector-filtered-${Date.now()}`;\n      this.analyser = this.audioManager.createAnalyser(filteredAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: true\n      });\n      this.analyserIds.push(filteredAnalyserId);\n      \n      // Create raw signal Analyser (for comparison)\n      const rawAnalyserId = `pitch-detector-raw-${Date.now()}`;\n      this.rawAnalyser = this.audioManager.createAnalyser(rawAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: false\n      });\n      this.analyserIds.push(rawAnalyserId);\n      \n      console.log('✅ [PitchDetector] Analysers created:', this.analyserIds);\n      \n      // Initialize PitchDetector\n      this.pitchDetector = PitchyDetector.forFloat32Array(this.analyser.fftSize);\n      \n      // デバッグログ: Pitchyインスタンス確認\n      console.log(`[Debug] Pitchyインスタンス作成: ${!!this.pitchDetector}, FFTサイズ: ${this.analyser.fftSize}`);\n      \n      // Initialization complete\n      this.componentState = 'ready';\n      this.isInitialized = true;\n      \n      // Notify state change\n      this.callbacks.onStateChange?.(this.componentState);\n      \n      console.log('✅ [PitchDetector] Initialization complete');\n      \n    } catch (error) {\n      // Convert to structured error\n      const pitchError = error instanceof PitchProError \n        ? error \n        : new AudioContextError(\n            'PitchDetector initialization failed',\n            {\n              originalError: error instanceof Error ? error.message : String(error),\n              audioContextState: this.audioManager.getStatus().audioContextState,\n              deviceSpecs: this.deviceSpecs\n            }\n          );\n          \n      console.error('❌ [PitchDetector] Initialization error:', pitchError.toJSON());\n      this.componentState = 'error';\n      this.lastError = pitchError;\n      this.isInitialized = false;\n      \n      // Notify with structured error\n      this.callbacks.onError?.(pitchError);\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Starts real-time pitch detection with adaptive frame rate control\n   * \n   * @description Begins the pitch detection loop using requestAnimationFrame.\n   * Automatically manages performance optimization and device-specific adjustments.\n   * \n   * @returns True if detection started successfully, false otherwise\n   * \n   * @example\n   * ```typescript\n   * if (pitchDetector.startDetection()) {\n   *   console.log('Pitch detection started');\n   * } else {\n   *   console.error('Failed to start detection');\n   * }\n   * ```\n   */\n  startDetection(): boolean {\n    if (this.componentState !== 'ready') {\n      const error = new Error(`Cannot start detection: component state is ${this.componentState}`);\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    if (!this.analyser || !this.pitchDetector) {\n      const error = new PitchDetectionError(\n        'ピッチ検出に必要なコンポーネントが初期化されていません。initialize()メソッドを先に呼び出してください。',\n        {\n          operation: 'startDetection',\n          hasAnalyser: !!this.analyser,\n          hasPitchDetector: !!this.pitchDetector,\n          componentState: this.componentState,\n          isInitialized: this.isInitialized\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'Pitch detection startup');\n      this.componentState = 'error';\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    this.componentState = 'detecting';\n    this.isDetecting = true;\n    this.callbacks.onStateChange?.(this.componentState);\n    this.detectPitch();\n    return true;\n  }\n\n  /**\n   * Stops pitch detection and cleans up detection loop\n   * \n   * @description Cancels the detection loop, resets frame rate limiter,\n   * and clears silence detection timers. Safe to call multiple times.\n   * \n   * @example\n   * ```typescript\n   * pitchDetector.stopDetection();\n   * console.log('Pitch detection stopped');\n   * ```\n   */\n  stopDetection(): void {\n    this.isDetecting = false;\n    if (this.animationFrame) {\n      cancelAnimationFrame(this.animationFrame);\n      this.animationFrame = null;\n    }\n    \n    // Reset frame rate limiter\n    this.frameRateLimiter.reset();\n    \n    // Reset silence detection\n    this.resetSilenceTracking();\n    \n    // Return state to ready (if initialized)\n    if (this.componentState === 'detecting' && this.isInitialized) {\n      this.componentState = 'ready';\n      this.callbacks.onStateChange?.(this.componentState);\n    }\n  }\n\n  /**\n   * Real-time pitch detection loop with adaptive frame rate\n   */\n  private detectPitch(): void {\n    // Check if we should process this frame based on adaptive FPS\n    if (!this.frameRateLimiter.shouldProcess()) {\n      // Skip this frame but schedule next\n      this.animationFrame = requestAnimationFrame(() => this.detectPitch());\n      return;\n    }\n    // デバッグログ: detectPitchメソッドの呼び出し確認\n    console.log(`[Debug] detectPitch呼び出し: detecting=${this.isDetecting}, analyser=${!!this.analyser}, rawAnalyser=${!!this.rawAnalyser}, pitchDetector=${!!this.pitchDetector}`);\n    \n    // デバッグ: AudioManagerの状態確認\n    const audioManagerStatus = this.audioManager.getStatus();\n    console.log(`[Debug] AudioManager状態: context=${audioManagerStatus.audioContextState}, stream=${audioManagerStatus.mediaStreamActive}`);\n    \n    if (!this.isDetecting || !this.analyser || !this.rawAnalyser || !this.pitchDetector || !this.deviceSpecs) return;\n    \n    const bufferLength = this.analyser.fftSize;\n    const buffer = new Float32Array(bufferLength);\n    const rawBuffer = new Float32Array(this.rawAnalyser.fftSize);\n    \n    this.analyser.getFloatTimeDomainData(buffer);\n    this.rawAnalyser.getFloatTimeDomainData(rawBuffer);\n    \n    // デバッグ: バッファーの内容を確認（常に出力）\n    const nonZeroCount = buffer.filter(val => Math.abs(val) > 0.0001).length;\n    const maxValue = Math.max(...buffer.map(val => Math.abs(val)));\n    console.log(`[Debug] バッファー分析: 非ゼロ値=${nonZeroCount}/${bufferLength}, 最大値=${maxValue.toFixed(6)}`);\n    \n    // Volume calculation (filtered)\n    let sum = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      sum += Math.abs(buffer[i]);\n    }\n    const rms = Math.sqrt(sum / bufferLength);\n    \n    // デバッグ: RMS計算の詳細（常に出力）\n    console.log(`[Debug] RMS計算: sum=${sum.toFixed(6)}, rms=${rms.toFixed(6)}`);\n    \n    // Platform-specific volume calculation\n    const platformSpecs = this.deviceSpecs;\n    const adjustedRms = rms * platformSpecs.gainCompensation;\n    const volumePercent = Math.max(0, Math.min(100, \n      (adjustedRms * 100) / platformSpecs.divisor * 6 - platformSpecs.noiseThreshold\n    ));\n    \n    // デバッグ: 音量計算の詳細（常に出力）\n    console.log(`[Debug] 音量計算: rms=${rms.toFixed(6)}, adjustedRms=${adjustedRms.toFixed(6)}, volumePercent=${volumePercent.toFixed(2)}%`);\n    console.log(`[Debug] プラットフォーム設定: gain=${platformSpecs.gainCompensation}, divisor=${platformSpecs.divisor}, noise=${platformSpecs.noiseThreshold}`);\n    \n    // Raw volume calculation (pre-filter)\n    let rawSum = 0;\n    for (let i = 0; i < rawBuffer.length; i++) {\n      rawSum += Math.abs(rawBuffer[i]);\n    }\n    const rawRms = Math.sqrt(rawSum / rawBuffer.length);\n    const rawVolumePercent = Math.max(0, Math.min(100, \n      (rawRms * platformSpecs.gainCompensation * 100) / platformSpecs.divisor * 6 - platformSpecs.noiseThreshold\n    ));\n    \n    // Volume stabilization (5-frame moving average)\n    this.volumeHistory.push(volumePercent);\n    if (this.volumeHistory.length > 5) {\n      this.volumeHistory.shift();\n    }\n    this.stableVolume = this.volumeHistory.reduce((sum, v) => sum + v, 0) / this.volumeHistory.length;\n    this.currentVolume = this.stableVolume;\n    this.rawVolume = rawVolumePercent;\n    \n    // Pitch detection (using PitchDetector) with error handling\n    const sampleRate = 44100; // Fixed sample rate for now\n    let pitch = 0;\n    let clarity = 0;\n    \n    try {\n      const result = this.pitchDetector.findPitch(buffer, sampleRate);\n      pitch = result[0] || 0;\n      clarity = result[1] || 0;\n    } catch (error) {\n      // Handle pitch detection errors gracefully\n      const pitchError = new PitchDetectionError(\n        'Pitch detection algorithm failed',\n        {\n          bufferLength: buffer.length,\n          sampleRate,\n          volume: this.currentVolume,\n          originalError: error instanceof Error ? error.message : String(error)\n        }\n      );\n      \n      console.warn('⚠️ [PitchDetector] Pitch detection error (recoverable):', pitchError.toJSON());\n      \n      // For recoverable errors, continue with zero values\n      if (isRecoverableError(pitchError)) {\n        pitch = 0;\n        clarity = 0;\n      } else {\n        // For non-recoverable errors, notify callback\n        this.callbacks.onError?.(pitchError);\n        return;\n      }\n    }\n    \n    // デバッグログ: Pitchyライブラリの結果（常時出力）\n    console.log(`[Debug] Pitchy結果: pitch=${pitch?.toFixed(1) || 'null'}, clarity=${clarity?.toFixed(3) || 'null'}, volume=${this.currentVolume?.toFixed(1)}%, sampleRate=${sampleRate.toString()}`);\n    console.log(`[Debug] Pitchyバッファー: 最初5要素=${Array.from(buffer.slice(0, 5)).map(v => v.toFixed(6)).join(', ')}`);\n    \n    // Human vocal range filtering (practical adjustment)\n    // Optimized for actual human voice range:\n    // - Low range: 65Hz and above (C2 and above, considering male lowest vocal range)  \n    // - High range: 1200Hz and below (practical singing range)\n    // - Exclude extreme low frequency noise (G-1, etc.) reliably\n    const isValidVocalRange = pitch >= 65 && pitch <= 1200;\n    \n    // デバッグログ: 判定条件の詳細\n    console.log(`[Debug] 判定条件: pitch=${!!pitch}, clarity=${clarity?.toFixed(3)}>${this.config.clarityThreshold}, volume=${this.currentVolume?.toFixed(1)}>0.4, range=${isValidVocalRange}`);\n    \n    if (pitch && clarity > this.config.clarityThreshold && this.currentVolume > 0.4 && isValidVocalRange) {\n      let finalFreq = pitch;\n      \n      // Harmonic correction control (for 230Hz stuck issue debugging)\n      if (!this.disableHarmonicCorrection) {\n        // Apply unified harmonic correction system (pass volume information)\n        const normalizedVolume = Math.min(this.currentVolume / 100, 1.0); // Normalize to 0-1\n        finalFreq = this.correctHarmonic(pitch, normalizedVolume);\n      }\n      \n      // Update frequency display\n      this.currentFrequency = Math.round(finalFreq);\n      const noteInfo = this.frequencyToNoteAndOctave(this.currentFrequency);\n      this.detectedNote = noteInfo.note;\n      this.detectedOctave = noteInfo.octave;\n      this.pitchClarity = clarity;\n      \n    } else {\n      // Clear harmonic correction history when signal is weak\n      if (this.currentFrequency === 0) {\n        this.resetHarmonicHistory();\n      }\n      \n      // Clear frequency display\n      this.currentFrequency = 0;\n      this.detectedNote = '--';\n      this.detectedOctave = null;\n      this.pitchClarity = 0;\n    }\n    \n    // Set VolumeBar to 0 when no pitch is detected (counter extreme low frequency noise)\n    const displayVolume = this.currentFrequency > 0 ? this.rawVolume : 0;\n    \n    // Process silence detection\n    this.processSilenceDetection(this.currentVolume);\n    \n    // Send data to callback\n    const result: PitchDetectionResult = {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      octave: this.detectedOctave || undefined,\n      clarity: this.pitchClarity,\n      volume: displayVolume,\n      cents: this.currentFrequency > 0 ? this.frequencyToCents(this.currentFrequency) : undefined\n    };\n    \n    // Separate visual updates from audio processing\n    this.processAudioData(result);\n    this.updateVisuals(result);\n    \n    // Check performance and adjust frame rate if needed\n    const stats = this.frameRateLimiter.getStats();\n    if (stats.frameDrops === 0) {\n      this.frameRateLimiter.recoverPerformance();\n    }\n    \n    this.animationFrame = requestAnimationFrame(() => this.detectPitch());\n  }\n\n  /**\n   * Harmonic correction system\n   */\n  private correctHarmonic(frequency: number, volume: number): number {\n    const now = Date.now();\n    const confidenceThreshold = 0.7;\n    const historyWindow = 1000; // 1 second\n    \n    // Clean old history\n    this.harmonicHistory = this.harmonicHistory.filter(h => now - h.timestamp < historyWindow);\n    \n    // Calculate confidence based on volume and stability\n    const volumeConfidence = Math.min(volume * 1.5, 1.0);\n    const stabilityConfidence = this.previousFrequency > 0 ? \n      Math.max(0, 1 - Math.abs(frequency - this.previousFrequency) / this.previousFrequency) : 0.5;\n    const confidence = (volumeConfidence + stabilityConfidence) / 2;\n    \n    // Add to history\n    this.harmonicHistory.push({ frequency, confidence, timestamp: now });\n    \n    // Check for harmonic patterns\n    if (this.harmonicHistory.length >= 3) {\n      const recentHistory = this.harmonicHistory.slice(-5);\n      const avgFrequency = recentHistory.reduce((sum, h) => sum + h.frequency, 0) / recentHistory.length;\n      const avgConfidence = recentHistory.reduce((sum, h) => sum + h.confidence, 0) / recentHistory.length;\n      \n      // Check for 2x harmonic (octave up error)\n      const halfFrequency = frequency / 2;\n      if (Math.abs(halfFrequency - avgFrequency) / avgFrequency < 0.1 && avgConfidence > confidenceThreshold) {\n        console.log(`🔧 [PitchDetector] Octave correction: ${frequency}Hz → ${halfFrequency}Hz`);\n        this.previousFrequency = halfFrequency;\n        return halfFrequency;\n      }\n      \n      // Check for 1/2x harmonic (octave down error)\n      const doubleFrequency = frequency * 2;\n      if (Math.abs(doubleFrequency - avgFrequency) / avgFrequency < 0.1 && avgConfidence > confidenceThreshold) {\n        console.log(`🔧 [PitchDetector] Octave up correction: ${frequency}Hz → ${doubleFrequency}Hz`);\n        this.previousFrequency = doubleFrequency;\n        return doubleFrequency;\n      }\n    }\n    \n    this.previousFrequency = frequency;\n    return frequency;\n  }\n\n  /**\n   * Reset harmonic correction history\n   */\n  private resetHarmonicHistory(): void {\n    this.harmonicHistory = [];\n    this.previousFrequency = 0;\n  }\n\n  /**\n   * Convert frequency to note name and octave\n   */\n  private frequencyToNoteAndOctave(frequency: number): { note: string; octave: number | null } {\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const A4 = 440;\n    \n    if (frequency <= 0) return { note: '--', octave: null };\n    \n    const semitonesFromA4 = Math.round(12 * Math.log2(frequency / A4));\n    const noteIndex = (semitonesFromA4 + 9 + 120) % 12;\n    const octave = Math.floor((semitonesFromA4 + 9) / 12) + 4;\n    \n    return { note: noteNames[noteIndex], octave };\n  }\n  \n\n  /**\n   * Convert frequency to cents deviation from nearest note\n   */\n  private frequencyToCents(frequency: number): number {\n    const A4 = 440;\n    const semitonesFromA4 = 12 * Math.log2(frequency / A4);\n    const nearestSemitone = Math.round(semitonesFromA4);\n    const centsDeviation = (semitonesFromA4 - nearestSemitone) * 100;\n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Process silence detection logic\n   */\n  private processSilenceDetection(currentVolume: number): void {\n    if (!this.silenceDetectionConfig.enabled) {\n      return;\n    }\n    \n    const now = Date.now();\n    const volumeThreshold = this.silenceDetectionConfig.minVolumeThreshold || 0.01;\n    const isCurrentlySilent = currentVolume < volumeThreshold;\n    \n    if (isCurrentlySilent) {\n      // Start tracking silence if not already doing so\n      if (!this.isSilent) {\n        this.isSilent = true;\n        this.silenceStartTime = now;\n        this.hasWarned = false;\n        \n        console.log('🔇 [PitchDetector] Silence detected, starting timer');\n        \n        // Schedule warning\n        if (this.silenceDetectionConfig.warningThreshold) {\n          this.silenceWarningTimer = window.setTimeout(() => {\n            this.handleSilenceWarning();\n          }, this.silenceDetectionConfig.warningThreshold);\n        }\n        \n        // Schedule timeout\n        if (this.silenceDetectionConfig.timeoutThreshold) {\n          this.silenceTimeoutTimer = window.setTimeout(() => {\n            this.handleSilenceTimeout();\n          }, this.silenceDetectionConfig.timeoutThreshold);\n        }\n      }\n    } else {\n      // Voice detected - reset silence tracking\n      if (this.isSilent) {\n        const silenceDuration = this.silenceStartTime ? now - this.silenceStartTime : 0;\n        console.log(`🔊 [PitchDetector] Voice recovered after ${silenceDuration}ms of silence`);\n        \n        this.resetSilenceTracking();\n        \n        // Notify recovery\n        if (this.silenceDetectionConfig.onSilenceRecovered) {\n          this.silenceDetectionConfig.onSilenceRecovered();\n        }\n      }\n    }\n  }\n  \n  /**\n   * Handle silence warning\n   */\n  private handleSilenceWarning(): void {\n    if (!this.hasWarned && this.silenceStartTime) {\n      const duration = Date.now() - this.silenceStartTime;\n      this.hasWarned = true;\n      \n      console.log(`⚠️ [PitchDetector] Silence warning: ${duration}ms`);\n      \n      if (this.silenceDetectionConfig.onSilenceWarning) {\n        this.silenceDetectionConfig.onSilenceWarning(duration);\n      }\n    }\n  }\n  \n  /**\n   * Handle silence timeout\n   */\n  private handleSilenceTimeout(): void {\n    console.log('⏰ [PitchDetector] Silence timeout reached');\n    \n    if (this.silenceDetectionConfig.onSilenceTimeout) {\n      this.silenceDetectionConfig.onSilenceTimeout();\n    }\n    \n    // Optionally stop detection on timeout\n    this.stopDetection();\n    this.resetSilenceTracking();\n  }\n  \n  /**\n   * Reset silence tracking state\n   */\n  private resetSilenceTracking(): void {\n    this.isSilent = false;\n    this.silenceStartTime = null;\n    this.hasWarned = false;\n    \n    // Clear timers\n    if (this.silenceWarningTimer) {\n      clearTimeout(this.silenceWarningTimer);\n      this.silenceWarningTimer = null;\n    }\n    \n    if (this.silenceTimeoutTimer) {\n      clearTimeout(this.silenceTimeoutTimer);\n      this.silenceTimeoutTimer = null;\n    }\n  }\n\n  /**\n   * Reset display state\n   */\n  resetDisplayState(): void {\n    this.currentVolume = 0;\n    this.rawVolume = 0;\n    this.currentFrequency = 0;\n    this.detectedNote = '--';\n    this.detectedOctave = null;\n    this.pitchClarity = 0;\n    this.stableVolume = 0;\n    \n    // Clear buffers\n    this.volumeHistory = [0, 0, 0, 0, 0];  // Reset with initial zeros\n    \n    // Reset harmonic correction\n    this.resetHarmonicHistory();\n    \n    // Reset silence detection\n    this.resetSilenceTracking();\n    \n    console.log('🔄 [PitchDetector] Display state reset');\n  }\n\n  /**\n   * Enable/disable harmonic correction\n   */\n  setHarmonicCorrectionEnabled(enabled: boolean): void {\n    this.disableHarmonicCorrection = !enabled;\n    if (!enabled) {\n      this.resetHarmonicHistory();\n    }\n  }\n  \n  /**\n   * Update silence detection configuration\n   */\n  setSilenceDetectionConfig(config: Partial<SilenceDetectionConfig>): void {\n    this.silenceDetectionConfig = {\n      ...this.silenceDetectionConfig,\n      ...config\n    };\n    \n    // Reset tracking if disabled\n    if (!this.silenceDetectionConfig.enabled) {\n      this.resetSilenceTracking();\n    }\n    \n    console.log('🔇 [PitchDetector] Silence detection config updated:', this.silenceDetectionConfig);\n  }\n  \n  /**\n   * Get current silence detection status\n   */\n  getSilenceStatus(): {\n    isEnabled: boolean;\n    isSilent: boolean;\n    silenceDuration: number | null;\n    hasWarned: boolean;\n  } {\n    const silenceDuration = this.silenceStartTime && this.isSilent \n      ? Date.now() - this.silenceStartTime \n      : null;\n      \n    return {\n      isEnabled: this.silenceDetectionConfig.enabled || false,\n      isSilent: this.isSilent,\n      silenceDuration,\n      hasWarned: this.hasWarned\n    };\n  }\n\n  /**\n   * Get initialization status\n   */\n  getIsInitialized(): boolean {\n    return this.isInitialized && this.componentState === 'ready';\n  }\n\n  /**\n   * Get current state\n   */\n  getState() {\n    return {\n      componentState: this.componentState,\n      isInitialized: this.isInitialized,\n      isDetecting: this.isDetecting,\n      lastError: this.lastError,\n      hasRequiredComponents: !!(this.analyser && this.pitchDetector)\n    };\n  }\n\n  /**\n   * Get current detection result\n   */\n  getCurrentResult(): PitchDetectionResult {\n    return {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      clarity: this.pitchClarity,\n      volume: this.currentFrequency > 0 ? this.rawVolume : 0\n    };\n  }\n\n  /**\n   * Process audio data (high priority, runs at full speed)\n   */\n  private processAudioData(result: PitchDetectionResult): void {\n    // Critical audio processing that needs low latency\n    // This runs at the full adaptive frame rate (30-60 FPS)\n    \n    // Callback for real-time audio processing\n    this.callbacks.onPitchUpdate?.(result);\n  }\n  \n  /**\n   * Update visual elements (lower priority, can be throttled)\n   */\n  private updateVisuals(_result: PitchDetectionResult): void {\n    // Visual updates can be throttled to 30 FPS\n    // This is handled by the UI layer if needed\n    \n    // The callback can decide to throttle visual updates\n    // For now, we pass through all updates\n    // Note: result parameter prefixed with _ to indicate intentional non-use\n  }\n  \n  /**\n   * Get current performance statistics\n   */\n  getPerformanceStats(): {\n    currentFPS: number;\n    frameDrops: number;\n    latency: number;\n  } {\n    return this.frameRateLimiter.getStats();\n  }\n  \n  /**\n   * Reinitialize detector\n   */\n  async reinitialize(): Promise<void> {\n    console.log('🔄 [PitchDetector] Starting reinitialization');\n    \n    // Cleanup current state\n    this.cleanup();\n    \n    // Short wait to ensure resource release\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    // Execute reinitialization\n    await this.initialize();\n    \n    console.log('✅ [PitchDetector] Reinitialization complete');\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    console.log('🧹 [PitchDetector] Starting cleanup');\n    \n    this.stopDetection();\n    \n    // Notify AudioManager to release created Analysers\n    if (this.analyserIds.length > 0) {\n      this.audioManager.release(this.analyserIds);\n      console.log('📤 [PitchDetector] Notified AudioManager of Analyser release:', this.analyserIds);\n      this.analyserIds = [];\n    }\n    \n    // Reset state\n    this.componentState = 'uninitialized';\n    this.isInitialized = false;\n    this.lastError = null;\n    \n    // Clear references (actual resources managed by AudioManager)\n    this.analyser = null;\n    this.rawAnalyser = null;\n    this.pitchDetector = null;\n    \n    // Clear history\n    this.volumeHistory = [0, 0, 0, 0, 0];  // Reset with initial zeros\n    this.resetHarmonicHistory();\n    \n    console.log('✅ [PitchDetector] Cleanup complete');\n  }\n\n  /**\n   * Gets the latest pitch detection result without triggering new analysis\n   * \n   * @description Returns the most recent detection result from the ongoing analysis.\n   * Useful for UI updates and external monitoring without affecting detection performance.\n   * \n   * @returns Latest pitch detection result or null if no detection is active\n   * \n   * @example\n   * ```typescript\n   * const result = pitchDetector.getLatestResult();\n   * if (result) {\n   *   console.log(`Latest: ${result.note} - ${result.frequency.toFixed(1)}Hz`);\n   *   console.log(`Volume: ${result.volume.toFixed(1)}%, Clarity: ${result.clarity.toFixed(2)}`);\n   * }\n   * ```\n   */\n  getLatestResult(): PitchDetectionResult | null {\n    if (!this.isDetecting || this.componentState !== 'detecting') {\n      return null;\n    }\n\n    return {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      octave: this.detectedOctave ?? 0,\n      volume: this.currentVolume,\n      rawVolume: this.rawVolume,\n      clarity: this.pitchClarity,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Destroys the PitchDetector and cleans up all resources\n   * \n   * @example\n   * ```typescript\n   * pitchDetector.destroy();\n   * console.log('PitchDetector destroyed and resources cleaned up');\n   * ```\n   */\n  destroy(): void {\n    this.stopDetection();\n    \n    // Notify AudioManager to release created Analysers\n    if (this.analyserIds.length > 0) {\n      this.audioManager.release(this.analyserIds);\n      console.log('📤 [PitchDetector] Notified AudioManager of Analyser release:', this.analyserIds);\n      this.analyserIds = [];\n    }\n    \n    // Reset state\n    this.componentState = 'uninitialized';\n    this.isInitialized = false;\n    this.lastError = null;\n    \n    // Clear references (actual resources managed by AudioManager)\n    this.analyser = null;\n  }\n\n  /**\n   * Gets current PitchDetector status for debugging and monitoring\n   * \n   * @returns Status object with component state and performance metrics\n   */\n  getStatus() {\n    return {\n      componentState: this.componentState,\n      isInitialized: this.isInitialized,\n      isDetecting: this.isDetecting,\n      isRunning: this.isDetecting,\n      currentVolume: this.currentVolume,\n      rawVolume: this.rawVolume,\n      currentFrequency: this.currentFrequency,\n      detectedNote: this.detectedNote,\n      detectedOctave: this.detectedOctave,\n      currentClarity: this.pitchClarity,\n      lastError: this.lastError,\n      frameRateStatus: this.frameRateLimiter?.getStats(),\n      deviceSpecs: this.deviceSpecs,\n      hasRequiredComponents: !!(this.analyser && this.pitchDetector)\n    };\n  }\n}","/**\n * NoiseFilter - Advanced 3-Stage Noise Reduction Filter Chain\n * \n * @description Implements sophisticated cascade filtering optimized for voice detection\n * and pitch analysis. Removes environmental noise while preserving vocal frequencies\n * essential for accurate pitch detection.\n * \n * **Filter Stages:**\n * 1. **Highpass Filter** (80Hz) - Removes low-frequency environmental noise, breathing sounds\n * 2. **Lowpass Filter** (800Hz) - Removes high-frequency noise while preserving vocal harmonics  \n * 3. **Notch Filter** (60Hz) - Eliminates electrical power line interference\n * \n * @example\n * ```typescript\n * const noiseFilter = new NoiseFilter(audioContext, {\n *   highpassFreq: 100,  // More aggressive low-cut\n *   lowpassFreq: 1000,  // Extended high-frequency range\n *   useFilters: true\n * });\n * \n * // Connect in audio chain\n * sourceNode.connect(noiseFilter.connect(inputNode, analyserNode));\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { NoiseFilterConfig } from '../types';\nimport { \n  AudioContextError,\n  PitchProError,\n  ErrorCode,\n  ErrorMessageBuilder\n} from '../utils/errors';\n\nexport class NoiseFilter {\n  /** @private AudioContext for creating filter nodes */\n  private audioContext: AudioContext;\n  \n  /** @private Complete filter configuration with defaults applied */\n  private config: Required<NoiseFilterConfig>;\n  \n  /** @private Highpass filter node for low-frequency noise removal */\n  private highpassFilter: BiquadFilterNode | null = null;\n  \n  /** @private Lowpass filter node for high-frequency noise removal */\n  private lowpassFilter: BiquadFilterNode | null = null;\n  \n  /** @private Notch filter node for power line noise elimination */\n  private notchFilter: BiquadFilterNode | null = null;\n  \n  /** @private Filter chain connection state */\n  private isConnected = false;\n  \n  /** @private Input node reference for disconnection */\n  private inputNode: AudioNode | null = null;\n  \n  /** @private Output node reference for disconnection */\n  private outputNode: AudioNode | null = null;\n\n  /**\n   * Creates a new NoiseFilter with configurable 3-stage filtering\n   * \n   * @param audioContext - Web Audio API AudioContext instance\n   * @param config - Optional filter configuration to override defaults\n   * @param config.highpassFreq - Highpass cutoff frequency in Hz (default: 80)\n   * @param config.lowpassFreq - Lowpass cutoff frequency in Hz (default: 800)  \n   * @param config.notchFreq - Notch filter center frequency in Hz (default: 60)\n   * @param config.highpassQ - Highpass filter Q factor (default: 0.7)\n   * @param config.lowpassQ - Lowpass filter Q factor (default: 0.7)\n   * @param config.notchQ - Notch filter Q factor (default: 10.0)\n   * @param config.useFilters - Enable/disable entire filter chain (default: true)\n   * \n   * @example\n   * ```typescript\n   * // Standard voice filtering\n   * const voiceFilter = new NoiseFilter(audioContext);\n   * \n   * // Custom instrument filtering  \n   * const instrumentFilter = new NoiseFilter(audioContext, {\n   *   highpassFreq: 60,   // Allow deeper frequencies\n   *   lowpassFreq: 2000,  // Extended harmonic range\n   *   notchQ: 20.0        // Sharper power line rejection\n   * });\n   * \n   * // Bypass filtering\n   * const bypassFilter = new NoiseFilter(audioContext, {\n   *   useFilters: false\n   * });\n   * ```\n   */\n  constructor(audioContext: AudioContext, config: NoiseFilterConfig = {}) {\n    this.audioContext = audioContext;\n    this.config = {\n      highpassFreq: 80,\n      lowpassFreq: 800,\n      notchFreq: 60,\n      highpassQ: 0.7,\n      lowpassQ: 0.7,\n      notchQ: 10.0,\n      useFilters: true,\n      ...config\n    };\n    \n    this.createFilterChain();\n  }\n\n  /**\n   * Create the 3-stage filter chain\n   */\n  private createFilterChain(): void {\n    if (!this.config.useFilters) {\n      console.log('🔇 [NoiseFilter] Filters disabled - bypassing filter chain');\n      return;\n    }\n\n    try {\n      // 1. Highpass filter (remove low frequency noise: cut below 80Hz)\n      this.highpassFilter = this.audioContext.createBiquadFilter();\n      this.highpassFilter.type = 'highpass';\n      this.highpassFilter.frequency.setValueAtTime(this.config.highpassFreq, this.audioContext.currentTime);\n      this.highpassFilter.Q.setValueAtTime(this.config.highpassQ, this.audioContext.currentTime);\n\n      // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n      this.lowpassFilter = this.audioContext.createBiquadFilter();\n      this.lowpassFilter.type = 'lowpass';\n      this.lowpassFilter.frequency.setValueAtTime(this.config.lowpassFreq, this.audioContext.currentTime);\n      this.lowpassFilter.Q.setValueAtTime(this.config.lowpassQ, this.audioContext.currentTime);\n\n      // 3. Notch filter (remove power line noise: 60Hz)\n      this.notchFilter = this.audioContext.createBiquadFilter();\n      this.notchFilter.type = 'notch';\n      this.notchFilter.frequency.setValueAtTime(this.config.notchFreq, this.audioContext.currentTime);\n      this.notchFilter.Q.setValueAtTime(this.config.notchQ, this.audioContext.currentTime);\n\n      console.log('✅ [NoiseFilter] 3-stage filter chain created', {\n        highpass: `${this.config.highpassFreq}Hz (Q=${this.config.highpassQ})`,\n        lowpass: `${this.config.lowpassFreq}Hz (Q=${this.config.lowpassQ})`,\n        notch: `${this.config.notchFreq}Hz (Q=${this.config.notchQ})`\n      });\n\n    } catch (error) {\n      const structuredError = new AudioContextError(\n        'ノイズフィルターチェーンの初期化に失敗しました。オーディオシステムのサポート状況を確認してください。',\n        {\n          operation: 'createFilterChain',\n          originalError: (error as Error).message,\n          filterConfig: this.config,\n          audioContextState: this.audioContext.state,\n          sampleRate: this.audioContext.sampleRate\n        }\n      );\n      \n      ErrorMessageBuilder.logError(structuredError, 'NoiseFilter initialization');\n      console.error('❌ [NoiseFilter] Failed to create filter chain:', structuredError.toJSON());\n      throw structuredError;\n    }\n  }\n\n  /**\n   * Connects the filter chain between input and output nodes in audio processing pipeline\n   * \n   * @description Creates audio connections through the 3-stage filter chain or bypasses\n   * if filtering is disabled. Handles both inline filtering and return-node patterns.\n   * \n   * @param inputNode - Source audio node (e.g., MediaStreamAudioSourceNode)\n   * @param outputNode - Optional destination node (e.g., AnalyserNode)\n   * @returns The final output node in the chain for further connections\n   * \n   * @example\n   * ```typescript\n   * // Direct connection pattern\n   * sourceNode.connect(noiseFilter.connect(inputNode, analyserNode));\n   * \n   * // Chain connection pattern\n   * const filteredNode = noiseFilter.connect(sourceNode);\n   * filteredNode.connect(analyserNode);\n   * \n   * // Bypass mode (useFilters: false)\n   * const passthroughNode = noiseFilter.connect(sourceNode, analyserNode);\n   * ```\n   */\n  connect(inputNode: AudioNode, outputNode?: AudioNode): AudioNode {\n    if (!this.config.useFilters) {\n      // Bypass filtering - direct connection\n      if (outputNode) {\n        inputNode.connect(outputNode);\n      }\n      return inputNode;\n    }\n\n    if (!this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      const error = new PitchProError(\n        'ノイズフィルターが正しく初期化されていません。コンストラクタでuseFilters: trueで初期化してください。',\n        ErrorCode.AUDIO_CONTEXT_ERROR,\n        {\n          operation: 'connect',\n          useFilters: this.config.useFilters,\n          hasHighpassFilter: !!this.highpassFilter,\n          hasLowpassFilter: !!this.lowpassFilter,\n          hasNotchFilter: !!this.notchFilter\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'NoiseFilter connection');\n      throw error;\n    }\n\n    try {\n      // Disconnect any existing connections\n      this.disconnect();\n\n      // Store references\n      this.inputNode = inputNode;\n      this.outputNode = outputNode || null;\n\n      // Create filter chain: input → highpass → lowpass → notch → output\n      inputNode.connect(this.highpassFilter);\n      this.highpassFilter.connect(this.lowpassFilter);\n      this.lowpassFilter.connect(this.notchFilter);\n      \n      if (outputNode) {\n        this.notchFilter.connect(outputNode);\n      }\n\n      this.isConnected = true;\n\n      console.log('🔗 [NoiseFilter] Filter chain connected');\n      \n      // Return the final node in the chain (notch filter) for further connections\n      return this.notchFilter!;\n\n    } catch (error) {\n      const connectionError = new AudioContextError(\n        'ノイズフィルターの接続に失敗しました。オーディオノードの接続状態を確認してください。',\n        {\n          operation: 'connect',\n          originalError: (error as Error).message,\n          hasInputNode: !!this.inputNode,\n          hasOutputNode: !!this.outputNode,\n          isConnected: this.isConnected,\n          filterConfig: this.config\n        }\n      );\n      \n      ErrorMessageBuilder.logError(connectionError, 'NoiseFilter audio connection');\n      console.error('❌ [NoiseFilter] Connection failed:', connectionError.toJSON());\n      throw connectionError;\n    }\n  }\n\n  /**\n   * Disconnects all filter nodes and cleans up audio connections\n   * \n   * @description Safely disconnects all filter nodes in the chain and resets\n   * connection state. Safe to call multiple times.\n   * \n   * @example\n   * ```typescript\n   * // Clean up when finished\n   * noiseFilter.disconnect();\n   * console.log('Filter chain disconnected');\n   * ```\n   */\n  disconnect(): void {\n    try {\n      if (this.highpassFilter) {\n        this.highpassFilter.disconnect();\n      }\n      if (this.lowpassFilter) {\n        this.lowpassFilter.disconnect();\n      }\n      if (this.notchFilter) {\n        this.notchFilter.disconnect();\n      }\n      \n      this.isConnected = false;\n      this.inputNode = null;\n      this.outputNode = null;\n\n      console.log('🔌 [NoiseFilter] Filter chain disconnected');\n\n    } catch (error) {\n      console.warn('⚠️ [NoiseFilter] Disconnect warning:', error);\n    }\n  }\n\n  /**\n   * Updates filter parameters dynamically during runtime\n   * \n   * @param params - Object containing new filter parameters\n   * @param params.highpassFreq - New highpass cutoff frequency in Hz\n   * @param params.lowpassFreq - New lowpass cutoff frequency in Hz\n   * @param params.notchFreq - New notch filter center frequency in Hz\n   * @param params.highpassQ - New highpass filter Q factor\n   * @param params.lowpassQ - New lowpass filter Q factor  \n   * @param params.notchQ - New notch filter Q factor\n   * \n   * @example\n   * ```typescript\n   * // Adapt filtering for different content\n   * noiseFilter.updateFrequencies({\n   *   highpassFreq: 100,  // More aggressive low-cut\n   *   lowpassFreq: 1200   // Extended high-frequency range\n   * });\n   * \n   * // Adjust power line rejection\n   * noiseFilter.updateFrequencies({\n   *   notchFreq: 50,      // 50Hz power line (Europe)\n   *   notchQ: 15.0        // Sharper notch\n   * });\n   * ```\n   */\n  updateFrequencies(params: {\n    highpassFreq?: number;\n    lowpassFreq?: number;\n    notchFreq?: number;\n    highpassQ?: number;\n    lowpassQ?: number;\n    notchQ?: number;\n  }): void {\n    const currentTime = this.audioContext.currentTime;\n\n    try {\n      if (params.highpassFreq !== undefined && this.highpassFilter) {\n        this.highpassFilter.frequency.setValueAtTime(params.highpassFreq, currentTime);\n        this.config.highpassFreq = params.highpassFreq;\n      }\n\n      if (params.lowpassFreq !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.frequency.setValueAtTime(params.lowpassFreq, currentTime);\n        this.config.lowpassFreq = params.lowpassFreq;\n      }\n\n      if (params.notchFreq !== undefined && this.notchFilter) {\n        this.notchFilter.frequency.setValueAtTime(params.notchFreq, currentTime);\n        this.config.notchFreq = params.notchFreq;\n      }\n\n      if (params.highpassQ !== undefined && this.highpassFilter) {\n        this.highpassFilter.Q.setValueAtTime(params.highpassQ, currentTime);\n        this.config.highpassQ = params.highpassQ;\n      }\n\n      if (params.lowpassQ !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.Q.setValueAtTime(params.lowpassQ, currentTime);\n        this.config.lowpassQ = params.lowpassQ;\n      }\n\n      if (params.notchQ !== undefined && this.notchFilter) {\n        this.notchFilter.Q.setValueAtTime(params.notchQ, currentTime);\n        this.config.notchQ = params.notchQ;\n      }\n\n      console.log('🔧 [NoiseFilter] Filter parameters updated:', params);\n\n    } catch (error) {\n      const updateError = new PitchProError(\n        'フィルターパラメータの更新に失敗しました。指定した値が範囲外であるか、フィルターが無効になっている可能性があります。',\n        ErrorCode.INVALID_SAMPLE_RATE,\n        {\n          operation: 'updateFrequencies',\n          originalError: (error as Error).message,\n          requestedParams: params,\n          currentConfig: this.config,\n          audioContextTime: this.audioContext.currentTime\n        }\n      );\n      \n      ErrorMessageBuilder.logError(updateError, 'NoiseFilter parameter update');\n      console.error('❌ [NoiseFilter] Parameter update failed:', updateError.toJSON());\n      throw updateError;\n    }\n  }\n\n  /**\n   * Enable or disable the entire filter chain\n   */\n  setEnabled(enabled: boolean): void {\n    if (enabled === this.config.useFilters) {\n      return; // No change needed\n    }\n\n    this.config.useFilters = enabled;\n\n    if (this.isConnected && this.inputNode) {\n      // Reconnect with new settings\n      const savedOutputNode = this.outputNode;\n      this.disconnect();\n      \n      if (enabled) {\n        // Recreate filters if they were destroyed\n        if (!this.highpassFilter) {\n          this.createFilterChain();\n        }\n      }\n      \n      this.connect(this.inputNode, savedOutputNode || undefined);\n    }\n\n    console.log(`🔘 [NoiseFilter] Filters ${enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  /**\n   * Get filter response at specific frequency (for visualization)\n   */\n  getFilterResponse(frequency: number): { magnitude: number; phase: number } {\n    if (!this.config.useFilters || !this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n\n    try {\n      // Create frequency array for single frequency\n      const frequencyArray = new Float32Array([frequency]);\n      const magnitudeArray = new Float32Array(1);\n      const phaseArray = new Float32Array(1);\n\n      // Calculate combined response (simplified - in practice you'd need to chain the calculations)\n      this.highpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const highpassMagnitude = magnitudeArray[0];\n      \n      this.lowpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const lowpassMagnitude = magnitudeArray[0];\n      \n      this.notchFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const notchMagnitude = magnitudeArray[0];\n\n      // Combined magnitude (multiply individual filter responses)\n      const combinedMagnitude = highpassMagnitude * lowpassMagnitude * notchMagnitude;\n      \n      return { \n        magnitude: combinedMagnitude, \n        phase: phaseArray[0] \n      };\n\n    } catch (error) {\n      const responseError = new PitchProError(\n        'フィルター応答の計算に失敗しました。デフォルト値を返します。',\n        ErrorCode.PROCESSING_TIMEOUT,\n        {\n          operation: 'getFilterResponse',\n          frequency,\n          originalError: (error as Error).message,\n          useFilters: this.config.useFilters\n        }\n      );\n      \n      ErrorMessageBuilder.logError(responseError, 'Filter response calculation');\n      console.warn('⚠️ [NoiseFilter] Filter response calculation failed:', responseError.toJSON());\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n  }\n\n  /**\n   * Get current filter configuration\n   */\n  getConfig(): Required<NoiseFilterConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Get filter chain status\n   */\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      useFilters: this.config.useFilters,\n      hasFilters: !!(this.highpassFilter && this.lowpassFilter && this.notchFilter),\n      filterTypes: this.config.useFilters ? ['highpass', 'lowpass', 'notch'] : [],\n      frequencies: {\n        highpass: this.config.highpassFreq,\n        lowpass: this.config.lowpassFreq,\n        notch: this.config.notchFreq\n      },\n      qFactors: {\n        highpass: this.config.highpassQ,\n        lowpass: this.config.lowpassQ,\n        notch: this.config.notchQ\n      }\n    };\n  }\n\n  /**\n   * Get the final output node (for chaining)\n   */\n  getOutputNode(): AudioNode | null {\n    if (!this.config.useFilters || !this.notchFilter) {\n      return this.inputNode || null; // Bypass mode\n    }\n    return this.notchFilter;\n  }\n\n  /**\n   * Cleanup and destroy filter nodes\n   */\n  destroy(): void {\n    console.log('🗑️ [NoiseFilter] Destroying filter chain');\n    \n    this.disconnect();\n    \n    // Note: Filter nodes are automatically garbage collected\n    // when disconnected and no longer referenced\n    this.highpassFilter = null;\n    this.lowpassFilter = null;\n    this.notchFilter = null;\n    \n    console.log('✅ [NoiseFilter] Cleanup complete');\n  }\n\n  /**\n   * Create a preset configuration for different scenarios\n   */\n  static getPresetConfig(preset: 'voice' | 'instrument' | 'wide' | 'minimal'): NoiseFilterConfig {\n    switch (preset) {\n      case 'voice':\n        return {\n          highpassFreq: 80,   // Remove breath noise\n          lowpassFreq: 800,   // Focus on vocal fundamentals\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.7,\n          lowpassQ: 0.7,\n          notchQ: 10.0,\n          useFilters: true\n        };\n        \n      case 'instrument':\n        return {\n          highpassFreq: 40,   // Preserve low fundamentals\n          lowpassFreq: 2000,  // Allow more harmonics\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.5,\n          lowpassQ: 0.5,\n          notchQ: 8.0,\n          useFilters: true\n        };\n        \n      case 'wide':\n        return {\n          highpassFreq: 20,   // Minimal low cut\n          lowpassFreq: 5000,  // Minimal high cut\n          notchFreq: 60,      // Only power line filtering\n          highpassQ: 0.3,\n          lowpassQ: 0.3,\n          notchQ: 5.0,\n          useFilters: true\n        };\n        \n      case 'minimal':\n        return {\n          highpassFreq: 60,   // Just power line region\n          lowpassFreq: 8000,  // Very high cutoff\n          notchFreq: 60,      // Power line only\n          highpassQ: 0.1,\n          lowpassQ: 0.1,\n          notchQ: 3.0,\n          useFilters: true\n        };\n        \n      default:\n        return {\n          useFilters: false\n        };\n    }\n  }\n}","/**\n * MicrophoneLifecycleManager - Page transition and idle detection microphone control\n * \n * Manages microphone lifecycle across page transitions, idle periods, and redirects\n * Implements reference counting for safe resource management\n * Handles SSR compatibility and automatic recovery\n */\n\nimport type { \n  MediaStreamResources, \n  HealthStatus,\n  LifecycleEvents,\n  StateChangeCallback,\n  ErrorCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\n\nexport class MicrophoneLifecycleManager {\n  private audioManager: AudioManager;\n  private refCount = 0;\n  private isActive = false;\n  private lastHealthCheck: HealthStatus | null = null;\n  \n  // Monitoring intervals\n  private healthCheckInterval: number | null = null;\n  private idleCheckInterval: number | null = null;\n  private visibilityCheckInterval: number | null = null;\n  \n  // State tracking\n  private lastActivityTime = Date.now();\n  private isPageVisible = true;\n  private isUserActive = true;\n  private autoRecoveryAttempts = 0;\n  private maxAutoRecoveryAttempts = 3;\n  \n  // Event listeners storage for cleanup\n  private eventListeners = new Map<string, EventListener>();\n  \n  // Configuration\n  private config = {\n    healthCheckIntervalMs: 5000,     // 5 seconds\n    idleTimeoutMs: 300000,           // 5 minutes\n    autoRecoveryDelayMs: 2000,       // 2 seconds\n    maxIdleTimeBeforeRelease: 600000 // 10 minutes\n  };\n  \n  // Callbacks\n  private callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  } = {};\n\n  constructor(audioManager: AudioManager, config: Partial<typeof MicrophoneLifecycleManager.prototype.config> = {}) {\n    this.audioManager = audioManager;\n    this.config = { ...this.config, ...config };\n    \n    // SSR compatibility check\n    if (typeof window === 'undefined') {\n      console.log('🔇 [MicrophoneLifecycleManager] SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.setupEventListeners();\n  }\n\n  /**\n   * Set callback functions\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Acquire microphone resources (with reference counting)\n   */\n  async acquire(): Promise<MediaStreamResources> {\n    this.refCount++;\n    \n    console.log(`🎤 [MicrophoneLifecycleManager] Acquiring resources (refCount: ${this.refCount})`);\n    \n    try {\n      // Initialize AudioManager if not already active\n      if (!this.isActive) {\n        const resources = await this.audioManager.initialize();\n        this.isActive = true;\n        this.lastActivityTime = Date.now();\n        this.autoRecoveryAttempts = 0;\n        \n        // Start monitoring\n        this.startHealthMonitoring();\n        this.startIdleMonitoring();\n        this.startVisibilityMonitoring();\n        \n        this.callbacks.onStateChange?.('active');\n        \n        console.log('🟢 [MicrophoneLifecycleManager] Microphone activated');\n        return resources;\n      }\n      \n      // Already active - just update activity and return existing resources\n      this.updateActivity();\n      const resources = await this.audioManager.initialize();\n      return resources;\n      \n    } catch (error) {\n      console.error('❌ [MicrophoneLifecycleManager] Failed to acquire resources:', error);\n      this.refCount = Math.max(0, this.refCount - 1);\n      this.callbacks.onError?.(error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Release microphone resources (with reference counting)\n   */\n  release(): void {\n    this.refCount = Math.max(0, this.refCount - 1);\n    \n    console.log(`📉 [MicrophoneLifecycleManager] Releasing resources (refCount: ${this.refCount})`);\n    \n    // Only stop monitoring and cleanup when no references remain\n    if (this.refCount <= 0) {\n      this.stopAllMonitoring();\n      this.audioManager.release();\n      this.isActive = false;\n      \n      this.callbacks.onStateChange?.('inactive');\n      \n      console.log('🔴 [MicrophoneLifecycleManager] Microphone deactivated');\n    }\n  }\n\n  /**\n   * Force release all resources (emergency cleanup)\n   */\n  forceRelease(): void {\n    console.log('🚨 [MicrophoneLifecycleManager] Force release - cleaning up all resources');\n    \n    this.refCount = 0;\n    this.stopAllMonitoring();\n    this.audioManager.forceCleanup();\n    this.isActive = false;\n    \n    this.callbacks.onStateChange?.('inactive');\n  }\n\n  /**\n   * Setup page lifecycle event listeners\n   */\n  private setupEventListeners(): void {\n    // Page visibility change\n    const visibilityChangeHandler = () => {\n      this.isPageVisible = !document.hidden;\n      this.handleVisibilityChange();\n    };\n    \n    // User activity tracking\n    const activityHandler = () => {\n      this.updateActivity();\n    };\n    \n    // Page unload / beforeunload\n    const unloadHandler = () => {\n      this.forceRelease();\n    };\n    \n    // Page focus / blur\n    const focusHandler = () => {\n      this.isPageVisible = true;\n      this.handleVisibilityChange();\n    };\n    \n    const blurHandler = () => {\n      this.isPageVisible = false;\n      this.handleVisibilityChange();\n    };\n    \n    // Add event listeners\n    document.addEventListener('visibilitychange', visibilityChangeHandler);\n    document.addEventListener('mousemove', activityHandler);\n    document.addEventListener('keydown', activityHandler);\n    document.addEventListener('click', activityHandler);\n    document.addEventListener('scroll', activityHandler);\n    document.addEventListener('touchstart', activityHandler);\n    window.addEventListener('beforeunload', unloadHandler);\n    window.addEventListener('unload', unloadHandler);\n    window.addEventListener('focus', focusHandler);\n    window.addEventListener('blur', blurHandler);\n    \n    // Store references for cleanup\n    this.eventListeners.set('visibilitychange', visibilityChangeHandler);\n    this.eventListeners.set('mousemove', activityHandler);\n    this.eventListeners.set('keydown', activityHandler);\n    this.eventListeners.set('click', activityHandler);\n    this.eventListeners.set('scroll', activityHandler);\n    this.eventListeners.set('touchstart', activityHandler);\n    this.eventListeners.set('beforeunload', unloadHandler);\n    this.eventListeners.set('unload', unloadHandler);\n    this.eventListeners.set('focus', focusHandler);\n    this.eventListeners.set('blur', blurHandler);\n    \n    console.log('👂 [MicrophoneLifecycleManager] Event listeners setup complete');\n  }\n\n  /**\n   * Handle page visibility changes\n   */\n  private handleVisibilityChange(): void {\n    if (!this.isActive) return;\n    \n    if (this.isPageVisible) {\n      console.log('👁️ [MicrophoneLifecycleManager] Page became visible - resuming monitoring');\n      this.updateActivity();\n      \n      // Check microphone health after page becomes visible\n      setTimeout(() => {\n        this.performHealthCheck();\n      }, 1000);\n      \n    } else {\n      console.log('🙈 [MicrophoneLifecycleManager] Page became hidden - reducing monitoring frequency');\n      \n      // Consider releasing resources if page stays hidden for too long\n      setTimeout(() => {\n        if (!this.isPageVisible && this.isActive) {\n          const timeSinceActivity = Date.now() - this.lastActivityTime;\n          if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n            console.log('⏰ [MicrophoneLifecycleManager] Long inactivity detected - releasing resources');\n            this.forceRelease();\n          }\n        }\n      }, this.config.maxIdleTimeBeforeRelease);\n    }\n  }\n\n  /**\n   * Update user activity timestamp\n   */\n  private updateActivity(): void {\n    this.lastActivityTime = Date.now();\n    this.isUserActive = true;\n  }\n\n  /**\n   * Start health monitoring\n   */\n  private startHealthMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n    \n    this.healthCheckInterval = window.setInterval(() => {\n      this.performHealthCheck();\n    }, this.config.healthCheckIntervalMs);\n    \n    console.log(`💓 [MicrophoneLifecycleManager] Health monitoring started (${this.config.healthCheckIntervalMs}ms interval)`);\n  }\n\n  /**\n   * Start idle monitoring\n   */\n  private startIdleMonitoring(): void {\n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n    }\n    \n    this.idleCheckInterval = window.setInterval(() => {\n      this.checkIdleTimeout();\n    }, 30000); // Check every 30 seconds\n    \n    console.log('😴 [MicrophoneLifecycleManager] Idle monitoring started');\n  }\n\n  /**\n   * Start visibility monitoring\n   */\n  private startVisibilityMonitoring(): void {\n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n    }\n    \n    this.visibilityCheckInterval = window.setInterval(() => {\n      // Additional visibility-based health checks\n      if (this.isPageVisible && this.isActive) {\n        this.performHealthCheck();\n      }\n    }, 10000); // Check every 10 seconds when visible\n    \n    console.log('👁️ [MicrophoneLifecycleManager] Visibility monitoring started');\n  }\n\n  /**\n   * Perform comprehensive health check\n   */\n  private async performHealthCheck(): Promise<void> {\n    if (!this.isActive) return;\n    \n    try {\n      const healthStatus = this.audioManager.checkMediaStreamHealth();\n      this.lastHealthCheck = healthStatus;\n      \n      if (!healthStatus.healthy) {\n        console.warn('⚠️ [MicrophoneLifecycleManager] Unhealthy microphone state detected:', healthStatus);\n        \n        // Attempt automatic recovery\n        if (this.autoRecoveryAttempts < this.maxAutoRecoveryAttempts) {\n          this.autoRecoveryAttempts++;\n          \n          console.log(`🔧 [MicrophoneLifecycleManager] Attempting automatic recovery (${this.autoRecoveryAttempts}/${this.maxAutoRecoveryAttempts})`);\n          \n          setTimeout(async () => {\n            try {\n              await this.audioManager.initialize(); // This will trigger re-initialization if needed\n              console.log('✅ [MicrophoneLifecycleManager] Automatic recovery successful');\n              \n              // Dispatch success event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoverySuccess', {});\n              \n            } catch (error) {\n              console.error('❌ [MicrophoneLifecycleManager] Automatic recovery failed:', error);\n              this.callbacks.onError?.(error as Error);\n              \n              // Dispatch failure event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoveryFailed', { error });\n            }\n          }, this.config.autoRecoveryDelayMs);\n          \n        } else {\n          console.error('❌ [MicrophoneLifecycleManager] Maximum recovery attempts reached - manual intervention required');\n          this.callbacks.onError?.(new Error('Microphone health check failed - maximum recovery attempts exceeded'));\n        }\n      }\n      \n    } catch (error) {\n      console.error('❌ [MicrophoneLifecycleManager] Health check failed:', error);\n      this.callbacks.onError?.(error as Error);\n    }\n  }\n\n  /**\n   * Check for idle timeout\n   */\n  private checkIdleTimeout(): void {\n    if (!this.isActive) return;\n    \n    const timeSinceActivity = Date.now() - this.lastActivityTime;\n    const isIdle = timeSinceActivity > this.config.idleTimeoutMs;\n    \n    if (isIdle && this.isUserActive) {\n      console.log('😴 [MicrophoneLifecycleManager] User idle detected');\n      this.isUserActive = false;\n      \n      // Optionally reduce monitoring frequency during idle\n      // But don't automatically release - let the application decide\n    }\n    \n    // Check for extreme idle (auto-release)\n    if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n      console.log('⏰ [MicrophoneLifecycleManager] Extreme idle detected - auto-releasing resources');\n      this.forceRelease();\n    }\n  }\n\n  /**\n   * Stop all monitoring intervals\n   */\n  private stopAllMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n    }\n    \n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n      this.idleCheckInterval = null;\n    }\n    \n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n      this.visibilityCheckInterval = null;\n    }\n    \n    console.log('⏹️ [MicrophoneLifecycleManager] All monitoring stopped');\n  }\n\n  /**\n   * Dispatch custom event\n   */\n  private dispatchCustomEvent(eventName: keyof LifecycleEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Get current status\n   */\n  getStatus() {\n    return {\n      refCount: this.refCount,\n      isActive: this.isActive,\n      isPageVisible: this.isPageVisible,\n      isUserActive: this.isUserActive,\n      lastActivityTime: this.lastActivityTime,\n      timeSinceActivity: Date.now() - this.lastActivityTime,\n      autoRecoveryAttempts: this.autoRecoveryAttempts,\n      lastHealthCheck: this.lastHealthCheck,\n      audioManagerStatus: this.audioManager.getStatus()\n    };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Restart monitoring with new intervals if active\n    if (this.isActive) {\n      this.stopAllMonitoring();\n      this.startHealthMonitoring();\n      this.startIdleMonitoring();\n      this.startVisibilityMonitoring();\n    }\n    \n    console.log('🔧 [MicrophoneLifecycleManager] Configuration updated:', newConfig);\n  }\n\n  /**\n   * Cleanup and destroy\n   */\n  destroy(): void {\n    console.log('🗑️ [MicrophoneLifecycleManager] Destroying lifecycle manager');\n    \n    // Stop all monitoring\n    this.stopAllMonitoring();\n    \n    // Force release resources\n    this.forceRelease();\n    \n    // Remove event listeners\n    this.eventListeners.forEach((listener, eventName) => {\n      if (eventName.includes('window:')) {\n        window.removeEventListener(eventName.replace('window:', ''), listener);\n      } else {\n        document.removeEventListener(eventName, listener);\n      }\n    });\n    this.eventListeners.clear();\n    \n    console.log('✅ [MicrophoneLifecycleManager] Cleanup complete');\n  }\n}","/**\n * ErrorNotificationSystem - Framework-agnostic Error Display and Notification\n * \n * Provides error messaging functionality that can be displayed on any page\n * Includes different notification types, auto-hide functionality, and priority management\n * Framework-agnostic implementation using vanilla DOM manipulation\n */\n\nimport type { NotificationConfig, NotificationElement } from '../types';\n\nexport class ErrorNotificationSystem {\n  private container: HTMLElement | null = null;\n  private notifications = new Map<string, NotificationElement>();\n  private notificationCounter = 0;\n  private defaultDuration = 5000; // 5 seconds\n  private maxNotifications = 0; // 初期実装: 制限なし\n  \n  // CSS classes for styling\n  private cssClasses = {\n    container: 'pitchpro-notifications',\n    notification: 'pitchpro-notification',\n    title: 'pitchpro-notification-title',\n    message: 'pitchpro-notification-message',\n    details: 'pitchpro-notification-details',\n    solution: 'pitchpro-notification-solution',\n    closeButton: 'pitchpro-notification-close',\n    error: 'pitchpro-notification-error',\n    warning: 'pitchpro-notification-warning',\n    success: 'pitchpro-notification-success',\n    info: 'pitchpro-notification-info',\n    high: 'pitchpro-notification-priority-high',\n    medium: 'pitchpro-notification-priority-medium',\n    low: 'pitchpro-notification-priority-low'\n  };\n\n  constructor() {\n    // SSR compatibility\n    if (typeof window === 'undefined') {\n      console.log('🔇 [ErrorNotificationSystem] SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.initializeContainer();\n    this.injectCSS();\n  }\n\n  /**\n   * Create and inject the notification container into the DOM\n   */\n  private initializeContainer(): void {\n    // Check if container already exists\n    let existingContainer = document.querySelector(`.${this.cssClasses.container}`);\n    \n    if (!existingContainer) {\n      this.container = document.createElement('div');\n      this.container.className = this.cssClasses.container;\n      this.container.setAttribute('role', 'alert');\n      this.container.setAttribute('aria-live', 'polite');\n      \n      // Add to document body\n      document.body.appendChild(this.container);\n      \n      console.log('📋 [ErrorNotificationSystem] Notification container created');\n    } else {\n      this.container = existingContainer as HTMLElement;\n      console.log('📋 [ErrorNotificationSystem] Using existing notification container');\n    }\n  }\n\n  /**\n   * Inject default CSS styles\n   */\n  private injectCSS(): void {\n    // Check if styles already exist\n    if (document.querySelector('#pitchpro-notifications-styles')) {\n      return;\n    }\n\n    const css = `\n      .${this.cssClasses.container} {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 10000;\n        max-width: 400px;\n        pointer-events: none;\n      }\n\n      .${this.cssClasses.notification} {\n        background: white;\n        border: 1px solid #e2e8f0;\n        border-radius: 8px;\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n        margin-bottom: 12px;\n        padding: 16px;\n        pointer-events: auto;\n        position: relative;\n        animation: slideIn 0.3s ease-out;\n        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;\n      }\n\n      .${this.cssClasses.notification}.removing {\n        opacity: 0;\n        transform: translateX(100%);\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateX(100%);\n        }\n        to {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.error} {\n        border-left: 4px solid #ef4444;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.warning} {\n        border-left: 4px solid #f59e0b;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.success} {\n        border-left: 4px solid #10b981;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.info} {\n        border-left: 4px solid #3b82f6;\n      }\n\n      .${this.cssClasses.title} {\n        font-weight: 600;\n        font-size: 14px;\n        color: #1f2937;\n        margin-bottom: 4px;\n        padding-right: 24px;\n      }\n\n      .${this.cssClasses.message} {\n        font-size: 13px;\n        color: #4b5563;\n        margin-bottom: 8px;\n        line-height: 1.4;\n      }\n\n      .${this.cssClasses.details} {\n        font-size: 12px;\n        color: #6b7280;\n        margin-bottom: 8px;\n        padding-left: 12px;\n        border-left: 2px solid #e5e7eb;\n      }\n\n      .${this.cssClasses.details} li {\n        margin-bottom: 2px;\n      }\n\n      .${this.cssClasses.solution} {\n        font-size: 12px;\n        color: #059669;\n        background: #ecfdf5;\n        border: 1px solid #a7f3d0;\n        border-radius: 4px;\n        padding: 8px;\n        margin-top: 8px;\n      }\n\n      .${this.cssClasses.closeButton} {\n        position: absolute;\n        top: 12px;\n        right: 12px;\n        background: none;\n        border: none;\n        font-size: 18px;\n        color: #9ca3af;\n        cursor: pointer;\n        padding: 0;\n        width: 20px;\n        height: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .${this.cssClasses.closeButton}:hover {\n        color: #6b7280;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.high} {\n        border-width: 2px;\n        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      }\n\n      @media (max-width: 640px) {\n        .${this.cssClasses.container} {\n          top: 10px;\n          left: 10px;\n          right: 10px;\n          max-width: none;\n        }\n      }\n    `;\n\n    const style = document.createElement('style');\n    style.id = 'pitchpro-notifications-styles';\n    style.textContent = css;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Show a notification\n   */\n  show(config: NotificationConfig): string {\n    if (!this.container) {\n      console.warn('⚠️ [ErrorNotificationSystem] Container not available - cannot show notification');\n      return '';\n    }\n\n    // Generate unique ID\n    const id = `notification-${++this.notificationCounter}`;\n\n    // Create notification element\n    const notification = this.createNotificationElement(id, config);\n\n    // Remove oldest notification if we're at the limit\n    if (this.notifications.size >= this.maxNotifications) {\n      const oldestId = Array.from(this.notifications.keys())[0];\n      this.remove(oldestId);\n    }\n\n    // Add to container and tracking\n    this.container.appendChild(notification);\n    this.notifications.set(id, notification);\n\n    // Auto-hide if configured\n    if (config.autoHide !== false) {\n      const duration = config.duration || this.defaultDuration;\n      setTimeout(() => {\n        this.remove(id);\n      }, duration);\n    }\n\n    console.log(`📢 [ErrorNotificationSystem] Notification shown: ${config.type} - ${config.title}`);\n    \n    return id;\n  }\n\n  /**\n   * Create notification DOM element\n   */\n  private createNotificationElement(id: string, config: NotificationConfig): NotificationElement {\n    const notification = document.createElement('div') as unknown as NotificationElement;\n    notification.className = [\n      this.cssClasses.notification,\n      this.cssClasses[config.type],\n      config.priority ? this.cssClasses[config.priority] : ''\n    ].filter(Boolean).join(' ');\n    notification['data-notification-id'] = id;\n\n    // Title\n    const title = document.createElement('div');\n    title.className = this.cssClasses.title;\n    title.textContent = config.title;\n    notification.appendChild(title);\n\n    // Message\n    const message = document.createElement('div');\n    message.className = this.cssClasses.message;\n    message.textContent = config.message;\n    notification.appendChild(message);\n\n    // Details (if provided)\n    if (config.details && config.details.length > 0) {\n      const details = document.createElement('div');\n      details.className = this.cssClasses.details;\n      \n      const list = document.createElement('ul');\n      list.style.margin = '0';\n      list.style.paddingLeft = '16px';\n      \n      config.details.forEach(detail => {\n        const item = document.createElement('li');\n        item.textContent = detail;\n        list.appendChild(item);\n      });\n      \n      details.appendChild(list);\n      notification.appendChild(details);\n    }\n\n    // Solution (if provided)\n    if (config.solution) {\n      const solution = document.createElement('div');\n      solution.className = this.cssClasses.solution;\n      solution.textContent = config.solution;\n      notification.appendChild(solution);\n    }\n\n    // Close button\n    const closeButton = document.createElement('button');\n    closeButton.className = this.cssClasses.closeButton;\n    closeButton.innerHTML = '×';\n    closeButton.setAttribute('aria-label', 'Close notification');\n    closeButton.addEventListener('click', () => {\n      this.remove(id);\n    });\n    notification.appendChild(closeButton);\n\n    return notification;\n  }\n\n  /**\n   * Remove a specific notification\n   */\n  remove(id: string): void {\n    const notification = this.notifications.get(id);\n    if (!notification) {\n      return;\n    }\n\n    // Add removing class for exit animation\n    notification.classList.add('removing');\n\n    // Remove from DOM after animation\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification);\n      }\n      this.notifications.delete(id);\n    }, 300);\n\n    console.log(`🗑️ [ErrorNotificationSystem] Notification removed: ${id}`);\n  }\n\n  /**\n   * Clear all notifications\n   */\n  clearAll(): void {\n    const ids = Array.from(this.notifications.keys());\n    ids.forEach(id => this.remove(id));\n    \n    console.log('🧹 [ErrorNotificationSystem] All notifications cleared');\n  }\n\n  /**\n   * Show error notification (convenience method)\n   */\n  showError(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'error',\n      title,\n      message,\n      priority: 'high',\n      autoHide: false, // Errors should be manually dismissed\n      ...options\n    });\n  }\n\n  /**\n   * Show warning notification (convenience method)\n   */\n  showWarning(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'warning',\n      title,\n      message,\n      priority: 'medium',\n      duration: 8000, // Longer duration for warnings\n      ...options\n    });\n  }\n\n  /**\n   * Show success notification (convenience method)\n   */\n  showSuccess(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'success',\n      title,\n      message,\n      priority: 'low',\n      duration: 3000, // Shorter duration for success messages\n      ...options\n    });\n  }\n\n  /**\n   * Show info notification (convenience method)\n   */\n  showInfo(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'info',\n      title,\n      message,\n      priority: 'low',\n      ...options\n    });\n  }\n\n  /**\n   * Show microphone error with common solutions\n   */\n  showMicrophoneError(error: Error, context?: string): string {\n    // Common solutions for microphone errors\n    // const commonSolutions = [\n    //   'ブラウザにマイクアクセスを許可してください',\n    //   'マイクが他のアプリケーションで使用されていないか確認してください',\n    //   'ブラウザを再起動して再度お試しください',\n    //   'デバイスの設定でマイクが有効になっていることを確認してください'\n    // ];\n\n    return this.showError(\n      'マイクロフォンエラー',\n      `マイクの初期化に失敗しました: ${error.message}`,\n      {\n        details: context ? [`発生箇所: ${context}`, `エラー詳細: ${error.name}`] : [`エラー詳細: ${error.name}`],\n        solution: 'マイクの設定を確認し、ブラウザにマイクアクセスを許可してください。',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show audio context error\n   */\n  showAudioContextError(error: Error): string {\n    return this.showError(\n      'オーディオシステムエラー',\n      `音声処理システムの初期化に失敗しました: ${error.message}`,\n      {\n        details: [\n          'ブラウザがWeb Audio APIに対応していない可能性があります',\n          'または、音声デバイスに問題が発生しています'\n        ],\n        solution: 'ブラウザを最新版に更新するか、別のブラウザで試してください。',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show network/loading error\n   */\n  showLoadingError(resource: string, error: Error): string {\n    return this.showError(\n      '読み込みエラー',\n      `${resource}の読み込みに失敗しました: ${error.message}`,\n      {\n        details: [\n          'ネットワーク接続を確認してください',\n          'ブラウザのキャッシュをクリアしてみてください'\n        ],\n        solution: 'ページを再読み込みするか、しばらく待ってから再度お試しください。',\n        priority: 'medium'\n      }\n    );\n  }\n\n  /**\n   * Get current notification count\n   */\n  getNotificationCount(): number {\n    return this.notifications.size;\n  }\n\n  /**\n   * Get all notification IDs\n   */\n  getNotificationIds(): string[] {\n    return Array.from(this.notifications.keys());\n  }\n\n  /**\n   * Check if a specific notification exists\n   */\n  hasNotification(id: string): boolean {\n    return this.notifications.has(id);\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: {\n    defaultDuration?: number;\n    maxNotifications?: number;\n  }): void {\n    if (config.defaultDuration !== undefined) {\n      this.defaultDuration = config.defaultDuration;\n    }\n    if (config.maxNotifications !== undefined) {\n      this.maxNotifications = config.maxNotifications;\n    }\n    \n    console.log('🔧 [ErrorNotificationSystem] Configuration updated:', config);\n  }\n\n  /**\n   * Destroy the notification system\n   */\n  destroy(): void {\n    console.log('🗑️ [ErrorNotificationSystem] Destroying notification system');\n    \n    this.clearAll();\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    // Remove injected CSS\n    const styleElement = document.querySelector('#pitchpro-notifications-styles');\n    if (styleElement && styleElement.parentNode) {\n      styleElement.parentNode.removeChild(styleElement);\n    }\n    \n    this.container = null;\n    this.notifications.clear();\n    \n    console.log('✅ [ErrorNotificationSystem] Cleanup complete');\n  }\n}","/**\n * MicrophoneController - High-level Unified Microphone Management Interface\n * \n * @description Provides a comprehensive, easy-to-use API that combines AudioManager,\n * MicrophoneLifecycleManager, and ErrorNotificationSystem into a single interface.\n * Handles device detection, permission management, sensitivity adjustment, and\n * automatic error recovery with user-friendly notifications.\n * \n * @example\n * ```typescript\n * const micController = new MicrophoneController();\n * \n * // Set up event callbacks\n * micController.setCallbacks({\n *   onStateChange: (state) => console.log('State:', state),\n *   onError: (error) => console.error('Error:', error.message),\n *   onDeviceChange: (specs) => console.log('Device:', specs.deviceType)\n * });\n * \n * // Initialize and start\n * const resources = await micController.initialize();\n * console.log('Microphone ready:', resources.mediaStream.active);\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { \n  DeviceSpecs,\n  MediaStreamResources,\n  MicrophoneControllerEvents,\n  ErrorCallback,\n  StateChangeCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\nimport { MicrophoneLifecycleManager } from './MicrophoneLifecycleManager';\nimport { ErrorNotificationSystem } from './ErrorNotificationSystem';\nimport { \n  MicrophoneAccessError,\n  AudioContextError,\n  PitchProError,\n  ErrorCode,\n  ErrorMessageBuilder\n} from '../utils/errors';\n\nexport class MicrophoneController {\n  /** @readonly AudioManager instance for low-level audio resource management */\n  public readonly audioManager: AudioManager;\n  \n  /** @private Lifecycle manager for safe resource handling */\n  private lifecycleManager: MicrophoneLifecycleManager;\n  \n  /** @private Error notification system for user feedback */\n  private errorSystem: ErrorNotificationSystem;\n  \n  /** @private Current controller state */\n  private currentState: 'uninitialized' | 'initializing' | 'ready' | 'active' | 'error' = 'uninitialized';\n  \n  /** @private Microphone permission granted flag */\n  private isPermissionGranted = false;\n  \n  /** @private Last error encountered during operations */\n  private lastError: Error | null = null;\n  \n  /** @private Event callback functions */\n  private eventCallbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  } = {};\n  \n  /** @private Device-specific optimization specifications */\n  private deviceSpecs: DeviceSpecs | null = null;\n\n  /**\n   * Creates a new MicrophoneController with integrated management systems\n   * \n   * @param audioManagerConfig - Configuration for AudioManager (optional)\n   * @param audioManagerConfig.sampleRate - Audio sample rate (default: 44100)\n   * @param audioManagerConfig.echoCancellation - Enable echo cancellation (default: false)\n   * @param audioManagerConfig.autoGainControl - Enable auto gain control (default: false)\n   * @param lifecycleConfig - Configuration for lifecycle management (optional)\n   * @param lifecycleConfig.maxRetries - Maximum retry attempts (default: 3)\n   * @param lifecycleConfig.retryDelayMs - Delay between retries (default: 1000)\n   * @param showErrorNotifications - Enable visual error notifications (default: true)\n   * \n   * @example\n   * ```typescript\n   * // Basic usage with defaults\n   * const micController = new MicrophoneController();\n   * \n   * // Custom configuration\n   * const micController = new MicrophoneController(\n   *   { sampleRate: 48000, echoCancellation: true },\n   *   { maxRetries: 5, retryDelayMs: 2000 },\n   *   false  // Disable error notifications\n   * );\n   * ```\n   */\n  constructor(\n    audioManagerConfig = {},\n    lifecycleConfig = {},\n    showErrorNotifications = true\n  ) {\n    this.audioManager = new AudioManager(audioManagerConfig);\n    this.lifecycleManager = new MicrophoneLifecycleManager(this.audioManager, lifecycleConfig);\n    this.errorSystem = showErrorNotifications ? new ErrorNotificationSystem() : null as any;\n    \n    this.setupEventHandlers();\n    this.detectDevice();\n  }\n\n  /**\n   * Sets callback functions for microphone controller events\n   * \n   * @param callbacks - Object containing event callback functions\n   * @param callbacks.onStateChange - Called when controller state changes\n   * @param callbacks.onError - Called when errors occur\n   * @param callbacks.onPermissionChange - Called when microphone permission changes\n   * @param callbacks.onSensitivityChange - Called when sensitivity is adjusted\n   * @param callbacks.onDeviceChange - Called when device specifications are detected\n   * \n   * @example\n   * ```typescript\n   * micController.setCallbacks({\n   *   onStateChange: (state) => {\n   *     console.log('Controller state:', state);\n   *   },\n   *   onError: (error) => {\n   *     console.error('Microphone error:', error.message);\n   *   },\n   *   onDeviceChange: (specs) => {\n   *     console.log(`Device: ${specs.deviceType}, Sensitivity: ${specs.sensitivity}x`);\n   *   }\n   * });\n   * ```\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  }): void {\n    this.eventCallbacks = { ...this.eventCallbacks, ...callbacks };\n  }\n\n  /**\n   * Setup internal event handlers\n   */\n  private setupEventHandlers(): void {\n    // Lifecycle manager callbacks\n    this.lifecycleManager.setCallbacks({\n      onStateChange: (state) => {\n        this.updateState(state === 'active' ? 'active' : 'ready');\n      },\n      onError: (error) => {\n        this.handleError(error, 'lifecycle');\n      }\n    });\n  }\n\n  /**\n   * Detect device specifications\n   */\n  private detectDevice(): void {\n    this.deviceSpecs = this.audioManager.getPlatformSpecs();\n    console.log('📱 [MicrophoneController] Device detected:', this.deviceSpecs);\n    \n    // Notify callback\n    this.eventCallbacks.onDeviceChange?.(this.deviceSpecs);\n    \n    // Dispatch custom event\n    this.dispatchCustomEvent('pitchpro:deviceDetected', { specs: this.deviceSpecs });\n  }\n\n  /**\n   * Initializes microphone access with automatic device detection and permissions\n   * \n   * @description Handles the complete initialization flow including device detection,\n   * permission requests, resource acquisition, and error recovery. Automatically\n   * applies device-specific optimizations and sets up monitoring systems.\n   * \n   * @returns Promise resolving to audio resources (AudioContext, MediaStream, SourceNode)\n   * @throws {Error} If microphone permission is denied or initialization fails\n   * \n   * @example\n   * ```typescript\n   * try {\n   *   const resources = await micController.initialize();\n   *   console.log('Microphone ready:', resources.mediaStream.active);\n   *   console.log('AudioContext state:', resources.audioContext.state);\n   * } catch (error) {\n   *   console.error('Failed to initialize microphone:', error.message);\n   * }\n   * ```\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    try {\n      this.updateState('initializing');\n      console.log('🎤 [MicrophoneController] Starting initialization');\n\n      // Acquire resources through lifecycle manager\n      const resources = await this.lifecycleManager.acquire();\n      \n      // Update state and permissions\n      this.isPermissionGranted = true;\n      this.updateState('ready');\n      this.lastError = null;\n\n      // Notify permission change\n      this.eventCallbacks.onPermissionChange?.(true);\n      this.dispatchCustomEvent('pitchpro:microphoneGranted', { stream: resources.mediaStream });\n\n      console.log('✅ [MicrophoneController] Initialization complete');\n      return resources;\n\n    } catch (error) {\n      // Enhanced error logging with user-friendly information\n      const structuredError = this._createStructuredError(error as Error, 'initialization');\n      ErrorMessageBuilder.logError(structuredError, 'MicrophoneController initialization');\n      console.error('❌ [MicrophoneController] Initialization failed:', structuredError.toJSON());\n      \n      this.isPermissionGranted = false;\n      this.handleError(error as Error, 'initialization');\n      \n      // Notify permission denial\n      this.eventCallbacks.onPermissionChange?.(false);\n      this.dispatchCustomEvent('pitchpro:microphoneDenied', { error: error as Error });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Request microphone permission (alias for initialize)\n   */\n  async requestPermission(): Promise<boolean> {\n    try {\n      await this.initialize();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Check if microphone permission is granted\n   */\n  async checkPermissionStatus(): Promise<'granted' | 'denied' | 'prompt'> {\n    if (typeof navigator === 'undefined' || !navigator.mediaDevices) {\n      return 'denied';\n    }\n\n    try {\n      const result = await navigator.permissions.query({ name: 'microphone' as PermissionName });\n      return result.state as 'granted' | 'denied' | 'prompt';\n    } catch {\n      // Fallback: try to access microphone with minimal constraints\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: { \n            echoCancellation: false,\n            noiseSuppression: false,\n            autoGainControl: false\n          } \n        });\n        stream.getTracks().forEach(track => track.stop());\n        return 'granted';\n      } catch {\n        return 'denied';\n      }\n    }\n  }\n\n  /**\n   * Stop microphone and release resources\n   */\n  stop(): void {\n    console.log('🛑 [MicrophoneController] Stopping microphone');\n    \n    this.lifecycleManager.release();\n    this.updateState('ready');\n    \n    // Dispatch stop event\n    this.dispatchCustomEvent('pitchpro:microphoneStopped', {});\n    \n    console.log('✅ [MicrophoneController] Microphone stopped');\n  }\n\n  /**\n   * Forcefully stops microphone with complete resource cleanup\n   * \n   * @description Performs immediate and complete cleanup of all microphone resources,\n   * resets permission state, and returns controller to uninitialized state.\n   * Use when normal stop() is not sufficient or emergency cleanup is needed.\n   * \n   * @example\n   * ```typescript\n   * // Emergency cleanup\n   * micController.forceStop();\n   * console.log('All microphone resources cleaned up');\n   * ```\n   */\n  forceStop(): void {\n    console.log('🚨 [MicrophoneController] Force stopping microphone');\n    \n    this.lifecycleManager.forceRelease();\n    this.updateState('uninitialized');\n    this.isPermissionGranted = false;\n    \n    console.log('✅ [MicrophoneController] Force stop complete');\n  }\n\n  /**\n   * Sets microphone sensitivity with automatic validation and event notification\n   * \n   * @param sensitivity - Sensitivity multiplier (0.1 ~ 10.0)\n   * - 0.1-1.0: Reduced sensitivity for loud environments\n   * - 1.0: Standard PC sensitivity\n   * - 3.0: iPhone optimized\n   * - 7.0: iPad optimized  \n   * - 10.0: Maximum sensitivity for quiet environments\n   * \n   * @example\n   * ```typescript\n   * // Set device-optimized sensitivity\n   * micController.setSensitivity(7.0);  // iPad optimization\n   * \n   * // Adjust for environment\n   * micController.setSensitivity(0.5);  // Reduce for loud room\n   * ```\n   */\n  setSensitivity(sensitivity: number): void {\n    const oldSensitivity = this.audioManager.getSensitivity();\n    this.audioManager.setSensitivity(sensitivity);\n    const newSensitivity = this.audioManager.getSensitivity();\n    \n    if (oldSensitivity !== newSensitivity) {\n      console.log(`🔧 [MicrophoneController] Sensitivity changed: ${oldSensitivity}x → ${newSensitivity}x`);\n      \n      // Notify callbacks\n      this.eventCallbacks.onSensitivityChange?.(newSensitivity);\n      this.dispatchCustomEvent('pitchpro:sensitivityChanged', { sensitivity: newSensitivity });\n    }\n  }\n\n  /**\n   * Gets current microphone sensitivity multiplier\n   * \n   * @returns Current sensitivity value (0.1 ~ 10.0)\n   * \n   * @example\n   * ```typescript\n   * const currentSensitivity = micController.getSensitivity();\n   * console.log(`Current sensitivity: ${currentSensitivity}x`);\n   * ```\n   */\n  getSensitivity(): number {\n    return this.audioManager.getSensitivity();\n  }\n\n  /**\n   * Get device specifications\n   */\n  getDeviceSpecs(): DeviceSpecs | null {\n    return this.deviceSpecs;\n  }\n\n  /**\n   * Get current state\n   */\n  getState(): string {\n    return this.currentState;\n  }\n\n  /**\n   * Check if microphone is active\n   */\n  isActive(): boolean {\n    return this.currentState === 'active';\n  }\n\n  /**\n   * Check if microphone is ready (initialized but not active)\n   */\n  isReady(): boolean {\n    return this.currentState === 'ready';\n  }\n\n  /**\n   * Check if permission is granted\n   */\n  hasPermission(): boolean {\n    return this.isPermissionGranted;\n  }\n\n  /**\n   * Get comprehensive status\n   */\n  getStatus() {\n    return {\n      state: this.currentState,\n      isPermissionGranted: this.isPermissionGranted,\n      isActive: this.isActive(),\n      isReady: this.isReady(),\n      sensitivity: this.getSensitivity(),\n      deviceSpecs: this.deviceSpecs,\n      lastError: this.lastError,\n      audioManagerStatus: this.audioManager.getStatus(),\n      lifecycleStatus: this.lifecycleManager.getStatus()\n    };\n  }\n\n  /**\n   * Perform health check\n   */\n  checkHealth() {\n    return this.audioManager.checkMediaStreamHealth();\n  }\n\n  /**\n   * Test microphone functionality\n   */\n  async testMicrophone(durationMs = 2000): Promise<{\n    success: boolean;\n    volume: number;\n    frequency: number | null;\n    duration: number;\n    error?: Error;\n  }> {\n    const startTime = Date.now();\n    \n    try {\n      // Ensure we have resources\n      if (!this.isReady() && !this.isActive()) {\n        await this.initialize();\n      }\n      \n      // Create temporary analyser for testing\n      const analyser = this.audioManager.createAnalyser('microphone-test', {\n        fftSize: 1024,\n        smoothingTimeConstant: 0.8\n      });\n      \n      // Collect audio data for specified duration\n      let maxVolume = 0;\n      let detectedFrequency: number | null = null as number | null;\n      const endTime = startTime + durationMs;\n      \n      await new Promise<void>((resolve) => {\n        const checkAudio = () => {\n          if (Date.now() >= endTime) {\n            resolve();\n            return;\n          }\n          \n          // Analyze current audio\n          const bufferLength = analyser.fftSize;\n          const dataArray = new Float32Array(bufferLength);\n          analyser.getFloatTimeDomainData(dataArray);\n          \n          // Calculate RMS volume\n          let sum = 0;\n          for (let i = 0; i < bufferLength; i++) {\n            sum += Math.abs(dataArray[i]);\n          }\n          const rms = Math.sqrt(sum / bufferLength);\n          const volume = rms * 100;\n          \n          if (volume > maxVolume) {\n            maxVolume = volume;\n          }\n          \n          // Simple peak detection for frequency\n          if (volume > 5) { // Only check frequency if there's significant volume\n            let maxIndex = 0;\n            let maxValue = 0;\n            for (let i = 1; i < bufferLength / 2; i++) {\n              const value = Math.abs(dataArray[i]);\n              if (value > maxValue) {\n                maxValue = value;\n                maxIndex = i;\n              }\n            }\n            if (maxIndex > 0) {\n              detectedFrequency = (maxIndex * 44100) / bufferLength;\n            }\n          }\n          \n          requestAnimationFrame(checkAudio);\n        };\n        \n        checkAudio();\n      });\n      \n      // Cleanup test analyser\n      this.audioManager.removeAnalyser('microphone-test');\n      \n      const duration = Date.now() - startTime;\n      const success = maxVolume > 1; // Consider success if we detected some audio\n      \n      const frequencyDisplay = detectedFrequency ? detectedFrequency.toFixed(0) : 'none';\n      console.log(`🧪 [MicrophoneController] Microphone test complete: volume=${maxVolume.toFixed(2)}, frequency=${frequencyDisplay}, duration=${duration}ms`);\n      \n      return {\n        success,\n        volume: maxVolume,\n        frequency: detectedFrequency,\n        duration\n      };\n      \n    } catch (error) {\n      const duration = Date.now() - startTime;\n      const testError = this._createStructuredError(error as Error, 'microphone_test');\n      ErrorMessageBuilder.logError(testError, 'Microphone functionality test');\n      console.error('❌ [MicrophoneController] Microphone test failed:', testError.toJSON());\n      \n      return {\n        success: false,\n        volume: 0,\n        frequency: null,\n        duration,\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * Update internal state and notify\n   */\n  private updateState(newState: typeof this.currentState): void {\n    if (this.currentState !== newState) {\n      const oldState = this.currentState;\n      this.currentState = newState;\n      \n      console.log(`🔄 [MicrophoneController] State changed: ${oldState} → ${newState}`);\n      \n      // Notify callback\n      this.eventCallbacks.onStateChange?.(newState);\n    }\n  }\n\n  /**\n   * Handle errors with notification system\n   */\n  private handleError(error: Error, context: string): void {\n    const structuredError = error instanceof PitchProError ? error : this._createStructuredError(error, context);\n    ErrorMessageBuilder.logError(structuredError, `MicrophoneController ${context}`);\n    console.error(`❌ [MicrophoneController] Error in ${context}:`, structuredError.toJSON());\n    \n    this.lastError = error;\n    this.updateState('error');\n    \n    // Show error notification if system is available\n    if (this.errorSystem) {\n      if (context === 'initialization' || context === 'lifecycle') {\n        this.errorSystem.showMicrophoneError(error, context);\n      } else {\n        this.errorSystem.showError(\n          'マイクエラー',\n          `${context}でエラーが発生しました: ${error.message}`,\n          { priority: 'medium' }\n        );\n      }\n    }\n    \n    // Notify error callback\n    this.eventCallbacks.onError?.(error);\n  }\n\n  /**\n   * Dispatch custom DOM event\n   */\n  private dispatchCustomEvent(eventName: keyof MicrophoneControllerEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Add event listener for microphone events\n   */\n  addEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.addEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Remove event listener for microphone events\n   */\n  removeEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.removeEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Cleanup and destroy all resources\n   */\n  destroy(): void {\n    console.log('🗑️ [MicrophoneController] Destroying controller');\n    \n    // Force stop to ensure cleanup\n    this.forceStop();\n    \n    // Destroy managed components\n    this.lifecycleManager.destroy();\n    this.errorSystem?.destroy();\n    \n    // Clear callbacks\n    this.eventCallbacks = {};\n    \n    // Reset state\n    this.currentState = 'uninitialized';\n    this.isPermissionGranted = false;\n    this.lastError = null;\n    this.deviceSpecs = null;\n    \n    console.log('✅ [MicrophoneController] Cleanup complete');\n  }\n\n  /**\n   * Creates structured error with enhanced context information\n   * \n   * @private\n   * @param error - Original error\n   * @param operation - Operation that failed\n   * @returns Structured PitchProError with context\n   */\n  private _createStructuredError(error: Error, operation: string): PitchProError {\n    // Determine error type based on error message patterns\n    if (error.message.includes('Permission denied') || \n        error.message.includes('NotAllowedError') ||\n        error.message.includes('permission') ||\n        error.message.includes('denied')) {\n      return new MicrophoneAccessError(\n        'マイクへのアクセス許可が拒否されました。ブラウザの設定でマイクアクセスを許可してください。',\n        {\n          operation,\n          originalError: error.message,\n          deviceSpecs: this.deviceSpecs,\n          permissionState: this.isPermissionGranted,\n          controllerState: this.currentState,\n          userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown'\n        }\n      );\n    }\n    \n    if (error.message.includes('AudioContext') || \n        error.message.includes('audio') ||\n        error.message.includes('context') ||\n        error.message.includes('initialization')) {\n      return new AudioContextError(\n        'オーディオシステムの初期化に失敗しました。デバイスの音響設定を確認するか、ブラウザを再起動してください。',\n        {\n          operation,\n          originalError: error.message,\n          controllerState: this.currentState,\n          audioManagerStatus: this.audioManager.getStatus(),\n          deviceSpecs: this.deviceSpecs\n        }\n      );\n    }\n    \n    // Default to generic PitchPro error\n    return new PitchProError(\n      `${operation}中に予期しないエラーが発生しました: ${error.message}`,\n      ErrorCode.MICROPHONE_ACCESS_DENIED,\n      {\n        operation,\n        originalError: error.message,\n        stack: error.stack,\n        currentState: {\n          controllerState: this.currentState,\n          isPermissionGranted: this.isPermissionGranted,\n          isActive: this.isActive(),\n          isReady: this.isReady(),\n          deviceSpecs: this.deviceSpecs\n        }\n      }\n    );\n  }\n}","/**\n * HarmonicCorrection - Advanced harmonic detection and correction\n * \n * Provides sophisticated harmonic analysis and correction algorithms\n * Handles complex harmonic patterns, subharmonics, and frequency drift\n */\n\nimport type { HarmonicCorrectionResult } from '../types';\n\nexport class HarmonicCorrection {\n  private historyBuffer: Array<{\n    frequency: number;\n    confidence: number;\n    timestamp: number;\n    volume: number;\n  }> = [];\n  \n  private config = {\n    historyWindowMs: 2000,\n    minConfidenceThreshold: 0.6,\n    harmonicToleranceCents: 30,\n    maxHarmonicNumber: 8,\n    stabilityWeight: 0.7,\n    volumeWeight: 0.3\n  };\n\n  constructor(config: Partial<typeof HarmonicCorrection.prototype.config> = {}) {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Apply harmonic correction to detected frequency\n   */\n  correctFrequency(frequency: number, volume: number = 1.0): HarmonicCorrectionResult {\n    const now = Date.now();\n    \n    // Clean old history\n    this.cleanHistory(now);\n    \n    // Add current detection to history\n    this.addToHistory(frequency, volume, now);\n    \n    // Analyze for harmonic patterns\n    const analysis = this.analyzeHarmonics(frequency);\n    \n    // Apply correction if confidence is high enough\n    if (analysis.confidence >= this.config.minConfidenceThreshold) {\n      return {\n        correctedFreq: analysis.correctedFrequency,\n        confidence: analysis.confidence,\n        correctionApplied: Math.abs(analysis.correctedFrequency - frequency) > 1.0\n      };\n    }\n    \n    return {\n      correctedFreq: frequency,\n      confidence: analysis.confidence,\n      correctionApplied: false\n    };\n  }\n\n  /**\n   * Analyze frequency for harmonic patterns\n   */\n  private analyzeHarmonics(frequency: number): {\n    correctedFrequency: number;\n    confidence: number;\n    harmonicNumber?: number;\n    fundamentalCandidate?: number;\n  } {\n    if (this.historyBuffer.length < 3) {\n      return {\n        correctedFrequency: frequency,\n        confidence: 0.1\n      };\n    }\n\n    // Get recent stable frequencies\n    const recentFrequencies = this.historyBuffer\n      .slice(-10)\n      .map(entry => entry.frequency);\n\n    // Look for fundamental candidates\n    const fundamentalCandidates = this.findFundamentalCandidates(frequency);\n    \n    let bestCandidate = {\n      frequency,\n      confidence: 0.1,\n      harmonicNumber: 1\n    };\n\n    // Test each fundamental candidate\n    for (const candidate of fundamentalCandidates) {\n      const confidence = this.calculateHarmonicConfidence(\n        candidate.fundamental,\n        candidate.harmonicNumber,\n        recentFrequencies\n      );\n      \n      if (confidence > bestCandidate.confidence) {\n        bestCandidate = {\n          frequency: candidate.fundamental,\n          confidence,\n          harmonicNumber: candidate.harmonicNumber\n        };\n      }\n    }\n\n    // If we found a likely harmonic, correct to fundamental\n    if (bestCandidate.harmonicNumber > 1 && bestCandidate.confidence > this.config.minConfidenceThreshold) {\n      return {\n        correctedFrequency: bestCandidate.frequency,\n        confidence: bestCandidate.confidence,\n        harmonicNumber: bestCandidate.harmonicNumber,\n        fundamentalCandidate: bestCandidate.frequency\n      };\n    }\n\n    return {\n      correctedFrequency: frequency,\n      confidence: bestCandidate.confidence\n    };\n  }\n\n  /**\n   * Find potential fundamental frequencies for a given detected frequency\n   */\n  private findFundamentalCandidates(frequency: number): Array<{\n    fundamental: number;\n    harmonicNumber: number;\n    likelihood: number;\n  }> {\n    const candidates: Array<{\n      fundamental: number;\n      harmonicNumber: number;\n      likelihood: number;\n    }> = [];\n\n    // Check if this could be a harmonic of a lower fundamental\n    for (let harmonicNum = 2; harmonicNum <= this.config.maxHarmonicNumber; harmonicNum++) {\n      const fundamental = frequency / harmonicNum;\n      \n      // Skip if fundamental is too low for human voice\n      if (fundamental < 60) continue;\n      \n      // Calculate likelihood based on how close it is to exact harmonic ratio\n      const exactHarmonic = fundamental * harmonicNum;\n      const centDeviation = Math.abs(1200 * Math.log2(frequency / exactHarmonic));\n      \n      if (centDeviation <= this.config.harmonicToleranceCents) {\n        const likelihood = 1.0 - (centDeviation / this.config.harmonicToleranceCents);\n        candidates.push({\n          fundamental,\n          harmonicNumber: harmonicNum,\n          likelihood\n        });\n      }\n    }\n\n    // Also consider the frequency itself as fundamental (no correction)\n    candidates.push({\n      fundamental: frequency,\n      harmonicNumber: 1,\n      likelihood: 0.5\n    });\n\n    return candidates.sort((a, b) => b.likelihood - a.likelihood);\n  }\n\n  /**\n   * Calculate confidence that a frequency pattern represents a harmonic series\n   */\n  private calculateHarmonicConfidence(\n    fundamental: number,\n    _harmonicNumber: number,\n    recentFrequencies: number[]\n  ): number {\n    if (recentFrequencies.length < 3) return 0.1;\n\n    let totalConfidence = 0;\n    let validMeasurements = 0;\n\n    // Check how well recent frequencies fit the harmonic pattern\n    for (const freq of recentFrequencies) {\n      // Find the closest harmonic to this frequency\n      let closestHarmonicNum = Math.round(freq / fundamental);\n      if (closestHarmonicNum < 1) closestHarmonicNum = 1;\n      \n      const expectedFreq = fundamental * closestHarmonicNum;\n      const centDeviation = Math.abs(1200 * Math.log2(freq / expectedFreq));\n      \n      if (centDeviation <= this.config.harmonicToleranceCents * 2) {\n        const confidence = 1.0 - (centDeviation / (this.config.harmonicToleranceCents * 2));\n        totalConfidence += confidence;\n        validMeasurements++;\n      }\n    }\n\n    if (validMeasurements === 0) return 0.1;\n\n    // Average confidence, weighted by stability\n    const avgConfidence = totalConfidence / validMeasurements;\n    \n    // Add stability bonus if we have consistent measurements\n    const stabilityBonus = Math.min(validMeasurements / recentFrequencies.length, 1.0);\n    \n    return Math.min(avgConfidence * this.config.stabilityWeight + stabilityBonus * (1 - this.config.stabilityWeight), 1.0);\n  }\n\n  /**\n   * Add frequency detection to history\n   */\n  private addToHistory(frequency: number, volume: number, timestamp: number): void {\n    // Calculate confidence based on volume and stability\n    const volumeConfidence = Math.min(volume, 1.0);\n    let stabilityConfidence = 0.5;\n    \n    if (this.historyBuffer.length > 0) {\n      const lastFreq = this.historyBuffer[this.historyBuffer.length - 1].frequency;\n      const freqRatio = Math.max(frequency, lastFreq) / Math.min(frequency, lastFreq);\n      stabilityConfidence = Math.max(0, 1.0 - (freqRatio - 1.0) * 5); // Penalty for large jumps\n    }\n    \n    const confidence = volumeConfidence * this.config.volumeWeight + \n                      stabilityConfidence * (1 - this.config.volumeWeight);\n    \n    this.historyBuffer.push({\n      frequency,\n      confidence,\n      timestamp,\n      volume\n    });\n    \n    // Limit buffer size\n    if (this.historyBuffer.length > 50) {\n      this.historyBuffer.shift();\n    }\n  }\n\n  /**\n   * Clean old entries from history\n   */\n  private cleanHistory(currentTime: number): void {\n    const cutoffTime = currentTime - this.config.historyWindowMs;\n    this.historyBuffer = this.historyBuffer.filter(entry => entry.timestamp > cutoffTime);\n  }\n\n  /**\n   * Reset correction history\n   */\n  resetHistory(): void {\n    this.historyBuffer = [];\n  }\n\n  /**\n   * Get current analysis statistics\n   */\n  getAnalysisStats(): {\n    historyLength: number;\n    averageConfidence: number;\n    frequencyRange: { min: number; max: number } | null;\n    stabilityScore: number;\n  } {\n    if (this.historyBuffer.length === 0) {\n      return {\n        historyLength: 0,\n        averageConfidence: 0,\n        frequencyRange: null,\n        stabilityScore: 0\n      };\n    }\n\n    const frequencies = this.historyBuffer.map(entry => entry.frequency);\n    const confidences = this.historyBuffer.map(entry => entry.confidence);\n    \n    const avgConfidence = confidences.reduce((sum, conf) => sum + conf, 0) / confidences.length;\n    const minFreq = Math.min(...frequencies);\n    const maxFreq = Math.max(...frequencies);\n    \n    // Calculate stability as inverse of coefficient of variation\n    const mean = frequencies.reduce((sum, freq) => sum + freq, 0) / frequencies.length;\n    const variance = frequencies.reduce((sum, freq) => sum + Math.pow(freq - mean, 2), 0) / frequencies.length;\n    const coefficientOfVariation = Math.sqrt(variance) / mean;\n    const stabilityScore = Math.max(0, 1.0 - coefficientOfVariation);\n\n    return {\n      historyLength: this.historyBuffer.length,\n      averageConfidence: avgConfidence,\n      frequencyRange: { min: minFreq, max: maxFreq },\n      stabilityScore\n    };\n  }\n\n  /**\n   * Configure correction parameters\n   */\n  updateConfig(newConfig: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n}","/**\n * TypeScript type definitions for PitchPro Audio Processing\n */\n\n// AudioManager types\nexport interface AudioManagerConfig {\n  sampleRate?: number;\n  channelCount?: number;\n  echoCancellation?: boolean;\n  noiseSuppression?: boolean;\n  autoGainControl?: boolean;\n  latency?: number;\n}\n\n// PitchDetector types\nexport interface PitchDetectorConfig {\n  fftSize?: number;\n  smoothing?: number;\n  clarityThreshold?: number;\n  minVolumeAbsolute?: number;\n  silenceDetection?: SilenceDetectionConfig;\n}\n\n// Silence detection types\nexport interface SilenceDetectionConfig {\n  enabled?: boolean;\n  warningThreshold?: number;    // 警告までの時間（ms）\n  timeoutThreshold?: number;    // タイムアウトまでの時間（ms）\n  minVolumeThreshold?: number;  // 消音判定の音量閾値\n  onSilenceWarning?: (duration: number) => void;\n  onSilenceTimeout?: () => void;\n  onSilenceRecovered?: () => void;\n}\n\nexport interface PitchDetectionResult {\n  frequency: number;\n  note: string;\n  octave?: number;\n  clarity: number;\n  volume: number;\n  rawVolume?: number;\n  cents?: number;\n  timestamp?: number;\n}\n\n// NoiseFilter types\nexport interface NoiseFilterConfig {\n  highpassFreq?: number;\n  lowpassFreq?: number;\n  notchFreq?: number;\n  highpassQ?: number;\n  lowpassQ?: number;\n  notchQ?: number;\n  useFilters?: boolean;\n}\n\n// HarmonicCorrection types\nexport interface HarmonicCorrectionResult {\n  correctedFreq: number;\n  confidence: number;\n  correctionApplied: boolean;\n}\n\n// ErrorNotification types\nexport interface NotificationConfig {\n  type: 'error' | 'warning' | 'success' | 'info';\n  title: string;\n  message: string;\n  details?: string[];\n  solution?: string;\n  autoHide?: boolean;\n  duration?: number;\n  priority?: 'low' | 'medium' | 'high';\n}\n\nexport interface NotificationElement extends HTMLElement {\n  'data-notification-id': string;\n}\n\n// Music theory types\nexport interface MusicalNote {\n  name: string;\n  octave: number;\n  midi: number;\n  frequency: number;\n}\n\nexport interface MusicalInterval {\n  name: string;\n  semitones: number;\n  cents: number;\n  ratio: number;\n}\n\n// Voice analysis types\nexport interface VoiceAnalysis {\n  quality: VoiceQuality;\n  stability: number;\n  recommendations: string[];\n}\n\nexport const VoiceQuality = {\n  EXCELLENT: 'excellent' as const,\n  GOOD: 'good' as const,\n  FAIR: 'fair' as const,\n  POOR: 'poor' as const\n};\n\nexport type VoiceQuality = typeof VoiceQuality[keyof typeof VoiceQuality];\n\nexport const AccuracyLevel = {\n  PERFECT: 'perfect' as const,\n  EXCELLENT: 'excellent' as const,\n  GOOD: 'good' as const,\n  FAIR: 'fair' as const,\n  POOR: 'poor' as const\n};\n\nexport type AccuracyLevel = typeof AccuracyLevel[keyof typeof AccuracyLevel];\n\nexport interface AccuracyResult {\n  accuracy: AccuracyLevel;\n  centsOff: number;\n  score: number;\n}\n\n// Device detection types\nexport interface DeviceSpecs {\n  deviceType: 'iPhone' | 'iPad' | 'PC';\n  isIOS: boolean;\n  sensitivity: number;\n  noiseGate: number;\n  divisor: number;\n  gainCompensation: number;\n  noiseThreshold: number;\n  smoothingFactor: number;\n}\n\n// Lifecycle management types\nexport interface MediaStreamResources {\n  audioContext: AudioContext;\n  mediaStream: MediaStream;\n  sourceNode: MediaStreamAudioSourceNode;\n}\n\nexport interface HealthStatus {\n  mediaStreamActive: boolean;\n  audioContextState: string;\n  trackStates: TrackState[];\n  healthy: boolean;\n  refCount?: number;\n}\n\nexport interface TrackState {\n  kind: string;\n  enabled: boolean;\n  readyState: MediaStreamTrackState;\n  muted: boolean;\n}\n\n// Event types\nexport interface MicrophoneControllerEvents {\n  'pitchpro:microphoneGranted': CustomEvent<{ stream: MediaStream }>;\n  'pitchpro:microphoneDenied': CustomEvent<{ error: Error }>;\n  'pitchpro:microphoneStopped': CustomEvent;\n  'pitchpro:sensitivityChanged': CustomEvent<{ sensitivity: number }>;\n  'pitchpro:noiseGateChanged': CustomEvent<{ threshold: number }>;\n  'pitchpro:deviceDetected': CustomEvent<{ specs: DeviceSpecs }>;\n}\n\nexport interface LifecycleEvents {\n  'pitchpro:lifecycle:trackEnded': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:trackMuted': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:trackUnmuted': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:autoRecoverySuccess': CustomEvent;\n  'pitchpro:lifecycle:autoRecoveryFailed': CustomEvent<{ error: Error }>;\n}\n\n// Callback types\nexport type PitchCallback = (result: PitchDetectionResult) => void;\nexport type ErrorCallback = (error: Error) => void;\nexport type StateChangeCallback = (state: string) => void;","/**\n * VoiceAnalyzer - Advanced voice quality and analysis\n * \n * Analyzes voice characteristics, stability, and provides recommendations\n * Includes vibrato detection, breathiness analysis, and vocal health indicators\n */\n\nimport type { VoiceAnalysis } from '../types';\nimport { VoiceQuality } from '../types';\n\nexport class VoiceAnalyzer {\n  private analysisBuffer: Array<{\n    frequency: number;\n    volume: number;\n    clarity: number;\n    timestamp: number;\n  }> = [];\n  \n  private config = {\n    analysisWindowMs: 3000,\n    stabilityThresholdCents: 20,\n    vibratoMinRate: 4.5,\n    vibratoMaxRate: 7.5,\n    vibratoMinDepthCents: 50,\n    breathinessThreshold: 0.3,\n    minAnalysisTime: 1000\n  };\n\n  constructor(config: Partial<typeof VoiceAnalyzer.prototype.config> = {}) {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Analyze voice characteristics from audio data\n   */\n  analyzeVoice(\n    frequency: number, \n    volume: number, \n    clarity: number,\n    spectralData?: Float32Array\n  ): VoiceAnalysis {\n    const timestamp = Date.now();\n    \n    // Add to analysis buffer\n    this.addToBuffer(frequency, volume, clarity, timestamp);\n    \n    // Clean old data\n    this.cleanBuffer(timestamp);\n    \n    // Perform comprehensive analysis\n    const stability = this.calculateStability();\n    const vibrato = this.detectVibrato();\n    const breathiness = spectralData ? this.analyzeBreathiness(spectralData) : null;\n    const consistency = this.analyzeConsistency();\n    \n    // Calculate overall quality\n    const quality = this.calculateOverallQuality(stability, vibrato, breathiness, consistency);\n    \n    // Generate recommendations\n    const recommendations = this.generateRecommendations(\n      quality,\n      stability,\n      vibrato,\n      breathiness,\n      consistency\n    );\n\n    return {\n      quality,\n      stability,\n      recommendations\n    };\n  }\n\n  /**\n   * Calculate pitch stability\n   */\n  private calculateStability(): number {\n    if (this.analysisBuffer.length < 10) {\n      return 0.5; // Neutral stability for insufficient data\n    }\n\n    const frequencies = this.analysisBuffer.map(entry => entry.frequency);\n    const validFrequencies = frequencies.filter(freq => freq > 0);\n    \n    if (validFrequencies.length < 5) {\n      return 0.3; // Low stability for sparse data\n    }\n\n    // Calculate coefficient of variation\n    const mean = validFrequencies.reduce((sum, freq) => sum + freq, 0) / validFrequencies.length;\n    const variance = validFrequencies.reduce((sum, freq) => sum + Math.pow(freq - mean, 2), 0) / validFrequencies.length;\n    const standardDeviation = Math.sqrt(variance);\n    const coefficientOfVariation = standardDeviation / mean;\n    \n    // Convert to cents for musical relevance\n    const deviationCents = coefficientOfVariation * 1200;\n    \n    // Map to 0-1 stability score\n    return Math.max(0, Math.min(1, 1 - (deviationCents / 100)));\n  }\n\n  /**\n   * Detect vibrato characteristics\n   */\n  private detectVibrato(): {\n    detected: boolean;\n    rate: number | null;\n    depth: number | null;\n    regularity: number | null;\n  } {\n    if (this.analysisBuffer.length < 30) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    const frequencies = this.analysisBuffer.map(entry => entry.frequency).filter(f => f > 0);\n    if (frequencies.length < 20) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    // Smooth the frequency data\n    const smoothed = this.smoothFrequencies(frequencies, 3);\n    \n    // Find peaks and valleys\n    const extrema = this.findExtrema(smoothed);\n    \n    if (extrema.length < 4) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    // Calculate vibrato rate (cycles per second)\n    const timeSpan = (this.analysisBuffer[this.analysisBuffer.length - 1].timestamp - \n                     this.analysisBuffer[0].timestamp) / 1000;\n    const cycles = extrema.length / 2; // pairs of peaks and valleys\n    const rate = cycles / timeSpan;\n\n    // Calculate vibrato depth (in cents)\n    const depths = [];\n    for (let i = 0; i < extrema.length - 1; i++) {\n      const freq1 = smoothed[extrema[i].index];\n      const freq2 = smoothed[extrema[i + 1].index];\n      if (freq1 > 0 && freq2 > 0) {\n        const cents = Math.abs(1200 * Math.log2(freq1 / freq2));\n        depths.push(cents);\n      }\n    }\n\n    const averageDepth = depths.length > 0 ? \n      depths.reduce((sum, depth) => sum + depth, 0) / depths.length : 0;\n\n    // Calculate regularity (consistency of periods)\n    const periods = [];\n    for (let i = 0; i < extrema.length - 2; i += 2) {\n      const period = extrema[i + 2].index - extrema[i].index;\n      periods.push(period);\n    }\n\n    let regularity = 0;\n    if (periods.length > 2) {\n      const periodMean = periods.reduce((sum, p) => sum + p, 0) / periods.length;\n      const periodVariance = periods.reduce((sum, p) => sum + Math.pow(p - periodMean, 2), 0) / periods.length;\n      regularity = Math.max(0, 1 - (Math.sqrt(periodVariance) / periodMean));\n    }\n\n    // Determine if vibrato is detected\n    const detected = rate >= this.config.vibratoMinRate && \n                    rate <= this.config.vibratoMaxRate &&\n                    averageDepth >= this.config.vibratoMinDepthCents;\n\n    return {\n      detected,\n      rate: rate,\n      depth: averageDepth,\n      regularity\n    };\n  }\n\n  /**\n   * Analyze breathiness from spectral data\n   */\n  private analyzeBreathiness(spectralData: Float32Array): number {\n    // Analyze high-frequency noise content relative to fundamental\n    const fundamentalBin = Math.floor(spectralData.length * 0.1); // Rough estimate\n    const noiseBins = spectralData.slice(Math.floor(spectralData.length * 0.7)); // High frequency content\n    \n    const fundamentalEnergy = spectralData.slice(0, fundamentalBin * 2)\n      .reduce((sum, val) => sum + val * val, 0);\n    \n    const noiseEnergy = noiseBins.reduce((sum, val) => sum + val * val, 0);\n    \n    if (fundamentalEnergy === 0) return 1.0; // Maximum breathiness if no fundamental\n    \n    const noiseRatio = noiseEnergy / fundamentalEnergy;\n    return Math.min(1.0, noiseRatio);\n  }\n\n  /**\n   * Analyze consistency over time\n   */\n  private analyzeConsistency(): number {\n    if (this.analysisBuffer.length < 10) return 0.5;\n\n    const volumes = this.analysisBuffer.map(entry => entry.volume);\n    const clarities = this.analysisBuffer.map(entry => entry.clarity);\n    \n    // Calculate consistency metrics\n    const volumeConsistency = this.calculateConsistencyScore(volumes);\n    const clarityConsistency = this.calculateConsistencyScore(clarities);\n    \n    return (volumeConsistency + clarityConsistency) / 2;\n  }\n\n  /**\n   * Calculate consistency score for an array of values\n   */\n  private calculateConsistencyScore(values: number[]): number {\n    if (values.length < 3) return 0.5;\n\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n    const coefficientOfVariation = Math.sqrt(variance) / (mean || 1);\n    \n    return Math.max(0, Math.min(1, 1 - coefficientOfVariation));\n  }\n\n  /**\n   * Calculate overall voice quality\n   */\n  private calculateOverallQuality(\n    stability: number,\n    vibrato: any,\n    breathiness: number | null,\n    consistency: number\n  ): VoiceQuality {\n    // Weight factors for different aspects\n    const weights = {\n      stability: 0.4,\n      consistency: 0.3,\n      breathiness: 0.2,\n      vibrato: 0.1\n    };\n\n    let score = stability * weights.stability + consistency * weights.consistency;\n    \n    // Breathiness penalty (lower is better for breathiness)\n    if (breathiness !== null) {\n      score += (1 - Math.min(breathiness, 1)) * weights.breathiness;\n    } else {\n      score += 0.7 * weights.breathiness; // Neutral if no data\n    }\n    \n    // Vibrato bonus for controlled vibrato\n    if (vibrato.detected && vibrato.regularity > 0.7) {\n      score += 0.9 * weights.vibrato;\n    } else if (vibrato.detected) {\n      score += 0.6 * weights.vibrato;\n    } else {\n      score += 0.5 * weights.vibrato;\n    }\n\n    // Map score to quality levels\n    if (score >= 0.85) return VoiceQuality.EXCELLENT;\n    if (score >= 0.7) return VoiceQuality.GOOD;\n    if (score >= 0.5) return VoiceQuality.FAIR;\n    return VoiceQuality.POOR;\n  }\n\n  /**\n   * Generate recommendations based on analysis\n   */\n  private generateRecommendations(\n    quality: VoiceQuality,\n    stability: number,\n    vibrato: any,\n    breathiness: number | null,\n    consistency: number\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // Stability recommendations\n    if (stability < 0.5) {\n      recommendations.push('音程の安定性を向上させるため、ゆっくりとした発声練習を行ってください');\n      recommendations.push('腹式呼吸を意識して、息の流れを一定に保つ練習をしてください');\n    } else if (stability < 0.7) {\n      recommendations.push('音程の微調整練習で、より正確なピッチコントロールを目指しましょう');\n    }\n\n    // Consistency recommendations\n    if (consistency < 0.5) {\n      recommendations.push('音量と音質の一貫性を保つため、定期的な発声練習を継続してください');\n      recommendations.push('録音を聞き返して、自分の声の特徴を把握しましょう');\n    }\n\n    // Breathiness recommendations\n    if (breathiness !== null && breathiness > 0.6) {\n      recommendations.push('声の息漏れが気になります。発声時の喉の締まりを意識してください');\n      recommendations.push('ハミング練習で、クリアな声質を目指しましょう');\n    }\n\n    // Vibrato recommendations\n    if (vibrato.detected) {\n      if (vibrato.regularity < 0.5) {\n        recommendations.push('ビブラートの規則性を改善するため、メトロノームに合わせた練習をしてください');\n      } else if (vibrato.rate > 7.5) {\n        recommendations.push('ビブラートの速度が速すぎます。よりゆったりとしたビブラートを練習してください');\n      }\n    } else if (quality === VoiceQuality.GOOD || quality === VoiceQuality.EXCELLENT) {\n      recommendations.push('美しいビブラートの習得に挑戦してみましょう');\n    }\n\n    // General recommendations based on quality\n    if (quality === VoiceQuality.POOR) {\n      recommendations.push('基礎的な発声練習から始めることをお勧めします');\n      recommendations.push('専門的な指導を受けることを検討してください');\n    } else if (quality === VoiceQuality.EXCELLENT) {\n      recommendations.push('素晴らしい声質です。この状態を維持する練習を続けてください');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Smooth frequency data using moving average\n   */\n  private smoothFrequencies(frequencies: number[], windowSize: number): number[] {\n    const smoothed: number[] = [];\n    \n    for (let i = 0; i < frequencies.length; i++) {\n      let sum = 0;\n      let count = 0;\n      \n      const start = Math.max(0, i - Math.floor(windowSize / 2));\n      const end = Math.min(frequencies.length, i + Math.floor(windowSize / 2) + 1);\n      \n      for (let j = start; j < end; j++) {\n        sum += frequencies[j];\n        count++;\n      }\n      \n      smoothed.push(sum / count);\n    }\n    \n    return smoothed;\n  }\n\n  /**\n   * Find local extrema (peaks and valleys) in frequency data\n   */\n  private findExtrema(data: number[]): Array<{ index: number; value: number; type: 'peak' | 'valley' }> {\n    const extrema: Array<{ index: number; value: number; type: 'peak' | 'valley' }> = [];\n    \n    for (let i = 1; i < data.length - 1; i++) {\n      const prev = data[i - 1];\n      const curr = data[i];\n      const next = data[i + 1];\n      \n      if (curr > prev && curr > next) {\n        extrema.push({ index: i, value: curr, type: 'peak' });\n      } else if (curr < prev && curr < next) {\n        extrema.push({ index: i, value: curr, type: 'valley' });\n      }\n    }\n    \n    return extrema;\n  }\n\n  /**\n   * Add data to analysis buffer\n   */\n  private addToBuffer(frequency: number, volume: number, clarity: number, timestamp: number): void {\n    this.analysisBuffer.push({ frequency, volume, clarity, timestamp });\n    \n    // Limit buffer size\n    if (this.analysisBuffer.length > 200) {\n      this.analysisBuffer.shift();\n    }\n  }\n\n  /**\n   * Clean old data from buffer\n   */\n  private cleanBuffer(currentTime: number): void {\n    const cutoffTime = currentTime - this.config.analysisWindowMs;\n    this.analysisBuffer = this.analysisBuffer.filter(entry => entry.timestamp > cutoffTime);\n  }\n\n  /**\n   * Reset analysis buffer\n   */\n  reset(): void {\n    this.analysisBuffer = [];\n  }\n\n  /**\n   * Get current buffer statistics\n   */\n  getBufferStats(): {\n    entryCount: number;\n    timeSpanMs: number;\n    averageVolume: number;\n    averageClarity: number;\n  } {\n    if (this.analysisBuffer.length === 0) {\n      return { entryCount: 0, timeSpanMs: 0, averageVolume: 0, averageClarity: 0 };\n    }\n\n    const volumes = this.analysisBuffer.map(entry => entry.volume);\n    const clarities = this.analysisBuffer.map(entry => entry.clarity);\n    const timeSpan = this.analysisBuffer[this.analysisBuffer.length - 1].timestamp - this.analysisBuffer[0].timestamp;\n\n    return {\n      entryCount: this.analysisBuffer.length,\n      timeSpanMs: timeSpan,\n      averageVolume: volumes.reduce((sum, vol) => sum + vol, 0) / volumes.length,\n      averageClarity: clarities.reduce((sum, clarity) => sum + clarity, 0) / clarities.length\n    };\n  }\n}","/**\n * CalibrationSystem - Device-specific audio calibration and optimization\n * \n * Automatically calibrates audio processing parameters based on device capabilities\n * Handles microphone sensitivity, noise characteristics, and frequency response\n */\n\nimport type { DeviceSpecs } from '../types';\nimport { DeviceDetection } from '../utils/DeviceDetection';\n\nexport class CalibrationSystem {\n  private deviceSpecs: DeviceSpecs;\n  private calibrationData: {\n    volumeOffset: number;\n    frequencyResponse: { [frequency: number]: number };\n    noiseProfile: { [frequency: number]: number };\n    optimalSettings: {\n      sensitivity: number;\n      noiseGate: number;\n      filterSettings: any;\n    };\n  } | null = null;\n\n  private isCalibrated = false;\n  private calibrationInProgress = false;\n\n  constructor() {\n    this.deviceSpecs = DeviceDetection.getDeviceSpecs();\n  }\n\n  /**\n   * Perform automatic calibration\n   */\n  async calibrate(audioContext: AudioContext, mediaStream: MediaStream): Promise<{\n    success: boolean;\n    calibrationData: any;\n    recommendedSettings: any;\n    error?: Error;\n  }> {\n    if (this.calibrationInProgress) {\n      throw new Error('Calibration already in progress');\n    }\n\n    this.calibrationInProgress = true;\n\n    try {\n      console.log('🎛️ [CalibrationSystem] Starting device calibration');\n\n      // Step 1: Measure background noise\n      const noiseProfile = await this.measureBackgroundNoise(audioContext, mediaStream);\n\n      // Step 2: Calibrate volume levels\n      const volumeCalibration = await this.calibrateVolumeLevels(audioContext, mediaStream);\n\n      // Step 3: Measure frequency response (simplified)\n      const frequencyResponse = await this.measureFrequencyResponse(audioContext, mediaStream);\n\n      // Step 4: Determine optimal settings\n      const optimalSettings = this.calculateOptimalSettings(\n        noiseProfile,\n        volumeCalibration,\n        frequencyResponse\n      );\n\n      this.calibrationData = {\n        volumeOffset: volumeCalibration.offset,\n        frequencyResponse,\n        noiseProfile,\n        optimalSettings\n      };\n\n      this.isCalibrated = true;\n      this.calibrationInProgress = false;\n\n      console.log('✅ [CalibrationSystem] Calibration completed successfully');\n\n      return {\n        success: true,\n        calibrationData: this.calibrationData,\n        recommendedSettings: optimalSettings\n      };\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Calibration failed:', error);\n      this.calibrationInProgress = false;\n      \n      return {\n        success: false,\n        calibrationData: null,\n        recommendedSettings: this.getDefaultSettings(),\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * Measure background noise levels\n   */\n  private async measureBackgroundNoise(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 2000\n  ): Promise<{ [frequency: number]: number }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 2048;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Float32Array(bufferLength);\n      const measurements: Float32Array[] = [];\n\n      const startTime = Date.now();\n\n      const measureNoise = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Calculate average noise profile\n          const avgNoise: { [frequency: number]: number } = {};\n          \n          for (let bin = 0; bin < bufferLength; bin++) {\n            const frequency = (bin * audioContext.sampleRate) / (analyser.fftSize);\n            let sum = 0;\n            \n            for (const measurement of measurements) {\n              sum += measurement[bin];\n            }\n            \n            avgNoise[Math.round(frequency)] = sum / measurements.length;\n          }\n\n          source.disconnect();\n          resolve(avgNoise);\n          return;\n        }\n\n        analyser.getFloatFrequencyData(dataArray);\n        measurements.push(new Float32Array(dataArray));\n        \n        setTimeout(measureNoise, 100);\n      };\n\n      measureNoise();\n    });\n  }\n\n  /**\n   * Calibrate volume levels\n   */\n  private async calibrateVolumeLevels(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 3000\n  ): Promise<{ offset: number; range: { min: number; max: number } }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 1024;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.fftSize;\n      const dataArray = new Float32Array(bufferLength);\n      const volumeMeasurements: number[] = [];\n\n      const startTime = Date.now();\n\n      const measureVolume = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Analyze volume distribution\n          volumeMeasurements.sort((a, b) => a - b);\n          \n          const min = volumeMeasurements[0] || 0;\n          const max = volumeMeasurements[volumeMeasurements.length - 1] || 1;\n          const median = volumeMeasurements[Math.floor(volumeMeasurements.length / 2)] || 0.5;\n          \n          // Calculate offset to center dynamic range\n          const targetCenter = 0.3; // Aim for 30% as comfortable speaking level\n          const offset = targetCenter - median;\n\n          source.disconnect();\n          resolve({\n            offset,\n            range: { min, max }\n          });\n          return;\n        }\n\n        analyser.getFloatTimeDomainData(dataArray);\n        \n        // Calculate RMS\n        let sum = 0;\n        for (let i = 0; i < bufferLength; i++) {\n          sum += dataArray[i] * dataArray[i];\n        }\n        const rms = Math.sqrt(sum / bufferLength);\n        volumeMeasurements.push(rms);\n        \n        setTimeout(measureVolume, 50);\n      };\n\n      measureVolume();\n    });\n  }\n\n  /**\n   * Measure frequency response (simplified version)\n   */\n  private async measureFrequencyResponse(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 5000\n  ): Promise<{ [frequency: number]: number }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 4096;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Float32Array(bufferLength);\n      const responseMap: { [frequency: number]: number[] } = {};\n\n      const startTime = Date.now();\n\n      const measureResponse = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Calculate average response for each frequency\n          const avgResponse: { [frequency: number]: number } = {};\n          \n          Object.keys(responseMap).forEach(freqStr => {\n            const frequency = parseInt(freqStr);\n            const measurements = responseMap[frequency];\n            const avg = measurements.reduce((sum, val) => sum + val, 0) / measurements.length;\n            avgResponse[frequency] = avg;\n          });\n\n          source.disconnect();\n          resolve(avgResponse);\n          return;\n        }\n\n        analyser.getFloatFrequencyData(dataArray);\n        \n        // Store measurements for key frequencies\n        for (let bin = 0; bin < bufferLength; bin++) {\n          const frequency = Math.round((bin * audioContext.sampleRate) / (analyser.fftSize));\n          \n          // Focus on vocal range\n          if (frequency >= 80 && frequency <= 1000) {\n            if (!responseMap[frequency]) {\n              responseMap[frequency] = [];\n            }\n            responseMap[frequency].push(dataArray[bin]);\n          }\n        }\n        \n        setTimeout(measureResponse, 100);\n      };\n\n      measureResponse();\n    });\n  }\n\n  /**\n   * Calculate optimal settings based on calibration data\n   */\n  private calculateOptimalSettings(\n    noiseProfile: { [frequency: number]: number },\n    volumeCalibration: any,\n    frequencyResponse: { [frequency: number]: number }\n  ): any {\n    const baseSettings = this.getDefaultSettings();\n\n    // Adjust sensitivity based on volume calibration\n    const sensitivityAdjustment = Math.max(0.5, Math.min(2.0, 1.0 - volumeCalibration.offset));\n    const adjustedSensitivity = baseSettings.sensitivity * sensitivityAdjustment;\n\n    // Adjust noise gate based on background noise\n    const noiseFrequencies = Object.keys(noiseProfile).map(f => parseInt(f));\n    const vocalRangeNoise = noiseFrequencies\n      .filter(f => f >= 100 && f <= 800)\n      .map(f => noiseProfile[f]);\n    \n    const avgNoise = vocalRangeNoise.length > 0 ? \n      vocalRangeNoise.reduce((sum, val) => sum + val, 0) / vocalRangeNoise.length : -60;\n    \n    const noiseGateAdjustment = Math.max(-20, avgNoise + 10); // 10dB above average noise\n    const adjustedNoiseGate = Math.max(baseSettings.noiseGate, Math.abs(noiseGateAdjustment) / 1000);\n\n    // Analyze frequency response for filter adjustments\n    const frequencyKeys = Object.keys(frequencyResponse).map(f => parseInt(f)).sort((a, b) => a - b);\n    const responseLevels = frequencyKeys.map(f => frequencyResponse[f]);\n    \n    // Simple frequency response correction\n    const lowFreqResponse = responseLevels.slice(0, Math.floor(responseLevels.length * 0.3));\n    const midFreqResponse = responseLevels.slice(\n      Math.floor(responseLevels.length * 0.3),\n      Math.floor(responseLevels.length * 0.7)\n    );\n    const highFreqResponse = responseLevels.slice(Math.floor(responseLevels.length * 0.7));\n\n    const lowAvg = lowFreqResponse.reduce((sum, val) => sum + val, 0) / lowFreqResponse.length;\n    const midAvg = midFreqResponse.reduce((sum, val) => sum + val, 0) / midFreqResponse.length;\n    const highAvg = highFreqResponse.reduce((sum, val) => sum + val, 0) / highFreqResponse.length;\n\n    return {\n      sensitivity: Math.round(adjustedSensitivity * 10) / 10,\n      noiseGate: Math.round(adjustedNoiseGate * 1000) / 1000,\n      volumeOffset: volumeCalibration.offset,\n      filterSettings: {\n        highpassFreq: lowAvg < (midAvg - 5) ? 100 : 80, // Stronger highpass if low freq is weak\n        lowpassFreq: highAvg > (midAvg + 3) ? 600 : 800, // Lower cutoff if high freq is strong\n        notchFreq: 60, // Standard power line frequency\n        highpassQ: 0.7,\n        lowpassQ: 0.7,\n        notchQ: 10.0\n      },\n      deviceAdjustments: {\n        lowFreqCompensation: Math.max(0.8, Math.min(1.5, midAvg / (lowAvg || -60))),\n        highFreqCompensation: Math.max(0.8, Math.min(1.2, midAvg / (highAvg || -60)))\n      }\n    };\n  }\n\n  /**\n   * Get default settings for current device\n   */\n  private getDefaultSettings(): any {\n    return {\n      sensitivity: this.deviceSpecs.sensitivity,\n      noiseGate: this.deviceSpecs.noiseGate,\n      volumeOffset: 0,\n      filterSettings: {\n        highpassFreq: 80,\n        lowpassFreq: 800,\n        notchFreq: 60,\n        highpassQ: 0.7,\n        lowpassQ: 0.7,\n        notchQ: 10.0\n      }\n    };\n  }\n\n  /**\n   * Apply calibrated settings to audio processing\n   */\n  applyCalibration(audioProcessor: any): boolean {\n    if (!this.isCalibrated || !this.calibrationData) {\n      console.warn('⚠️ [CalibrationSystem] No calibration data available');\n      return false;\n    }\n\n    try {\n      const settings = this.calibrationData.optimalSettings;\n      \n      // Apply settings to audio processor\n      if (audioProcessor.setSensitivity) {\n        audioProcessor.setSensitivity(settings.sensitivity);\n      }\n      \n      if (audioProcessor.setNoiseGate) {\n        audioProcessor.setNoiseGate(settings.noiseGate);\n      }\n      \n      if (audioProcessor.updateFilterSettings) {\n        audioProcessor.updateFilterSettings(settings.filterSettings);\n      }\n\n      console.log('✅ [CalibrationSystem] Calibration applied successfully');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to apply calibration:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get calibration status\n   */\n  getCalibrationStatus(): {\n    isCalibrated: boolean;\n    inProgress: boolean;\n    deviceSpecs: DeviceSpecs;\n    calibrationData: any;\n  } {\n    return {\n      isCalibrated: this.isCalibrated,\n      inProgress: this.calibrationInProgress,\n      deviceSpecs: this.deviceSpecs,\n      calibrationData: this.calibrationData\n    };\n  }\n\n  /**\n   * Reset calibration\n   */\n  reset(): void {\n    this.isCalibrated = false;\n    this.calibrationInProgress = false;\n    this.calibrationData = null;\n    \n    console.log('🔄 [CalibrationSystem] Calibration reset');\n  }\n\n  /**\n   * Save calibration data to localStorage\n   */\n  saveCalibration(): boolean {\n    if (!this.isCalibrated || !this.calibrationData) {\n      return false;\n    }\n\n    try {\n      const calibrationKey = `pitchpro_calibration_${this.deviceSpecs.deviceType}`;\n      const dataToSave = {\n        deviceSpecs: this.deviceSpecs,\n        calibrationData: this.calibrationData,\n        timestamp: Date.now()\n      };\n\n      localStorage.setItem(calibrationKey, JSON.stringify(dataToSave));\n      console.log('💾 [CalibrationSystem] Calibration saved');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to save calibration:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Load calibration data from localStorage\n   */\n  loadCalibration(): boolean {\n    try {\n      const calibrationKey = `pitchpro_calibration_${this.deviceSpecs.deviceType}`;\n      const savedData = localStorage.getItem(calibrationKey);\n      \n      if (!savedData) {\n        return false;\n      }\n\n      const parsedData = JSON.parse(savedData);\n      \n      // Check if calibration is recent (within 7 days)\n      const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days\n      if (Date.now() - parsedData.timestamp > maxAge) {\n        console.log('⏰ [CalibrationSystem] Saved calibration is too old, ignoring');\n        return false;\n      }\n\n      // Verify device compatibility\n      if (parsedData.deviceSpecs.deviceType !== this.deviceSpecs.deviceType) {\n        console.log('📱 [CalibrationSystem] Device type mismatch, ignoring saved calibration');\n        return false;\n      }\n\n      this.calibrationData = parsedData.calibrationData;\n      this.isCalibrated = true;\n      \n      console.log('📂 [CalibrationSystem] Calibration loaded successfully');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to load calibration:', error);\n      return false;\n    }\n  }\n}","/**\n * FrequencyUtils - Comprehensive Frequency Conversion and Musical Analysis Utilities\n * \n * @description Provides essential utilities for converting between frequencies, musical notes,\n * cents deviation, and MIDI values. Includes advanced musical interval calculations and\n * frequency analysis functions optimized for pitch detection and music applications.\n * \n * **Key Features:**\n * - Frequency ↔ MIDI note conversion with A4=440Hz reference\n * - Musical note name resolution with enharmonic support\n * - Cents deviation calculation for pitch accuracy\n * - Musical interval analysis and recognition\n * - Octave detection and normalization\n * \n * @example\n * ```typescript\n * // Basic frequency conversion\n * const note = FrequencyUtils.frequencyToNote(440);\n * console.log(note); // { name: 'A', octave: 4, midi: 69, frequency: 440 }\n * \n * // Pitch accuracy analysis\n * const cents = FrequencyUtils.frequencyToCents(445, 440);\n * console.log(cents); // +19.56 cents sharp\n * \n * // Musical interval calculation\n * const interval = FrequencyUtils.getInterval(523.25, 261.63);\n * console.log(interval); // Perfect octave\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\n\nexport class FrequencyUtils {\n  /** Standard reference frequency for A4 note (440 Hz) */\n  static readonly A4_FREQUENCY = 440;\n  \n  /** MIDI note number for A4 (69) */\n  static readonly A4_MIDI_NUMBER = 69;\n  \n  /** Sharp note names in chromatic order */\n  static readonly NOTE_NAMES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  \n  /** Flat note names in chromatic order */\n  static readonly FLAT_NOTE_NAMES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\n  \n  /** Common musical intervals mapped to semitone values */\n  static readonly INTERVALS = {\n    unison: 0,\n    minorSecond: 1,\n    majorSecond: 2,\n    minorThird: 3,\n    majorThird: 4,\n    perfectFourth: 5,\n    tritone: 6,\n    perfectFifth: 7,\n    minorSixth: 8,\n    majorSixth: 9,\n    minorSeventh: 10,\n    majorSeventh: 11,\n    octave: 12\n  };\n\n  /**\n   * Converts frequency in Hz to MIDI note number\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns MIDI note number (0-127, where 69 = A4 = 440Hz)\n   * \n   * @example\n   * ```typescript\n   * const midiNote = FrequencyUtils.frequencyToMidi(440);\n   * console.log(midiNote); // 69 (A4)\n   * \n   * const midiNote2 = FrequencyUtils.frequencyToMidi(261.63);\n   * console.log(midiNote2); // 60 (C4)\n   * ```\n   */\n  static frequencyToMidi(frequency: number): number {\n    if (frequency <= 0) return 0;\n    return Math.round(12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER);\n  }\n\n  /**\n   * Converts MIDI note number to frequency in Hz\n   * \n   * @param midiNumber - MIDI note number (0-127)\n   * @returns Frequency in Hz\n   * \n   * @example\n   * ```typescript\n   * const frequency = FrequencyUtils.midiToFrequency(69);\n   * console.log(frequency); // 440 (A4)\n   * \n   * const frequency2 = FrequencyUtils.midiToFrequency(60);\n   * console.log(frequency2); // 261.63 (C4)\n   * ```\n   */\n  static midiToFrequency(midiNumber: number): number {\n    return FrequencyUtils.A4_FREQUENCY * Math.pow(2, (midiNumber - FrequencyUtils.A4_MIDI_NUMBER) / 12);\n  }\n\n  /**\n   * Converts frequency to musical note with octave detection and enharmonic support\n   * \n   * @param frequency - Input frequency in Hz\n   * @param useFlats - Use flat notation instead of sharps (default: false)\n   * @returns Musical note object with name, octave, MIDI number, and exact frequency\n   * \n   * @example\n   * ```typescript\n   * const note1 = FrequencyUtils.frequencyToNote(440);\n   * console.log(note1); // { name: 'A4', octave: 4, midi: 69, frequency: 440 }\n   * \n   * const note2 = FrequencyUtils.frequencyToNote(466.16, true);\n   * console.log(note2); // { name: 'Bb4', octave: 4, midi: 70, frequency: 466.164... }\n   * \n   * // Invalid frequency handling\n   * const invalid = FrequencyUtils.frequencyToNote(-10);\n   * console.log(invalid); // { name: '--', octave: 0, midi: 0, frequency: 0 }\n   * ```\n   */\n  static frequencyToNote(frequency: number, useFlats = false): MusicalNote {\n    if (frequency <= 0) {\n      return {\n        name: '--',\n        octave: 0,\n        midi: 0,\n        frequency: 0\n      };\n    }\n\n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    const noteNames = useFlats ? FrequencyUtils.FLAT_NOTE_NAMES : FrequencyUtils.NOTE_NAMES;\n    \n    const noteIndex = (midiNumber - 12) % 12; // C0 = MIDI 12\n    const octave = Math.floor((midiNumber - 12) / 12);\n    const noteName = noteNames[noteIndex];\n    \n    return {\n      name: noteName + octave,\n      octave,\n      midi: midiNumber,\n      frequency: FrequencyUtils.midiToFrequency(midiNumber)\n    };\n  }\n\n  /**\n   * Calculates cents deviation from the nearest semitone for pitch accuracy analysis\n   * \n   * @description Converts frequency to cents deviation, where 100 cents = 1 semitone.\n   * Positive values indicate sharp pitch, negative values indicate flat pitch.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns Cents deviation from nearest semitone (-50 to +50 cents)\n   * \n   * @example\n   * ```typescript\n   * const cents1 = FrequencyUtils.frequencyToCents(440);\n   * console.log(cents1); // 0 (A4 is perfectly in tune)\n   * \n   * const cents2 = FrequencyUtils.frequencyToCents(445);\n   * console.log(cents2); // +20 (20 cents sharp)\n   * \n   * const cents3 = FrequencyUtils.frequencyToCents(435);\n   * console.log(cents3); // -20 (20 cents flat)\n   * ```\n   */\n  static frequencyToCents(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = 12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER;\n    const nearestMidi = Math.round(midiNumber);\n    const centsDeviation = (midiNumber - nearestMidi) * 100;\n    \n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Converts cents to frequency ratio for interval calculations\n   * \n   * @description Calculates the frequency multiplier for a given cent value.\n   * Useful for transposition and interval calculations.\n   * \n   * @param cents - Cents value (100 cents = 1 semitone)\n   * @returns Frequency ratio multiplier\n   * \n   * @example\n   * ```typescript\n   * const ratio1 = FrequencyUtils.centsToRatio(1200);\n   * console.log(ratio1); // 2.0 (1200 cents = 1 octave = 2x frequency)\n   * \n   * const ratio2 = FrequencyUtils.centsToRatio(700);\n   * console.log(ratio2); // ~1.498 (700 cents ≈ perfect fifth)\n   * \n   * // Apply ratio to transpose frequency\n   * const newFreq = 440 * FrequencyUtils.centsToRatio(100); // 440 * semitone ratio\n   * console.log(newFreq); // ~466.16 (A# above A4)\n   * ```\n   */\n  static centsToRatio(cents: number): number {\n    return Math.pow(2, cents / 1200);\n  }\n\n  /**\n   * Converts frequency ratio to cents for interval analysis\n   * \n   * @description Calculates the cent value for a given frequency ratio.\n   * Useful for analyzing musical intervals and pitch relationships.\n   * \n   * @param ratio - Frequency ratio (higher frequency / lower frequency)\n   * @returns Cents value (positive for ascending intervals)\n   * \n   * @example\n   * ```typescript\n   * const cents1 = FrequencyUtils.ratioToCents(2.0);\n   * console.log(cents1); // 1200 (octave)\n   * \n   * const cents2 = FrequencyUtils.ratioToCents(1.5);\n   * console.log(cents2); // 702 (perfect fifth)\n   * \n   * const cents3 = FrequencyUtils.ratioToCents(880 / 440);\n   * console.log(cents3); // 1200 (A4 to A5 = octave)\n   * ```\n   */\n  static ratioToCents(ratio: number): number {\n    if (ratio <= 0) return 0;\n    return Math.round(1200 * Math.log2(ratio));\n  }\n\n  /**\n   * Finds the exact frequency of the closest equal temperament note\n   * \n   * @description Rounds the input frequency to the nearest semitone frequency\n   * in equal temperament tuning. Useful for pitch correction and reference.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns Exact frequency of the closest note in Hz\n   * \n   * @example\n   * ```typescript\n   * const closest1 = FrequencyUtils.getClosestNoteFrequency(445);\n   * console.log(closest1); // 440 (closest to A4)\n   * \n   * const closest2 = FrequencyUtils.getClosestNoteFrequency(470);\n   * console.log(closest2); // 466.16 (closest to A#4/Bb4)\n   * \n   * const closest3 = FrequencyUtils.getClosestNoteFrequency(260);\n   * console.log(closest3); // 261.63 (closest to C4)\n   * ```\n   */\n  static getClosestNoteFrequency(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Calculates the absolute interval between two frequencies in semitones\n   * \n   * @description Determines the musical interval size between two frequencies,\n   * always returning a positive value regardless of frequency order.\n   * \n   * @param frequency1 - First frequency in Hz\n   * @param frequency2 - Second frequency in Hz\n   * @returns Absolute interval in semitones (always positive)\n   * \n   * @example\n   * ```typescript\n   * const interval1 = FrequencyUtils.getInterval(440, 880);\n   * console.log(interval1); // 12 (octave)\n   * \n   * const interval2 = FrequencyUtils.getInterval(880, 440);\n   * console.log(interval2); // 12 (same interval, order doesn't matter)\n   * \n   * const interval3 = FrequencyUtils.getInterval(440, 659.25);\n   * console.log(interval3); // 7 (perfect fifth)\n   * ```\n   */\n  static getInterval(frequency1: number, frequency2: number): number {\n    if (frequency1 <= 0 || frequency2 <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(frequency1);\n    const midi2 = FrequencyUtils.frequencyToMidi(frequency2);\n    \n    return Math.abs(midi2 - midi1);\n  }\n\n  /**\n   * Calculates the signed interval between two frequencies with direction\n   * \n   * @description Determines the musical interval with direction information.\n   * Positive values indicate ascending intervals, negative values indicate descending.\n   * \n   * @param fromFrequency - Starting frequency in Hz\n   * @param toFrequency - Target frequency in Hz\n   * @returns Signed interval in semitones (positive = ascending, negative = descending)\n   * \n   * @example\n   * ```typescript\n   * const interval1 = FrequencyUtils.getSignedInterval(440, 880);\n   * console.log(interval1); // +12 (ascending octave)\n   * \n   * const interval2 = FrequencyUtils.getSignedInterval(880, 440);\n   * console.log(interval2); // -12 (descending octave)\n   * \n   * const interval3 = FrequencyUtils.getSignedInterval(261.63, 392);\n   * console.log(interval3); // +7 (ascending perfect fifth)\n   * ```\n   */\n  static getSignedInterval(fromFrequency: number, toFrequency: number): number {\n    if (fromFrequency <= 0 || toFrequency <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(fromFrequency);\n    const midi2 = FrequencyUtils.frequencyToMidi(toFrequency);\n    \n    return midi2 - midi1;\n  }\n\n  /**\n   * Provides comprehensive musical interval information and analysis\n   * \n   * @description Converts semitone count to detailed interval information including\n   * name, cents value, and frequency ratio. Handles compound intervals with octaves.\n   * \n   * @param semitones - Interval size in semitones\n   * @returns Musical interval object with name, semitones, cents, and ratio\n   * \n   * @example\n   * ```typescript\n   * const fifth = FrequencyUtils.getIntervalInfo(7);\n   * console.log(fifth);\n   * // { name: 'Perfect Fifth', semitones: 7, cents: 700, ratio: 1.498... }\n   * \n   * const compound = FrequencyUtils.getIntervalInfo(19);\n   * console.log(compound);\n   * // { name: 'Perfect Fifth + 1 octave(s)', semitones: 19, cents: 1900, ratio: 2.996... }\n   * \n   * const unison = FrequencyUtils.getIntervalInfo(0);\n   * console.log(unison);\n   * // { name: 'Perfect Unison', semitones: 0, cents: 0, ratio: 1.0 }\n   * ```\n   */\n  static getIntervalInfo(semitones: number): MusicalInterval {\n    const intervalNames = {\n      0: 'Perfect Unison',\n      1: 'Minor Second',\n      2: 'Major Second',\n      3: 'Minor Third',\n      4: 'Major Third',\n      5: 'Perfect Fourth',\n      6: 'Tritone',\n      7: 'Perfect Fifth',\n      8: 'Minor Sixth',\n      9: 'Major Sixth',\n      10: 'Minor Seventh',\n      11: 'Major Seventh',\n      12: 'Perfect Octave'\n    };\n\n    const normalizedSemitones = ((semitones % 12) + 12) % 12;\n    const octaves = Math.floor(semitones / 12);\n    \n    const baseName = intervalNames[normalizedSemitones as keyof typeof intervalNames] || 'Unknown';\n    const name = octaves > 0 ? `${baseName} + ${octaves} octave(s)` : baseName;\n    \n    return {\n      name,\n      semitones,\n      cents: semitones * 100,\n      ratio: Math.pow(2, semitones / 12)\n    };\n  }\n\n  /**\n   * Checks if frequency falls within typical human vocal range\n   * \n   * @description Tests whether a frequency is within the fundamental vocal range\n   * of approximately 80Hz to 1100Hz, covering bass to soprano voices.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns True if frequency is within vocal range, false otherwise\n   * \n   * @example\n   * ```typescript\n   * const isVocal1 = FrequencyUtils.isInVocalRange(220);\n   * console.log(isVocal1); // true (A3, typical male voice)\n   * \n   * const isVocal2 = FrequencyUtils.isInVocalRange(50);\n   * console.log(isVocal2); // false (below vocal range)\n   * \n   * const isVocal3 = FrequencyUtils.isInVocalRange(2000);\n   * console.log(isVocal3); // false (above fundamental vocal range)\n   * ```\n   */\n  static isInVocalRange(frequency: number): boolean {\n    // Human vocal range roughly 80Hz to 1100Hz\n    return frequency >= 80 && frequency <= 1100;\n  }\n\n  /**\n   * Checks if frequency falls within standard piano key range\n   * \n   * @description Tests whether a frequency is within the range of a standard\n   * 88-key piano, from A0 (27.5Hz) to C8 (4186Hz).\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns True if frequency is within piano range, false otherwise\n   * \n   * @example\n   * ```typescript\n   * const isPiano1 = FrequencyUtils.isInPianoRange(440);\n   * console.log(isPiano1); // true (A4, middle of piano range)\n   * \n   * const isPiano2 = FrequencyUtils.isInPianoRange(20);\n   * console.log(isPiano2); // false (below piano range)\n   * \n   * const isPiano3 = FrequencyUtils.isInPianoRange(5000);\n   * console.log(isPiano3); // false (above piano range)\n   * ```\n   */\n  static isInPianoRange(frequency: number): boolean {\n    // Piano range A0 (27.5Hz) to C8 (4186Hz)\n    return frequency >= 27.5 && frequency <= 4186;\n  }\n\n  /**\n   * Retrieves frequency range specifications for common instruments\n   * \n   * @description Returns the typical fundamental frequency range for various\n   * instruments and voice types. Useful for instrument-specific audio processing.\n   * \n   * @param instrument - Instrument name (piano, guitar, violin, cello, voice_bass, voice_tenor, voice_alto, voice_soprano)\n   * @returns Object with min/max frequencies in Hz, or null if instrument not found\n   * \n   * @example\n   * ```typescript\n   * const guitarRange = FrequencyUtils.getInstrumentRange('guitar');\n   * console.log(guitarRange); // { min: 82.4, max: 1397 } (E2 to F6)\n   * \n   * const bassRange = FrequencyUtils.getInstrumentRange('voice_bass');\n   * console.log(bassRange); // { min: 87.3, max: 349 } (F2 to F4)\n   * \n   * const unknown = FrequencyUtils.getInstrumentRange('kazoo');\n   * console.log(unknown); // null (instrument not in database)\n   * ```\n   */\n  static getInstrumentRange(instrument: string): { min: number; max: number } | null {\n    const ranges = {\n      piano: { min: 27.5, max: 4186 },\n      guitar: { min: 82.4, max: 1397 }, // E2 to F6\n      violin: { min: 196, max: 3520 },  // G3 to A7\n      cello: { min: 65.4, max: 1397 },  // C2 to F6\n      voice_bass: { min: 87.3, max: 349 }, // F2 to F4\n      voice_tenor: { min: 131, max: 523 }, // C3 to C5\n      voice_alto: { min: 175, max: 698 },  // F3 to F5\n      voice_soprano: { min: 262, max: 1047 } // C4 to C6\n    };\n\n    return ranges[instrument as keyof typeof ranges] || null;\n  }\n\n  /**\n   * Generates chromatic scale frequencies from a base frequency\n   * \n   * @description Creates an array of frequencies representing a chromatic scale\n   * (all 12 semitones) starting from the given base frequency.\n   * \n   * @param baseFrequency - Starting frequency in Hz\n   * @param octaves - Number of octaves to generate (default: 1)\n   * @returns Array of frequencies representing the chromatic scale\n   * \n   * @example\n   * ```typescript\n   * const chromaticC4 = FrequencyUtils.generateChromaticScale(261.63, 1);\n   * console.log(chromaticC4);\n   * // [261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392.00, 415.30, 440.00, 466.16, 493.88, 523.25]\n   * \n   * const chromatic2Oct = FrequencyUtils.generateChromaticScale(440, 2);\n   * console.log(chromatic2Oct.length); // 24 (2 octaves × 12 semitones)\n   * ```\n   */\n  static generateChromaticScale(baseFrequency: number, octaves = 1): number[] {\n    const frequencies: number[] = [];\n    \n    for (let i = 0; i < 12 * octaves; i++) {\n      const frequency = baseFrequency * Math.pow(2, i / 12);\n      frequencies.push(frequency);\n    }\n    \n    return frequencies;\n  }\n\n  /**\n   * Generates major scale frequencies from a base frequency\n   * \n   * @description Creates an array of frequencies representing a major scale\n   * using the pattern W-W-H-W-W-W-H (whole step, half step intervals).\n   * \n   * @param baseFrequency - Starting frequency in Hz (tonic note)\n   * @returns Array of 8 frequencies representing the major scale (including octave)\n   * \n   * @example\n   * ```typescript\n   * const cMajor = FrequencyUtils.generateMajorScale(261.63); // C4 major\n   * console.log(cMajor);\n   * // [261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25]\n   * // [C4,     D4,     E4,     F4,     G4,     A4,     B4,     C5]\n   * \n   * const gMajor = FrequencyUtils.generateMajorScale(392); // G4 major\n   * console.log(gMajor.length); // 8 notes (including octave)\n   * ```\n   */\n  static generateMajorScale(baseFrequency: number): number[] {\n    // Major scale pattern: W-W-H-W-W-W-H (W=whole step=2 semitones, H=half step=1 semitone)\n    const pattern = [0, 2, 4, 5, 7, 9, 11, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Generates natural minor scale frequencies from a base frequency\n   * \n   * @description Creates an array of frequencies representing a natural minor scale\n   * using the pattern W-H-W-W-H-W-W (whole step, half step intervals).\n   * \n   * @param baseFrequency - Starting frequency in Hz (tonic note)\n   * @returns Array of 8 frequencies representing the natural minor scale (including octave)\n   * \n   * @example\n   * ```typescript\n   * const aMinor = FrequencyUtils.generateMinorScale(440); // A4 minor\n   * console.log(aMinor);\n   * // [440.00, 493.88, 523.25, 587.33, 659.25, 698.46, 783.99, 880.00]\n   * // [A4,     B4,     C5,     D5,     E5,     F5,     G5,     A5]\n   * \n   * const dMinor = FrequencyUtils.generateMinorScale(293.66); // D4 minor\n   * console.log(dMinor.length); // 8 notes (including octave)\n   * ```\n   */\n  static generateMinorScale(baseFrequency: number): number[] {\n    // Natural minor scale pattern: W-H-W-W-H-W-W\n    const pattern = [0, 2, 3, 5, 7, 8, 10, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Calculates harmonic series frequencies for a given fundamental\n   * \n   * @description Generates the harmonic series by multiplying the fundamental\n   * frequency by integer values. Essential for understanding timbre and overtones.\n   * \n   * @param fundamental - Fundamental frequency in Hz\n   * @param maxHarmonic - Maximum harmonic number to calculate (default: 8)\n   * @returns Array of harmonic frequencies including the fundamental\n   * \n   * @example\n   * ```typescript\n   * const harmonics = FrequencyUtils.findHarmonics(220, 5); // A3 harmonics\n   * console.log(harmonics);\n   * // [220, 440, 660, 880, 1100] (A3, A4, E5, A5, C#6)\n   * \n   * const allHarmonics = FrequencyUtils.findHarmonics(100, 8);\n   * console.log(allHarmonics.length); // 8 harmonics\n   * ```\n   */\n  static findHarmonics(fundamental: number, maxHarmonic = 8): number[] {\n    const harmonics: number[] = [];\n    \n    for (let i = 1; i <= maxHarmonic; i++) {\n      harmonics.push(fundamental * i);\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Analyzes whether a frequency is a harmonic of a fundamental frequency\n   * \n   * @description Tests if the given frequency matches a harmonic of the fundamental\n   * within the specified tolerance. Returns detailed harmonic analysis.\n   * \n   * @param frequency - Frequency to test in Hz\n   * @param fundamental - Fundamental frequency in Hz\n   * @param tolerance - Tolerance for harmonic matching (default: 0.05 = 5%)\n   * @returns Object containing harmonic analysis results\n   * \n   * @example\n   * ```typescript\n   * const result1 = FrequencyUtils.isHarmonic(440, 220);\n   * console.log(result1);\n   * // { isHarmonic: true, harmonicNumber: 2, exactFrequency: 440 }\n   * \n   * const result2 = FrequencyUtils.isHarmonic(665, 220, 0.1);\n   * console.log(result2);\n   * // { isHarmonic: true, harmonicNumber: 3, exactFrequency: 660 } (within 10% tolerance)\n   * \n   * const result3 = FrequencyUtils.isHarmonic(450, 220);\n   * console.log(result3);\n   * // { isHarmonic: false, harmonicNumber: null, exactFrequency: null }\n   * ```\n   */\n  static isHarmonic(frequency: number, fundamental: number, tolerance = 0.05): {\n    isHarmonic: boolean;\n    harmonicNumber: number | null;\n    exactFrequency: number | null;\n  } {\n    if (fundamental <= 0 || frequency <= 0) {\n      return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n    }\n\n    const ratio = frequency / fundamental;\n    const nearestInteger = Math.round(ratio);\n    \n    // Check if the ratio is close to an integer (within tolerance)\n    if (nearestInteger >= 1 && Math.abs(ratio - nearestInteger) <= tolerance) {\n      return {\n        isHarmonic: true,\n        harmonicNumber: nearestInteger,\n        exactFrequency: fundamental * nearestInteger\n      };\n    }\n\n    return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n  }\n\n  /**\n   * Calculate the fundamental frequency from a suspected harmonic\n   */\n  static calculateFundamental(harmonicFrequency: number, harmonicNumber: number): number {\n    if (harmonicNumber <= 0 || harmonicFrequency <= 0) return 0;\n    return harmonicFrequency / harmonicNumber;\n  }\n\n  /**\n   * Convert frequency to scientific pitch notation\n   */\n  static frequencyToScientificPitch(frequency: number): string {\n    const note = FrequencyUtils.frequencyToNote(frequency);\n    return note.name;\n  }\n\n  /**\n   * Convert scientific pitch notation to frequency\n   */\n  static scientificPitchToFrequency(scientificPitch: string): number {\n    const match = scientificPitch.match(/^([A-G][#b]?)(-?\\d+)$/);\n    if (!match) return 0;\n\n    const [, noteName, octaveStr] = match;\n    const octave = parseInt(octaveStr, 10);\n    \n    // Convert note name to semitone offset from C\n    let semitoneOffset = 0;\n    const baseNote = noteName[0];\n    const accidental = noteName.slice(1);\n    \n    const baseOffsets: { [key: string]: number } = {\n      'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11\n    };\n    \n    semitoneOffset = baseOffsets[baseNote] || 0;\n    \n    if (accidental === '#') {\n      semitoneOffset += 1;\n    } else if (accidental === 'b') {\n      semitoneOffset -= 1;\n    }\n    \n    // Calculate MIDI number (C4 = MIDI 60)\n    const midiNumber = (octave + 1) * 12 + semitoneOffset;\n    \n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Format frequency display with appropriate precision\n   */\n  static formatFrequency(frequency: number, decimalPlaces = 1): string {\n    if (frequency === 0) return '0 Hz';\n    if (frequency < 0.1) return '<0.1 Hz';\n    if (frequency >= 10000) return `${Math.round(frequency / 1000)}k Hz`;\n    \n    return `${frequency.toFixed(decimalPlaces)} Hz`;\n  }\n\n  /**\n   * Format cents display with sign\n   */\n  static formatCents(cents: number): string {\n    if (cents === 0) return '0¢';\n    const sign = cents > 0 ? '+' : '';\n    return `${sign}${cents}¢`;\n  }\n}","/**\n * MusicTheory - Musical theory utilities and calculations\n * \n * Provides utilities for scales, chords, intervals, and musical analysis\n * Supports various temperaments and tuning systems\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\nimport { FrequencyUtils } from './FrequencyUtils';\n\nexport class MusicTheory {\n  // Scale patterns (in semitones from root)\n  static readonly SCALE_PATTERNS = {\n    major: [0, 2, 4, 5, 7, 9, 11],\n    naturalMinor: [0, 2, 3, 5, 7, 8, 10],\n    harmonicMinor: [0, 2, 3, 5, 7, 8, 11],\n    melodicMinor: [0, 2, 3, 5, 7, 9, 11],\n    dorian: [0, 2, 3, 5, 7, 9, 10],\n    phrygian: [0, 1, 3, 5, 7, 8, 10],\n    lydian: [0, 2, 4, 6, 7, 9, 11],\n    mixolydian: [0, 2, 4, 5, 7, 9, 10],\n    locrian: [0, 1, 3, 5, 6, 8, 10],\n    pentatonicMajor: [0, 2, 4, 7, 9],\n    pentatonicMinor: [0, 3, 5, 7, 10],\n    blues: [0, 3, 5, 6, 7, 10],\n    chromatic: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  };\n\n  // Chord patterns (in semitones from root)\n  static readonly CHORD_PATTERNS = {\n    major: [0, 4, 7],\n    minor: [0, 3, 7],\n    diminished: [0, 3, 6],\n    augmented: [0, 4, 8],\n    sus2: [0, 2, 7],\n    sus4: [0, 5, 7],\n    major7: [0, 4, 7, 11],\n    minor7: [0, 3, 7, 10],\n    dominant7: [0, 4, 7, 10],\n    majorMaj7: [0, 4, 7, 11],\n    halfDiminished7: [0, 3, 6, 10],\n    diminished7: [0, 3, 6, 9],\n    add9: [0, 4, 7, 14], // 14 = 2 + 12 (octave)\n    major9: [0, 4, 7, 11, 14],\n    minor9: [0, 3, 7, 10, 14]\n  };\n\n  // Circle of fifths\n  static readonly CIRCLE_OF_FIFTHS = [\n    'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'Ab', 'Eb', 'Bb', 'F'\n  ];\n\n  // Interval names\n  static readonly INTERVAL_NAMES = {\n    0: 'Perfect Unison',\n    1: 'Minor Second',\n    2: 'Major Second',\n    3: 'Minor Third',\n    4: 'Major Third',\n    5: 'Perfect Fourth',\n    6: 'Tritone',\n    7: 'Perfect Fifth',\n    8: 'Minor Sixth',\n    9: 'Major Sixth',\n    10: 'Minor Seventh',\n    11: 'Major Seventh',\n    12: 'Perfect Octave'\n  };\n\n  /**\n   * Generate scale from root note\n   */\n  static generateScale(\n    rootFrequency: number, \n    scaleType: keyof typeof MusicTheory.SCALE_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.SCALE_PATTERNS[scaleType];\n    if (!pattern) {\n      throw new Error(`Unknown scale type: ${scaleType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Generate chord from root note\n   */\n  static generateChord(\n    rootFrequency: number,\n    chordType: keyof typeof MusicTheory.CHORD_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.CHORD_PATTERNS[chordType];\n    if (!pattern) {\n      throw new Error(`Unknown chord type: ${chordType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Identify scale from a set of frequencies\n   */\n  static identifyScale(frequencies: number[]): Array<{\n    scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n  }> {\n    if (frequencies.length < 3) {\n      return [];\n    }\n\n    // Convert frequencies to note numbers relative to the lowest note\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const baseFreq = sortedFreqs[0];\n    const intervals = sortedFreqs.map(freq => \n      Math.round(12 * Math.log2(freq / baseFreq))\n    );\n\n    const results: Array<{\n      scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n    }> = [];\n\n    // Test each scale pattern\n    Object.entries(MusicTheory.SCALE_PATTERNS).forEach(([scaleName, pattern]) => {\n      // Test each possible root\n      for (let rootOffset = 0; rootOffset < 12; rootOffset++) {\n        const adjustedPattern = pattern.map(interval => (interval + rootOffset) % 12).sort((a, b) => a - b);\n        const normalizedIntervals = intervals.map(interval => interval % 12).sort((a, b) => a - b);\n        \n        // Calculate confidence based on pattern matching\n        let matches = 0;\n        normalizedIntervals.forEach(interval => {\n          if (adjustedPattern.includes(interval)) {\n            matches++;\n          }\n        });\n\n        const confidence = matches / Math.max(normalizedIntervals.length, adjustedPattern.length);\n        \n        if (confidence > 0.5) { // Only include reasonable matches\n          const rootFreq = baseFreq * Math.pow(2, -rootOffset / 12);\n          results.push({\n            scale: scaleName as keyof typeof MusicTheory.SCALE_PATTERNS,\n            confidence,\n            root: FrequencyUtils.frequencyToNote(rootFreq)\n          });\n        }\n      }\n    });\n\n    // Sort by confidence and return top matches\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 5);\n  }\n\n  /**\n   * Identify chord from frequencies\n   */\n  static identifyChord(frequencies: number[]): Array<{\n    chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n    inversion?: number;\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const results: Array<{\n      chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n      inversion?: number;\n    }> = [];\n\n    // Test each chord pattern\n    Object.entries(MusicTheory.CHORD_PATTERNS).forEach(([chordName, pattern]) => {\n      // Test different inversions\n      for (let inversion = 0; inversion < pattern.length; inversion++) {\n        // Create inverted pattern\n        const invertedPattern = [\n          ...pattern.slice(inversion),\n          ...pattern.slice(0, inversion).map(interval => interval + 12)\n        ];\n\n        // Test each possible bass note as root\n        sortedFreqs.forEach((bassFreq, _bassIndex) => {\n          const intervals = sortedFreqs.map(freq => \n            Math.round(12 * Math.log2(freq / bassFreq))\n          );\n\n          // Calculate confidence\n          let matches = 0;\n          const patternSet = new Set(invertedPattern);\n          intervals.forEach(interval => {\n            const normalizedInterval = interval % 12;\n            if (patternSet.has(normalizedInterval) || patternSet.has(normalizedInterval + 12)) {\n              matches++;\n            }\n          });\n\n          const confidence = matches / Math.max(intervals.length, pattern.length);\n          \n          if (confidence > 0.6) {\n            const rootFreq = inversion === 0 ? bassFreq : \n              bassFreq * Math.pow(2, -pattern[inversion] / 12);\n            \n            results.push({\n              chord: chordName as keyof typeof MusicTheory.CHORD_PATTERNS,\n              confidence,\n              root: FrequencyUtils.frequencyToNote(rootFreq),\n              inversion: inversion > 0 ? inversion : undefined\n            });\n          }\n        });\n      }\n    });\n\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 3);\n  }\n\n  /**\n   * Get the key signature for a given key\n   */\n  static getKeySignature(key: string, mode: 'major' | 'minor' = 'major'): {\n    sharps: string[];\n    flats: string[];\n    accidentalCount: number;\n  } {\n    // Order of sharps: F# C# G# D# A# E# B#\n    const sharpOrder = ['F', 'C', 'G', 'D', 'A', 'E', 'B'];\n    // Order of flats: Bb Eb Ab Db Gb Cb Fb\n    const flatOrder = ['B', 'E', 'A', 'D', 'G', 'C', 'F'];\n    \n    // Major key signatures\n    const majorKeys = {\n      'C': { sharps: 0, flats: 0 },\n      'G': { sharps: 1, flats: 0 },\n      'D': { sharps: 2, flats: 0 },\n      'A': { sharps: 3, flats: 0 },\n      'E': { sharps: 4, flats: 0 },\n      'B': { sharps: 5, flats: 0 },\n      'F#': { sharps: 6, flats: 0 },\n      'C#': { sharps: 7, flats: 0 },\n      'F': { sharps: 0, flats: 1 },\n      'Bb': { sharps: 0, flats: 2 },\n      'Eb': { sharps: 0, flats: 3 },\n      'Ab': { sharps: 0, flats: 4 },\n      'Db': { sharps: 0, flats: 5 },\n      'Gb': { sharps: 0, flats: 6 },\n      'Cb': { sharps: 0, flats: 7 }\n    };\n\n    // Adjust for minor keys (relative minor is 3 semitones below major)\n    let keySignature = majorKeys[key as keyof typeof majorKeys];\n    \n    if (!keySignature && mode === 'minor') {\n      // Find relative major\n      const minorToMajor = {\n        'A': 'C', 'E': 'G', 'B': 'D', 'F#': 'A', 'C#': 'E', 'G#': 'B', 'D#': 'F#', 'A#': 'C#',\n        'D': 'F', 'G': 'Bb', 'C': 'Eb', 'F': 'Ab', 'Bb': 'Db', 'Eb': 'Gb', 'Ab': 'Cb'\n      };\n      \n      const relativeMajor = minorToMajor[key as keyof typeof minorToMajor];\n      if (relativeMajor) {\n        keySignature = majorKeys[relativeMajor as keyof typeof majorKeys];\n      }\n    }\n\n    if (!keySignature) {\n      return { sharps: [], flats: [], accidentalCount: 0 };\n    }\n\n    const sharps = sharpOrder.slice(0, keySignature.sharps).map(note => note + '#');\n    const flats = flatOrder.slice(0, keySignature.flats).map(note => note + 'b');\n    \n    return {\n      sharps,\n      flats,\n      accidentalCount: keySignature.sharps || keySignature.flats\n    };\n  }\n\n  /**\n   * Calculate the harmonic series for a fundamental frequency\n   */\n  static getHarmonicSeries(fundamental: number, harmonicCount: number = 16): MusicalNote[] {\n    const harmonics: MusicalNote[] = [];\n    \n    for (let i = 1; i <= harmonicCount; i++) {\n      const frequency = fundamental * i;\n      harmonics.push(FrequencyUtils.frequencyToNote(frequency));\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Calculate just intonation ratios for common intervals\n   */\n  static getJustIntonationRatios(): { [key: string]: { ratio: number; cents: number } } {\n    return {\n      'unison': { ratio: 1/1, cents: 0 },\n      'minorSecond': { ratio: 16/15, cents: 112 },\n      'majorSecond': { ratio: 9/8, cents: 204 },\n      'minorThird': { ratio: 6/5, cents: 316 },\n      'majorThird': { ratio: 5/4, cents: 386 },\n      'perfectFourth': { ratio: 4/3, cents: 498 },\n      'tritone': { ratio: 45/32, cents: 590 },\n      'perfectFifth': { ratio: 3/2, cents: 702 },\n      'minorSixth': { ratio: 8/5, cents: 814 },\n      'majorSixth': { ratio: 5/3, cents: 884 },\n      'minorSeventh': { ratio: 16/9, cents: 996 },\n      'majorSeventh': { ratio: 15/8, cents: 1088 },\n      'octave': { ratio: 2/1, cents: 1200 }\n    };\n  }\n\n  /**\n   * Convert equal temperament interval to just intonation\n   */\n  static equalTemperamentToJustIntonation(semitones: number): {\n    ratio: number;\n    cents: number;\n    closestJustInterval?: string;\n    centsDeviation?: number;\n  } {\n    const equalTempCents = semitones * 100;\n    const justRatios = MusicTheory.getJustIntonationRatios();\n    \n    // Find closest just intonation interval\n    let closestInterval: string | undefined;\n    let smallestDeviation = Infinity;\n    \n    Object.entries(justRatios).forEach(([intervalName, { cents }]) => {\n      const deviation = Math.abs(equalTempCents - cents);\n      if (deviation < smallestDeviation) {\n        smallestDeviation = deviation;\n        closestInterval = intervalName;\n      }\n    });\n    \n    const ratio = Math.pow(2, semitones / 12);\n    \n    return {\n      ratio,\n      cents: equalTempCents,\n      closestJustInterval: closestInterval,\n      centsDeviation: closestInterval ? smallestDeviation : undefined\n    };\n  }\n\n  /**\n   * Analyze melodic intervals in a sequence of notes\n   */\n  static analyzeMelody(frequencies: number[]): Array<{\n    fromNote: MusicalNote;\n    toNote: MusicalNote;\n    interval: MusicalInterval;\n    direction: 'up' | 'down' | 'same';\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const analysis: Array<{\n      fromNote: MusicalNote;\n      toNote: MusicalNote;\n      interval: MusicalInterval;\n      direction: 'up' | 'down' | 'same';\n    }> = [];\n\n    for (let i = 1; i < frequencies.length; i++) {\n      const fromFreq = frequencies[i - 1];\n      const toFreq = frequencies[i];\n      \n      const fromNote = FrequencyUtils.frequencyToNote(fromFreq);\n      const toNote = FrequencyUtils.frequencyToNote(toFreq);\n      \n      const semitones = FrequencyUtils.getSignedInterval(fromFreq, toFreq);\n      const interval = FrequencyUtils.getIntervalInfo(Math.abs(semitones));\n      \n      const direction = semitones > 0 ? 'up' : semitones < 0 ? 'down' : 'same';\n      \n      analysis.push({\n        fromNote,\n        toNote,\n        interval,\n        direction\n      });\n    }\n\n    return analysis;\n  }\n\n  /**\n   * Generate chord progressions in a given key\n   */\n  static generateChordProgression(\n    key: string, \n    mode: 'major' | 'minor' = 'major',\n    progression: number[] = [1, 4, 5, 1] // Roman numerals as scale degrees\n  ): MusicalNote[][] {\n    const rootFreq = FrequencyUtils.scientificPitchToFrequency(key + '4');\n    if (rootFreq === 0) {\n      throw new Error(`Invalid key: ${key}`);\n    }\n\n    const scale = MusicTheory.generateScale(rootFreq, mode === 'minor' ? 'naturalMinor' : 'major');\n    const chords: MusicalNote[][] = [];\n\n    progression.forEach(degree => {\n      const chordRoot = scale[(degree - 1) % scale.length];\n      const chordType = mode === 'major' \n        ? MusicTheory.getMajorScaleChordType(degree)\n        : MusicTheory.getMinorScaleChordType(degree);\n      \n      const chord = MusicTheory.generateChord(chordRoot.frequency, chordType);\n      chords.push(chord);\n    });\n\n    return chords;\n  }\n\n  /**\n   * Get chord type for scale degree in major scale\n   */\n  private static getMajorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['major', 'minor', 'minor', 'major', 'major', 'minor', 'diminished'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n\n  /**\n   * Get chord type for scale degree in minor scale\n   */\n  private static getMinorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['minor', 'diminished', 'major', 'minor', 'minor', 'major', 'major'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n}","/**\n * PitchPro Audio Processing Library\n * High-precision pitch detection and audio processing for web applications\n * \n * @version 1.1.3\n * @author PitchPro Team\n * @license MIT\n */\n\n// Core exports\nexport { AudioManager } from './core/AudioManager';\nexport { PitchDetector } from './core/PitchDetector';\nexport { NoiseFilter } from './core/NoiseFilter';\nexport { MicrophoneLifecycleManager } from './core/MicrophoneLifecycleManager';\nexport { MicrophoneController } from './core/MicrophoneController';\nexport { ErrorNotificationSystem } from './core/ErrorNotificationSystem';\n\n// Advanced exports\nexport { HarmonicCorrection } from './advanced/HarmonicCorrection';\nexport { VoiceAnalyzer } from './advanced/VoiceAnalyzer';\nexport { CalibrationSystem } from './advanced/CalibrationSystem';\n\n// Utils exports\nexport { FrequencyUtils } from './utils/FrequencyUtils';\nexport { MusicTheory } from './utils/MusicTheory';\nexport { DeviceDetection } from './utils/DeviceDetection';\n\n// Type exports\nexport type {\n  AudioManagerConfig,\n  PitchDetectorConfig,\n  PitchDetectionResult,\n  NoiseFilterConfig,\n  HarmonicCorrectionResult,\n  NotificationConfig,\n  MusicalNote,\n  MusicalInterval,\n  VoiceAnalysis,\n  DeviceSpecs\n} from './types';\n\n// Constants\nexport const VERSION = '1.1.3';\nexport const BUILD_DATE = new Date().toISOString();\n\n// Default configurations\nexport const DEFAULT_CONFIG = {\n  pitchDetector: {\n    fftSize: 4096,\n    smoothing: 0.1,\n    clarityThreshold: 0.4,    // 現実的な値に修正\n    minVolumeAbsolute: 0.003  // 現実的な値に修正\n  },\n  audioManager: {\n    sampleRate: 44100,\n    channelCount: 1,\n    echoCancellation: false,\n    noiseSuppression: false,\n    autoGainControl: false\n  },\n  noiseFilter: {\n    highpassFreq: 80,\n    lowpassFreq: 800,\n    notchFreq: 60,\n    Q: 0.7\n  }\n} as const;"],"names":["_DeviceDetection","userAgent","deviceSpecs","isIPhone","isIPad","isIPadOS","hasIOSNavigator","hasIOSPlatform","isIOS","deviceType","optimizations","screenWidth","screenHeight","maxDimension","minDimension","_isIOS","specs","baseConstraints","DeviceDetection","ErrorCode","PitchProError","message","code","context","AudioContextError","MicrophoneAccessError","PitchDetectionError","isRecoverableError","error","ErrorMessageBuilder","friendlyMessage","technicalDetails","base","immediate","fallback","preventive","AudioManager","config","healthCheck","_a","_b","_c","t","resolve","result","audioConstraints","tracks","structuredError","id","options","fftSize","smoothingTimeConstant","minDecibels","maxDecibels","useFilters","analyser","finalNode","filterChain","highpass","lowpass","notch","sensitivity","clampedSensitivity","driftError","currentGainValue","expectedGain","monitorError","analyserIds","track","index","trackError","contextError","operation","audioTrack","_d","trackStates","_e","_g","_h","_i","_f","FFT","size","table","i","angle","power","j","shift","revShift","fft","complex","storage","res","input","spectrum","half","out","data","width","step","len","outOff","bitrev","off","inv","quarterLen","limit","k","A","B","C","D","Ar","Ai","Br","Bi","Cr","Ci","Dr","Di","MAr","MAi","tableBr","tableBi","MBr","MBi","tableCr","tableCi","MCr","MCi","tableDr","tableDi","MDr","MDi","T0r","T0i","T1r","T1i","T2r","T2i","T3r","T3i","FAr","FAi","FCr","FCi","FBr","FBi","FDr","FDi","evenR","evenI","oddR","oddI","leftR","leftI","rightR","rightI","step2","step3","halfLen","hquarterLen","ST0r","ST0i","ST1r","ST1i","ST2r","ST2i","ST3r","ST3i","SFAr","SFAi","SFBr","SFBi","SA","SB","Autocorrelator","inputLength","bufferSupplier","__publicField","ceilPow2","length","output","tb","getKeyMaximumIndices","keyIndices","lookingForMaximum","max","maxIndex","refineResultIndex","x0","x1","x2","y0","y1","y2","a","b","c","xMax","yMax","PitchDetector$1","PitchDetector","threshold","volume","db","amplitude","sampleRate","keyMaximumIndices","nMax","resultIndex","refinedResultIndex","clarity","squareSum","m","v","AdaptiveFrameRateLimiter","initialFPS","now","audioManager","callbacks","filteredAnalyserId","rawAnalyserId","PitchyDetector","pitchError","audioManagerStatus","bufferLength","buffer","rawBuffer","nonZeroCount","val","maxValue","sum","rms","platformSpecs","adjustedRms","volumePercent","rawSum","rawRms","rawVolumePercent","pitch","isValidVocalRange","finalFreq","normalizedVolume","noteInfo","displayVolume","frequency","confidenceThreshold","historyWindow","h","volumeConfidence","stabilityConfidence","confidence","recentHistory","avgFrequency","avgConfidence","halfFrequency","doubleFrequency","noteNames","semitonesFromA4","noteIndex","octave","nearestSemitone","centsDeviation","currentVolume","volumeThreshold","silenceDuration","duration","enabled","_result","NoiseFilter","audioContext","inputNode","outputNode","connectionError","params","currentTime","updateError","savedOutputNode","frequencyArray","magnitudeArray","phaseArray","highpassMagnitude","lowpassMagnitude","notchMagnitude","responseError","preset","MicrophoneLifecycleManager","resources","visibilityChangeHandler","activityHandler","unloadHandler","focusHandler","blurHandler","healthStatus","timeSinceActivity","eventName","detail","event","newConfig","listener","ErrorNotificationSystem","existingContainer","css","style","notification","oldestId","title","details","list","item","solution","closeButton","resource","styleElement","MicrophoneController","audioManagerConfig","lifecycleConfig","showErrorNotifications","state","oldSensitivity","newSensitivity","durationMs","startTime","maxVolume","detectedFrequency","endTime","checkAudio","dataArray","value","success","frequencyDisplay","testError","newState","oldState","type","HarmonicCorrection","analysis","recentFrequencies","entry","fundamentalCandidates","bestCandidate","candidate","candidates","harmonicNum","fundamental","exactHarmonic","centDeviation","likelihood","_harmonicNumber","totalConfidence","validMeasurements","freq","closestHarmonicNum","expectedFreq","stabilityBonus","timestamp","lastFreq","freqRatio","cutoffTime","frequencies","confidences","conf","minFreq","maxFreq","mean","variance","coefficientOfVariation","stabilityScore","VoiceQuality","VoiceAnalyzer","spectralData","stability","vibrato","breathiness","consistency","quality","recommendations","validFrequencies","deviationCents","f","smoothed","extrema","timeSpan","rate","depths","freq1","freq2","cents","averageDepth","depth","periods","period","regularity","periodMean","p","periodVariance","fundamentalBin","noiseBins","fundamentalEnergy","noiseEnergy","noiseRatio","volumes","clarities","volumeConsistency","clarityConsistency","values","weights","score","windowSize","count","start","end","prev","curr","next","vol","CalibrationSystem","mediaStream","noiseProfile","volumeCalibration","frequencyResponse","optimalSettings","source","measurements","measureNoise","avgNoise","bin","measurement","volumeMeasurements","measureVolume","min","offset","responseMap","measureResponse","avgResponse","freqStr","avg","baseSettings","sensitivityAdjustment","adjustedSensitivity","vocalRangeNoise","noiseGateAdjustment","adjustedNoiseGate","responseLevels","lowFreqResponse","midFreqResponse","highFreqResponse","lowAvg","midAvg","highAvg","audioProcessor","settings","calibrationKey","dataToSave","savedData","parsedData","maxAge","_FrequencyUtils","midiNumber","useFlats","nearestMidi","ratio","frequency1","frequency2","midi1","midi2","fromFrequency","toFrequency","semitones","intervalNames","normalizedSemitones","octaves","baseName","instrument","baseFrequency","maxHarmonic","harmonics","tolerance","nearestInteger","harmonicFrequency","harmonicNumber","scientificPitch","match","noteName","octaveStr","semitoneOffset","baseNote","accidental","decimalPlaces","FrequencyUtils","_MusicTheory","rootFrequency","scaleType","pattern","chordType","sortedFreqs","baseFreq","intervals","results","scaleName","rootOffset","adjustedPattern","interval","normalizedIntervals","matches","rootFreq","chordName","inversion","invertedPattern","bassFreq","_bassIndex","patternSet","normalizedInterval","key","mode","sharpOrder","flatOrder","majorKeys","keySignature","relativeMajor","sharps","note","flats","harmonicCount","equalTempCents","justRatios","closestInterval","smallestDeviation","intervalName","deviation","fromFreq","toFreq","fromNote","toNote","direction","progression","scale","chords","degree","chordRoot","chord","MusicTheory","VERSION","BUILD_DATE","DEFAULT_CONFIG"],"mappings":"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","x_google_ignoreList":[3,4]}