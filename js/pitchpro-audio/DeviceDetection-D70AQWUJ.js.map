{"version":3,"file":"DeviceDetection-D70AQWUJ.js","sources":["../src/utils/DeviceDetection.ts"],"sourcesContent":["/**\n * DeviceDetection - Cross-platform device detection and optimization\n * \n * Detects device types, capabilities, and provides optimized settings\n * Handles iPadOS 13+ detection issues and provides device-specific configurations\n */\n\nimport type { DeviceSpecs } from '../types';\n\nexport class DeviceDetection {\n  private static cachedSpecs: DeviceSpecs | null = null;\n\n  /**\n   * Detect current device and return optimized specifications\n   */\n  static getDeviceSpecs(): DeviceSpecs {\n    // Return cached result if available\n    if (DeviceDetection.cachedSpecs) {\n      return DeviceDetection.cachedSpecs;\n    }\n\n    // SSR compatibility\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return DeviceDetection.getDefaultSpecs();\n    }\n\n    const userAgent = navigator.userAgent;\n    const deviceSpecs = DeviceDetection.analyzeUserAgent(userAgent);\n    \n    // Cache the result\n    DeviceDetection.cachedSpecs = deviceSpecs;\n    \n    console.log('ðŸ“± [DeviceDetection] Device analysis:', {\n      userAgent: userAgent.substring(0, 100) + '...',\n      deviceType: deviceSpecs.deviceType,\n      isIOS: deviceSpecs.isIOS,\n      sensitivity: deviceSpecs.sensitivity,\n      divisor: deviceSpecs.divisor\n    });\n\n    return deviceSpecs;\n  }\n\n  /**\n   * Analyze user agent string and determine device specifications\n   */\n  private static analyzeUserAgent(userAgent: string): DeviceSpecs {\n    // iOS device detection (including iPadOS 13+ workaround)\n    const isIPhone = /iPhone/.test(userAgent);\n    const isIPad = /iPad/.test(userAgent);\n    \n    // iPadOS 13+ reports as \"Macintosh\" but has touch support\n    const isIPadOS = /Macintosh/.test(userAgent) && 'ontouchend' in document;\n    \n    // Additional iOS detection methods\n    const hasIOSNavigator = /iPad|iPhone|iPod/.test(userAgent);\n    const hasIOSPlatform = /iPad|iPhone|iPod/.test((navigator as any).platform || '');\n    \n    // Combined iOS detection\n    const isIOS = isIPhone || isIPad || isIPadOS || hasIOSNavigator || hasIOSPlatform;\n    \n    // More specific device type detection\n    let deviceType: 'iPhone' | 'iPad' | 'PC' = 'PC';\n    \n    if (isIPhone) {\n      deviceType = 'iPhone';\n    } else if (isIPad || isIPadOS) {\n      deviceType = 'iPad';\n    } else if (isIOS) {\n      // Fallback iOS device - could be iPhone or iPad\n      deviceType = DeviceDetection.detectIOSDeviceType();\n    }\n\n    // Get device-specific optimizations\n    const optimizations = DeviceDetection.getDeviceOptimizations(deviceType, isIOS);\n\n    return {\n      deviceType,\n      isIOS,\n      sensitivity: optimizations.sensitivity,\n      noiseGate: optimizations.noiseGate,\n      divisor: optimizations.divisor,\n      gainCompensation: optimizations.gainCompensation,\n      noiseThreshold: optimizations.noiseThreshold,\n      smoothingFactor: optimizations.smoothingFactor\n    };\n  }\n\n  /**\n   * Detect iOS device type when specific detection fails\n   */\n  private static detectIOSDeviceType(): 'iPhone' | 'iPad' {\n    // Use screen size as a heuristic\n    const screenWidth = window.screen.width;\n    const screenHeight = window.screen.height;\n    const maxDimension = Math.max(screenWidth, screenHeight);\n    const minDimension = Math.min(screenWidth, screenHeight);\n    \n    // iPad generally has larger screens\n    // iPhone 6 Plus and newer have screens around 414x736 or similar\n    // iPad screens are typically 768+ in at least one dimension\n    if (maxDimension >= 768 || (maxDimension >= 700 && minDimension >= 500)) {\n      return 'iPad';\n    }\n    \n    return 'iPhone';\n  }\n\n  /**\n   * Get device-specific optimization parameters\n   */\n  private static getDeviceOptimizations(deviceType: 'iPhone' | 'iPad' | 'PC', _isIOS: boolean) {\n    switch (deviceType) {\n      case 'iPad':\n        return {\n          sensitivity: 7.0,        // High sensitivity for iPad microphones\n          noiseGate: 0.01,         // Low noise gate\n          divisor: 4.0,            // Volume calculation divisor\n          gainCompensation: 1.5,   // Gain compensation for low-frequency cut\n          noiseThreshold: 12,      // Noise threshold for silence detection\n          smoothingFactor: 0.2     // Smoothing factor\n        };\n        \n      case 'iPhone':\n        return {\n          sensitivity: 3.0,        // Medium-high sensitivity for iPhone\n          noiseGate: 0.015,        // Medium noise gate\n          divisor: 4.0,            // Volume calculation divisor\n          gainCompensation: 1.5,   // Gain compensation\n          noiseThreshold: 12,      // Noise threshold\n          smoothingFactor: 0.2     // Smoothing factor\n        };\n        \n      case 'PC':\n      default:\n        return {\n          sensitivity: 1.0,        // Standard sensitivity for PC\n          noiseGate: 0.02,         // Higher noise gate for PC microphones\n          divisor: 6.0,            // Different volume calculation for PC\n          gainCompensation: 1.0,   // No additional gain compensation needed\n          noiseThreshold: 15,      // Higher noise threshold\n          smoothingFactor: 0.2     // Standard smoothing\n        };\n    }\n  }\n\n  /**\n   * Get default specifications for SSR or fallback\n   */\n  private static getDefaultSpecs(): DeviceSpecs {\n    return {\n      deviceType: 'PC',\n      isIOS: false,\n      sensitivity: 1.0,\n      noiseGate: 0.02,\n      divisor: 6.0,\n      gainCompensation: 1.0,\n      noiseThreshold: 15,\n      smoothingFactor: 0.2\n    };\n  }\n\n  /**\n   * Check if device supports Web Audio API\n   */\n  static supportsWebAudio(): boolean {\n    return typeof window !== 'undefined' && \n           (typeof window.AudioContext !== 'undefined' || typeof (window as any).webkitAudioContext !== 'undefined');\n  }\n\n  /**\n   * Check if device supports MediaDevices API\n   */\n  static supportsMediaDevices(): boolean {\n    return typeof navigator !== 'undefined' && \n           typeof navigator.mediaDevices !== 'undefined' && \n           typeof navigator.mediaDevices.getUserMedia !== 'undefined';\n  }\n\n  /**\n   * Check if device supports MediaRecorder API\n   */\n  static supportsMediaRecorder(): boolean {\n    return typeof window !== 'undefined' && typeof (window as any).MediaRecorder !== 'undefined';\n  }\n\n  /**\n   * Get comprehensive device capabilities\n   */\n  static getDeviceCapabilities() {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    return {\n      deviceSpecs: specs,\n      webAudioSupport: DeviceDetection.supportsWebAudio(),\n      mediaDevicesSupport: DeviceDetection.supportsMediaDevices(),\n      mediaRecorderSupport: DeviceDetection.supportsMediaRecorder(),\n      touchSupport: 'ontouchend' in document,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Unknown',\n      screenSize: typeof window !== 'undefined' ? {\n        width: window.screen.width,\n        height: window.screen.height,\n        pixelRatio: window.devicePixelRatio\n      } : null,\n      language: typeof navigator !== 'undefined' ? navigator.language : 'Unknown',\n      platform: typeof navigator !== 'undefined' ? (navigator as any).platform || 'Unknown' : 'Unknown'\n    };\n  }\n\n  /**\n   * Check if current device is mobile\n   */\n  static isMobile(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    return specs.isIOS || /Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator?.userAgent || '');\n  }\n\n  /**\n   * Check if current device is tablet\n   */\n  static isTablet(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    if (specs.deviceType === 'iPad') return true;\n    \n    // Android tablet detection\n    const userAgent = navigator?.userAgent || '';\n    return /Android/i.test(userAgent) && !/Mobile/i.test(userAgent);\n  }\n\n  /**\n   * Check if current device is desktop\n   */\n  static isDesktop(): boolean {\n    return !DeviceDetection.isMobile() && !DeviceDetection.isTablet();\n  }\n\n  /**\n   * Get recommended audio constraints for current device\n   */\n  static getOptimalAudioConstraints(): MediaStreamConstraints {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    const baseConstraints: MediaStreamConstraints = {\n      audio: {\n        echoCancellation: false,\n        noiseSuppression: false,\n        autoGainControl: false,\n        sampleRate: 44100,\n        channelCount: 1,\n        sampleSize: 16,\n        // latency: 0.1, // Not supported in MediaTrackConstraints\n        // volume: 1.0, // Not supported in MediaTrackConstraints\n        deviceId: { ideal: 'default' }\n      }\n    };\n\n    // Add iOS-specific optimizations\n    if (specs.isIOS && baseConstraints.audio && typeof baseConstraints.audio === 'object') {\n      (baseConstraints.audio as any) = {\n        ...baseConstraints.audio,\n        // Disable all browser-level processing for iOS\n        googAutoGainControl: false,\n        googNoiseSuppression: false,\n        googEchoCancellation: false,\n        googHighpassFilter: false,\n        googTypingNoiseDetection: false,\n        googBeamforming: false,\n        mozAutoGainControl: false,\n        mozNoiseSuppression: false\n      };\n    }\n\n    return baseConstraints;\n  }\n\n  /**\n   * Clear cached device specifications (for testing)\n   */\n  static clearCache(): void {\n    DeviceDetection.cachedSpecs = null;\n  }\n\n  /**\n   * Get device-specific debugging information\n   */\n  static getDebugInfo() {\n    const capabilities = DeviceDetection.getDeviceCapabilities();\n    \n    return {\n      ...capabilities,\n      detectionMethods: {\n        userAgentIPhone: /iPhone/.test(navigator?.userAgent || ''),\n        userAgentIPad: /iPad/.test(navigator?.userAgent || ''),\n        userAgentMacintosh: /Macintosh/.test(navigator?.userAgent || ''),\n        touchSupport: 'ontouchend' in document,\n        navigatorPlatform: (navigator as any)?.platform || 'Unknown',\n        screenAspectRatio: typeof window !== 'undefined' ? \n          (window.screen.width / window.screen.height).toFixed(2) : 'Unknown'\n      }\n    };\n  }\n}"],"names":["_DeviceDetection","userAgent","deviceSpecs","isIPhone","isIPad","isIPadOS","hasIOSNavigator","hasIOSPlatform","isIOS","deviceType","optimizations","screenWidth","screenHeight","maxDimension","minDimension","_isIOS","specs","baseConstraints","DeviceDetection"],"mappings":"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"}