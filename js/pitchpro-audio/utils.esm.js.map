{"version":3,"file":"utils.esm.js","sources":["../src/utils/FrequencyUtils.ts","../src/utils/MusicTheory.ts"],"sourcesContent":["/**\n * FrequencyUtils - Frequency conversion and analysis utilities\n * \n * Provides utilities for converting between frequencies, notes, cents, and MIDI values\n * Includes musical interval calculations and frequency analysis functions\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\n\nexport class FrequencyUtils {\n  // Standard reference frequency (A4 = 440 Hz)\n  static readonly A4_FREQUENCY = 440;\n  static readonly A4_MIDI_NUMBER = 69;\n  \n  // Note names and chromatic scale\n  static readonly NOTE_NAMES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  static readonly FLAT_NOTE_NAMES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\n  \n  // Common musical intervals (in semitones)\n  static readonly INTERVALS = {\n    unison: 0,\n    minorSecond: 1,\n    majorSecond: 2,\n    minorThird: 3,\n    majorThird: 4,\n    perfectFourth: 5,\n    tritone: 6,\n    perfectFifth: 7,\n    minorSixth: 8,\n    majorSixth: 9,\n    minorSeventh: 10,\n    majorSeventh: 11,\n    octave: 12\n  };\n\n  /**\n   * Convert frequency to MIDI note number\n   */\n  static frequencyToMidi(frequency: number): number {\n    if (frequency <= 0) return 0;\n    return Math.round(12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER);\n  }\n\n  /**\n   * Convert MIDI note number to frequency\n   */\n  static midiToFrequency(midiNumber: number): number {\n    return FrequencyUtils.A4_FREQUENCY * Math.pow(2, (midiNumber - FrequencyUtils.A4_MIDI_NUMBER) / 12);\n  }\n\n  /**\n   * Convert frequency to note name with octave\n   */\n  static frequencyToNote(frequency: number, useFlats = false): MusicalNote {\n    if (frequency <= 0) {\n      return {\n        name: '--',\n        octave: 0,\n        midi: 0,\n        frequency: 0\n      };\n    }\n\n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    const noteNames = useFlats ? FrequencyUtils.FLAT_NOTE_NAMES : FrequencyUtils.NOTE_NAMES;\n    \n    const noteIndex = (midiNumber - 12) % 12; // C0 = MIDI 12\n    const octave = Math.floor((midiNumber - 12) / 12);\n    const noteName = noteNames[noteIndex];\n    \n    return {\n      name: noteName + octave,\n      octave,\n      midi: midiNumber,\n      frequency: FrequencyUtils.midiToFrequency(midiNumber)\n    };\n  }\n\n  /**\n   * Convert frequency to cents deviation from nearest semitone\n   */\n  static frequencyToCents(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = 12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER;\n    const nearestMidi = Math.round(midiNumber);\n    const centsDeviation = (midiNumber - nearestMidi) * 100;\n    \n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Convert cents to frequency ratio\n   */\n  static centsToRatio(cents: number): number {\n    return Math.pow(2, cents / 1200);\n  }\n\n  /**\n   * Convert frequency ratio to cents\n   */\n  static ratioToCents(ratio: number): number {\n    if (ratio <= 0) return 0;\n    return Math.round(1200 * Math.log2(ratio));\n  }\n\n  /**\n   * Get the closest note frequency to a given frequency\n   */\n  static getClosestNoteFrequency(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Calculate the interval between two frequencies in semitones\n   */\n  static getInterval(frequency1: number, frequency2: number): number {\n    if (frequency1 <= 0 || frequency2 <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(frequency1);\n    const midi2 = FrequencyUtils.frequencyToMidi(frequency2);\n    \n    return Math.abs(midi2 - midi1);\n  }\n\n  /**\n   * Calculate the interval between two frequencies with direction\n   */\n  static getSignedInterval(fromFrequency: number, toFrequency: number): number {\n    if (fromFrequency <= 0 || toFrequency <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(fromFrequency);\n    const midi2 = FrequencyUtils.frequencyToMidi(toFrequency);\n    \n    return midi2 - midi1;\n  }\n\n  /**\n   * Get musical interval information\n   */\n  static getIntervalInfo(semitones: number): MusicalInterval {\n    const intervalNames = {\n      0: 'Perfect Unison',\n      1: 'Minor Second',\n      2: 'Major Second',\n      3: 'Minor Third',\n      4: 'Major Third',\n      5: 'Perfect Fourth',\n      6: 'Tritone',\n      7: 'Perfect Fifth',\n      8: 'Minor Sixth',\n      9: 'Major Sixth',\n      10: 'Minor Seventh',\n      11: 'Major Seventh',\n      12: 'Perfect Octave'\n    };\n\n    const normalizedSemitones = ((semitones % 12) + 12) % 12;\n    const octaves = Math.floor(semitones / 12);\n    \n    const baseName = intervalNames[normalizedSemitones as keyof typeof intervalNames] || 'Unknown';\n    const name = octaves > 0 ? `${baseName} + ${octaves} octave(s)` : baseName;\n    \n    return {\n      name,\n      semitones,\n      cents: semitones * 100,\n      ratio: Math.pow(2, semitones / 12)\n    };\n  }\n\n  /**\n   * Check if frequency is within human vocal range\n   */\n  static isInVocalRange(frequency: number): boolean {\n    // Human vocal range roughly 80Hz to 1100Hz\n    return frequency >= 80 && frequency <= 1100;\n  }\n\n  /**\n   * Check if frequency is in piano range\n   */\n  static isInPianoRange(frequency: number): boolean {\n    // Piano range A0 (27.5Hz) to C8 (4186Hz)\n    return frequency >= 27.5 && frequency <= 4186;\n  }\n\n  /**\n   * Get frequency range for a specific instrument\n   */\n  static getInstrumentRange(instrument: string): { min: number; max: number } | null {\n    const ranges = {\n      piano: { min: 27.5, max: 4186 },\n      guitar: { min: 82.4, max: 1397 }, // E2 to F6\n      violin: { min: 196, max: 3520 },  // G3 to A7\n      cello: { min: 65.4, max: 1397 },  // C2 to F6\n      voice_bass: { min: 87.3, max: 349 }, // F2 to F4\n      voice_tenor: { min: 131, max: 523 }, // C3 to C5\n      voice_alto: { min: 175, max: 698 },  // F3 to F5\n      voice_soprano: { min: 262, max: 1047 } // C4 to C6\n    };\n\n    return ranges[instrument as keyof typeof ranges] || null;\n  }\n\n  /**\n   * Generate a chromatic scale starting from a base frequency\n   */\n  static generateChromaticScale(baseFrequency: number, octaves = 1): number[] {\n    const frequencies: number[] = [];\n    \n    for (let i = 0; i < 12 * octaves; i++) {\n      const frequency = baseFrequency * Math.pow(2, i / 12);\n      frequencies.push(frequency);\n    }\n    \n    return frequencies;\n  }\n\n  /**\n   * Generate a major scale starting from a base frequency\n   */\n  static generateMajorScale(baseFrequency: number): number[] {\n    // Major scale pattern: W-W-H-W-W-W-H (W=whole step=2 semitones, H=half step=1 semitone)\n    const pattern = [0, 2, 4, 5, 7, 9, 11, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Generate a minor scale starting from a base frequency\n   */\n  static generateMinorScale(baseFrequency: number): number[] {\n    // Natural minor scale pattern: W-H-W-W-H-W-W\n    const pattern = [0, 2, 3, 5, 7, 8, 10, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Find harmonics of a fundamental frequency\n   */\n  static findHarmonics(fundamental: number, maxHarmonic = 8): number[] {\n    const harmonics: number[] = [];\n    \n    for (let i = 1; i <= maxHarmonic; i++) {\n      harmonics.push(fundamental * i);\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Check if a frequency could be a harmonic of a fundamental\n   */\n  static isHarmonic(frequency: number, fundamental: number, tolerance = 0.05): {\n    isHarmonic: boolean;\n    harmonicNumber: number | null;\n    exactFrequency: number | null;\n  } {\n    if (fundamental <= 0 || frequency <= 0) {\n      return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n    }\n\n    const ratio = frequency / fundamental;\n    const nearestInteger = Math.round(ratio);\n    \n    // Check if the ratio is close to an integer (within tolerance)\n    if (nearestInteger >= 1 && Math.abs(ratio - nearestInteger) <= tolerance) {\n      return {\n        isHarmonic: true,\n        harmonicNumber: nearestInteger,\n        exactFrequency: fundamental * nearestInteger\n      };\n    }\n\n    return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n  }\n\n  /**\n   * Calculate the fundamental frequency from a suspected harmonic\n   */\n  static calculateFundamental(harmonicFrequency: number, harmonicNumber: number): number {\n    if (harmonicNumber <= 0 || harmonicFrequency <= 0) return 0;\n    return harmonicFrequency / harmonicNumber;\n  }\n\n  /**\n   * Convert frequency to scientific pitch notation\n   */\n  static frequencyToScientificPitch(frequency: number): string {\n    const note = FrequencyUtils.frequencyToNote(frequency);\n    return note.name;\n  }\n\n  /**\n   * Convert scientific pitch notation to frequency\n   */\n  static scientificPitchToFrequency(scientificPitch: string): number {\n    const match = scientificPitch.match(/^([A-G][#b]?)(-?\\d+)$/);\n    if (!match) return 0;\n\n    const [, noteName, octaveStr] = match;\n    const octave = parseInt(octaveStr, 10);\n    \n    // Convert note name to semitone offset from C\n    let semitoneOffset = 0;\n    const baseNote = noteName[0];\n    const accidental = noteName.slice(1);\n    \n    const baseOffsets: { [key: string]: number } = {\n      'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11\n    };\n    \n    semitoneOffset = baseOffsets[baseNote] || 0;\n    \n    if (accidental === '#') {\n      semitoneOffset += 1;\n    } else if (accidental === 'b') {\n      semitoneOffset -= 1;\n    }\n    \n    // Calculate MIDI number (C4 = MIDI 60)\n    const midiNumber = (octave + 1) * 12 + semitoneOffset;\n    \n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Format frequency display with appropriate precision\n   */\n  static formatFrequency(frequency: number, decimalPlaces = 1): string {\n    if (frequency === 0) return '0 Hz';\n    if (frequency < 0.1) return '<0.1 Hz';\n    if (frequency >= 10000) return `${Math.round(frequency / 1000)}k Hz`;\n    \n    return `${frequency.toFixed(decimalPlaces)} Hz`;\n  }\n\n  /**\n   * Format cents display with sign\n   */\n  static formatCents(cents: number): string {\n    if (cents === 0) return '0¢';\n    const sign = cents > 0 ? '+' : '';\n    return `${sign}${cents}¢`;\n  }\n}","/**\n * MusicTheory - Musical theory utilities and calculations\n * \n * Provides utilities for scales, chords, intervals, and musical analysis\n * Supports various temperaments and tuning systems\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\nimport { FrequencyUtils } from './FrequencyUtils';\n\nexport class MusicTheory {\n  // Scale patterns (in semitones from root)\n  static readonly SCALE_PATTERNS = {\n    major: [0, 2, 4, 5, 7, 9, 11],\n    naturalMinor: [0, 2, 3, 5, 7, 8, 10],\n    harmonicMinor: [0, 2, 3, 5, 7, 8, 11],\n    melodicMinor: [0, 2, 3, 5, 7, 9, 11],\n    dorian: [0, 2, 3, 5, 7, 9, 10],\n    phrygian: [0, 1, 3, 5, 7, 8, 10],\n    lydian: [0, 2, 4, 6, 7, 9, 11],\n    mixolydian: [0, 2, 4, 5, 7, 9, 10],\n    locrian: [0, 1, 3, 5, 6, 8, 10],\n    pentatonicMajor: [0, 2, 4, 7, 9],\n    pentatonicMinor: [0, 3, 5, 7, 10],\n    blues: [0, 3, 5, 6, 7, 10],\n    chromatic: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  };\n\n  // Chord patterns (in semitones from root)\n  static readonly CHORD_PATTERNS = {\n    major: [0, 4, 7],\n    minor: [0, 3, 7],\n    diminished: [0, 3, 6],\n    augmented: [0, 4, 8],\n    sus2: [0, 2, 7],\n    sus4: [0, 5, 7],\n    major7: [0, 4, 7, 11],\n    minor7: [0, 3, 7, 10],\n    dominant7: [0, 4, 7, 10],\n    majorMaj7: [0, 4, 7, 11],\n    halfDiminished7: [0, 3, 6, 10],\n    diminished7: [0, 3, 6, 9],\n    add9: [0, 4, 7, 14], // 14 = 2 + 12 (octave)\n    major9: [0, 4, 7, 11, 14],\n    minor9: [0, 3, 7, 10, 14]\n  };\n\n  // Circle of fifths\n  static readonly CIRCLE_OF_FIFTHS = [\n    'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'Ab', 'Eb', 'Bb', 'F'\n  ];\n\n  // Interval names\n  static readonly INTERVAL_NAMES = {\n    0: 'Perfect Unison',\n    1: 'Minor Second',\n    2: 'Major Second',\n    3: 'Minor Third',\n    4: 'Major Third',\n    5: 'Perfect Fourth',\n    6: 'Tritone',\n    7: 'Perfect Fifth',\n    8: 'Minor Sixth',\n    9: 'Major Sixth',\n    10: 'Minor Seventh',\n    11: 'Major Seventh',\n    12: 'Perfect Octave'\n  };\n\n  /**\n   * Generate scale from root note\n   */\n  static generateScale(\n    rootFrequency: number, \n    scaleType: keyof typeof MusicTheory.SCALE_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.SCALE_PATTERNS[scaleType];\n    if (!pattern) {\n      throw new Error(`Unknown scale type: ${scaleType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Generate chord from root note\n   */\n  static generateChord(\n    rootFrequency: number,\n    chordType: keyof typeof MusicTheory.CHORD_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.CHORD_PATTERNS[chordType];\n    if (!pattern) {\n      throw new Error(`Unknown chord type: ${chordType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Identify scale from a set of frequencies\n   */\n  static identifyScale(frequencies: number[]): Array<{\n    scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n  }> {\n    if (frequencies.length < 3) {\n      return [];\n    }\n\n    // Convert frequencies to note numbers relative to the lowest note\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const baseFreq = sortedFreqs[0];\n    const intervals = sortedFreqs.map(freq => \n      Math.round(12 * Math.log2(freq / baseFreq))\n    );\n\n    const results: Array<{\n      scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n    }> = [];\n\n    // Test each scale pattern\n    Object.entries(MusicTheory.SCALE_PATTERNS).forEach(([scaleName, pattern]) => {\n      // Test each possible root\n      for (let rootOffset = 0; rootOffset < 12; rootOffset++) {\n        const adjustedPattern = pattern.map(interval => (interval + rootOffset) % 12).sort((a, b) => a - b);\n        const normalizedIntervals = intervals.map(interval => interval % 12).sort((a, b) => a - b);\n        \n        // Calculate confidence based on pattern matching\n        let matches = 0;\n        normalizedIntervals.forEach(interval => {\n          if (adjustedPattern.includes(interval)) {\n            matches++;\n          }\n        });\n\n        const confidence = matches / Math.max(normalizedIntervals.length, adjustedPattern.length);\n        \n        if (confidence > 0.5) { // Only include reasonable matches\n          const rootFreq = baseFreq * Math.pow(2, -rootOffset / 12);\n          results.push({\n            scale: scaleName as keyof typeof MusicTheory.SCALE_PATTERNS,\n            confidence,\n            root: FrequencyUtils.frequencyToNote(rootFreq)\n          });\n        }\n      }\n    });\n\n    // Sort by confidence and return top matches\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 5);\n  }\n\n  /**\n   * Identify chord from frequencies\n   */\n  static identifyChord(frequencies: number[]): Array<{\n    chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n    inversion?: number;\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const results: Array<{\n      chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n      inversion?: number;\n    }> = [];\n\n    // Test each chord pattern\n    Object.entries(MusicTheory.CHORD_PATTERNS).forEach(([chordName, pattern]) => {\n      // Test different inversions\n      for (let inversion = 0; inversion < pattern.length; inversion++) {\n        // Create inverted pattern\n        const invertedPattern = [\n          ...pattern.slice(inversion),\n          ...pattern.slice(0, inversion).map(interval => interval + 12)\n        ];\n\n        // Test each possible bass note as root\n        sortedFreqs.forEach((bassFreq, _bassIndex) => {\n          const intervals = sortedFreqs.map(freq => \n            Math.round(12 * Math.log2(freq / bassFreq))\n          );\n\n          // Calculate confidence\n          let matches = 0;\n          const patternSet = new Set(invertedPattern);\n          intervals.forEach(interval => {\n            const normalizedInterval = interval % 12;\n            if (patternSet.has(normalizedInterval) || patternSet.has(normalizedInterval + 12)) {\n              matches++;\n            }\n          });\n\n          const confidence = matches / Math.max(intervals.length, pattern.length);\n          \n          if (confidence > 0.6) {\n            const rootFreq = inversion === 0 ? bassFreq : \n              bassFreq * Math.pow(2, -pattern[inversion] / 12);\n            \n            results.push({\n              chord: chordName as keyof typeof MusicTheory.CHORD_PATTERNS,\n              confidence,\n              root: FrequencyUtils.frequencyToNote(rootFreq),\n              inversion: inversion > 0 ? inversion : undefined\n            });\n          }\n        });\n      }\n    });\n\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 3);\n  }\n\n  /**\n   * Get the key signature for a given key\n   */\n  static getKeySignature(key: string, mode: 'major' | 'minor' = 'major'): {\n    sharps: string[];\n    flats: string[];\n    accidentalCount: number;\n  } {\n    // Order of sharps: F# C# G# D# A# E# B#\n    const sharpOrder = ['F', 'C', 'G', 'D', 'A', 'E', 'B'];\n    // Order of flats: Bb Eb Ab Db Gb Cb Fb\n    const flatOrder = ['B', 'E', 'A', 'D', 'G', 'C', 'F'];\n    \n    // Major key signatures\n    const majorKeys = {\n      'C': { sharps: 0, flats: 0 },\n      'G': { sharps: 1, flats: 0 },\n      'D': { sharps: 2, flats: 0 },\n      'A': { sharps: 3, flats: 0 },\n      'E': { sharps: 4, flats: 0 },\n      'B': { sharps: 5, flats: 0 },\n      'F#': { sharps: 6, flats: 0 },\n      'C#': { sharps: 7, flats: 0 },\n      'F': { sharps: 0, flats: 1 },\n      'Bb': { sharps: 0, flats: 2 },\n      'Eb': { sharps: 0, flats: 3 },\n      'Ab': { sharps: 0, flats: 4 },\n      'Db': { sharps: 0, flats: 5 },\n      'Gb': { sharps: 0, flats: 6 },\n      'Cb': { sharps: 0, flats: 7 }\n    };\n\n    // Adjust for minor keys (relative minor is 3 semitones below major)\n    let keySignature = majorKeys[key as keyof typeof majorKeys];\n    \n    if (!keySignature && mode === 'minor') {\n      // Find relative major\n      const minorToMajor = {\n        'A': 'C', 'E': 'G', 'B': 'D', 'F#': 'A', 'C#': 'E', 'G#': 'B', 'D#': 'F#', 'A#': 'C#',\n        'D': 'F', 'G': 'Bb', 'C': 'Eb', 'F': 'Ab', 'Bb': 'Db', 'Eb': 'Gb', 'Ab': 'Cb'\n      };\n      \n      const relativeMajor = minorToMajor[key as keyof typeof minorToMajor];\n      if (relativeMajor) {\n        keySignature = majorKeys[relativeMajor as keyof typeof majorKeys];\n      }\n    }\n\n    if (!keySignature) {\n      return { sharps: [], flats: [], accidentalCount: 0 };\n    }\n\n    const sharps = sharpOrder.slice(0, keySignature.sharps).map(note => note + '#');\n    const flats = flatOrder.slice(0, keySignature.flats).map(note => note + 'b');\n    \n    return {\n      sharps,\n      flats,\n      accidentalCount: keySignature.sharps || keySignature.flats\n    };\n  }\n\n  /**\n   * Calculate the harmonic series for a fundamental frequency\n   */\n  static getHarmonicSeries(fundamental: number, harmonicCount: number = 16): MusicalNote[] {\n    const harmonics: MusicalNote[] = [];\n    \n    for (let i = 1; i <= harmonicCount; i++) {\n      const frequency = fundamental * i;\n      harmonics.push(FrequencyUtils.frequencyToNote(frequency));\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Calculate just intonation ratios for common intervals\n   */\n  static getJustIntonationRatios(): { [key: string]: { ratio: number; cents: number } } {\n    return {\n      'unison': { ratio: 1/1, cents: 0 },\n      'minorSecond': { ratio: 16/15, cents: 112 },\n      'majorSecond': { ratio: 9/8, cents: 204 },\n      'minorThird': { ratio: 6/5, cents: 316 },\n      'majorThird': { ratio: 5/4, cents: 386 },\n      'perfectFourth': { ratio: 4/3, cents: 498 },\n      'tritone': { ratio: 45/32, cents: 590 },\n      'perfectFifth': { ratio: 3/2, cents: 702 },\n      'minorSixth': { ratio: 8/5, cents: 814 },\n      'majorSixth': { ratio: 5/3, cents: 884 },\n      'minorSeventh': { ratio: 16/9, cents: 996 },\n      'majorSeventh': { ratio: 15/8, cents: 1088 },\n      'octave': { ratio: 2/1, cents: 1200 }\n    };\n  }\n\n  /**\n   * Convert equal temperament interval to just intonation\n   */\n  static equalTemperamentToJustIntonation(semitones: number): {\n    ratio: number;\n    cents: number;\n    closestJustInterval?: string;\n    centsDeviation?: number;\n  } {\n    const equalTempCents = semitones * 100;\n    const justRatios = MusicTheory.getJustIntonationRatios();\n    \n    // Find closest just intonation interval\n    let closestInterval: string | undefined;\n    let smallestDeviation = Infinity;\n    \n    Object.entries(justRatios).forEach(([intervalName, { cents }]) => {\n      const deviation = Math.abs(equalTempCents - cents);\n      if (deviation < smallestDeviation) {\n        smallestDeviation = deviation;\n        closestInterval = intervalName;\n      }\n    });\n    \n    const ratio = Math.pow(2, semitones / 12);\n    \n    return {\n      ratio,\n      cents: equalTempCents,\n      closestJustInterval: closestInterval,\n      centsDeviation: closestInterval ? smallestDeviation : undefined\n    };\n  }\n\n  /**\n   * Analyze melodic intervals in a sequence of notes\n   */\n  static analyzeMelody(frequencies: number[]): Array<{\n    fromNote: MusicalNote;\n    toNote: MusicalNote;\n    interval: MusicalInterval;\n    direction: 'up' | 'down' | 'same';\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const analysis: Array<{\n      fromNote: MusicalNote;\n      toNote: MusicalNote;\n      interval: MusicalInterval;\n      direction: 'up' | 'down' | 'same';\n    }> = [];\n\n    for (let i = 1; i < frequencies.length; i++) {\n      const fromFreq = frequencies[i - 1];\n      const toFreq = frequencies[i];\n      \n      const fromNote = FrequencyUtils.frequencyToNote(fromFreq);\n      const toNote = FrequencyUtils.frequencyToNote(toFreq);\n      \n      const semitones = FrequencyUtils.getSignedInterval(fromFreq, toFreq);\n      const interval = FrequencyUtils.getIntervalInfo(Math.abs(semitones));\n      \n      const direction = semitones > 0 ? 'up' : semitones < 0 ? 'down' : 'same';\n      \n      analysis.push({\n        fromNote,\n        toNote,\n        interval,\n        direction\n      });\n    }\n\n    return analysis;\n  }\n\n  /**\n   * Generate chord progressions in a given key\n   */\n  static generateChordProgression(\n    key: string, \n    mode: 'major' | 'minor' = 'major',\n    progression: number[] = [1, 4, 5, 1] // Roman numerals as scale degrees\n  ): MusicalNote[][] {\n    const rootFreq = FrequencyUtils.scientificPitchToFrequency(key + '4');\n    if (rootFreq === 0) {\n      throw new Error(`Invalid key: ${key}`);\n    }\n\n    const scale = MusicTheory.generateScale(rootFreq, mode === 'minor' ? 'naturalMinor' : 'major');\n    const chords: MusicalNote[][] = [];\n\n    progression.forEach(degree => {\n      const chordRoot = scale[(degree - 1) % scale.length];\n      const chordType = mode === 'major' \n        ? MusicTheory.getMajorScaleChordType(degree)\n        : MusicTheory.getMinorScaleChordType(degree);\n      \n      const chord = MusicTheory.generateChord(chordRoot.frequency, chordType);\n      chords.push(chord);\n    });\n\n    return chords;\n  }\n\n  /**\n   * Get chord type for scale degree in major scale\n   */\n  private static getMajorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['major', 'minor', 'minor', 'major', 'major', 'minor', 'diminished'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n\n  /**\n   * Get chord type for scale degree in minor scale\n   */\n  private static getMinorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['minor', 'diminished', 'major', 'minor', 'minor', 'major', 'major'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n}"],"names":["_FrequencyUtils","frequency","midiNumber","useFlats","noteNames","noteIndex","octave","nearestMidi","centsDeviation","cents","ratio","frequency1","frequency2","midi1","midi2","fromFrequency","toFrequency","semitones","intervalNames","normalizedSemitones","octaves","baseName","instrument","baseFrequency","frequencies","i","fundamental","maxHarmonic","harmonics","tolerance","nearestInteger","harmonicFrequency","harmonicNumber","scientificPitch","match","noteName","octaveStr","semitoneOffset","baseNote","accidental","decimalPlaces","FrequencyUtils","_MusicTheory","rootFrequency","scaleType","pattern","chordType","sortedFreqs","b","baseFreq","intervals","freq","results","scaleName","rootOffset","adjustedPattern","interval","a","normalizedIntervals","matches","confidence","rootFreq","chordName","inversion","invertedPattern","bassFreq","_bassIndex","patternSet","normalizedInterval","key","mode","sharpOrder","flatOrder","majorKeys","keySignature","relativeMajor","sharps","note","flats","harmonicCount","equalTempCents","justRatios","closestInterval","smallestDeviation","intervalName","deviation","analysis","fromFreq","toFreq","fromNote","toNote","direction","progression","scale","chords","degree","chordRoot","chord","MusicTheory"],"mappings":"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"}