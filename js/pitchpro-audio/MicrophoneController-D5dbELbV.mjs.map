{"version":3,"file":"MicrophoneController-D5dbELbV.mjs","sources":["../src/core/AudioManager.ts","../src/core/PitchDetector.ts","../src/core/NoiseFilter.ts","../src/core/MicrophoneLifecycleManager.ts","../src/core/ErrorNotificationSystem.ts","../src/core/MicrophoneController.ts"],"sourcesContent":["/**\n * AudioManager - Framework-agnostic Global Audio Resource Management System\n * \n * Purpose: Solve multiple AudioContext issues\n * - Share single AudioContext across entire application\n * - Reuse single MediaStream across all components\n * - Safe resource management and cleanup\n */\n\nimport type { \n  AudioManagerConfig, \n  MediaStreamResources, \n  HealthStatus, \n  TrackState,\n  DeviceSpecs\n} from '../types';\n\nexport class AudioManager {\n  // Global shared resources\n  private audioContext: AudioContext | null = null;\n  private mediaStream: MediaStream | null = null;\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\n  private gainNode: GainNode | null = null; // For microphone sensitivity adjustment\n  \n  // Analyser management\n  private analysers = new Map<string, AnalyserNode>();\n  private filters = new Map<string, { highpass: BiquadFilterNode; lowpass: BiquadFilterNode; notch: BiquadFilterNode }>();\n  \n  // Reference counting (for safe cleanup)\n  private refCount = 0;\n  private initPromise: Promise<MediaStreamResources> | null = null; // Prevent duplicate initialization\n  \n  // State management\n  private isInitialized = false;\n  private lastError: Error | null = null;\n  \n  // Sensitivity settings (iPad compatibility)\n  private currentSensitivity: number; // Device-dependent default sensitivity\n  \n  // Configuration\n  private config: AudioManagerConfig;\n\n  constructor(config: AudioManagerConfig = {}) {\n    this.config = {\n      sampleRate: 44100,\n      channelCount: 1,\n      echoCancellation: false,\n      noiseSuppression: false,\n      autoGainControl: false,\n      latency: 0.1,\n      ...config\n    };\n    \n    this.currentSensitivity = this._getDefaultSensitivity();\n  }\n\n  /**\n   * Get device-dependent default sensitivity\n   */\n  private _getDefaultSensitivity(): number {\n    const deviceSpecs = this.getPlatformSpecs();\n    \n    switch (deviceSpecs.deviceType) {\n      case 'iPad':\n        console.log('üîß [AudioManager] iPad detected - setting default sensitivity 7.0x');\n        return 7.0;\n      case 'iPhone':\n        console.log('üîß [AudioManager] iPhone detected - setting default sensitivity 3.0x');\n        return 3.0;\n      default:\n        console.log('üîß [AudioManager] PC detected - setting default sensitivity 1.0x');\n        return 1.0;\n    }\n  }\n\n  /**\n   * Initialize audio resources\n   * Safe to call multiple times (singleton-like behavior)\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    // If already initializing, wait for completion\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    // If already initialized - perform MediaStream health check\n    if (this.isInitialized && this.audioContext && this.mediaStream) {\n      const healthCheck = this.checkMediaStreamHealth();\n      \n      if (healthCheck.healthy) {\n        this.refCount++;\n        return {\n          audioContext: this.audioContext,\n          mediaStream: this.mediaStream,\n          sourceNode: this.sourceNode!\n        };\n      } else {\n        // Force re-initialization if MediaStream is unhealthy\n        console.warn('‚ö†Ô∏è [AudioManager] Unhealthy MediaStream detected - force re-initialization:', healthCheck);\n        console.log('üîÑ [AudioManager] Unhealthy MediaStream details:', {\n          mediaStreamActive: this.mediaStream?.active,\n          trackCount: this.mediaStream?.getTracks().length,\n          trackStates: this.mediaStream?.getTracks().map(t => ({\n            kind: t.kind,\n            readyState: t.readyState,\n            enabled: t.enabled,\n            muted: t.muted\n          }))\n        });\n        \n        // Perform safe cleanup\n        this._cleanup();\n        this.isInitialized = false;\n        this.refCount = 0;\n        \n        // Short wait to ensure resource release\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        console.log('üîÑ [AudioManager] Cleanup complete - starting re-initialization');\n        // Continue to next block for re-initialization\n      }\n    }\n\n    // Execute initialization\n    this.initPromise = this._doInitialize();\n    \n    try {\n      const result = await this.initPromise;\n      this.initPromise = null;\n      return result;\n    } catch (error) {\n      this.initPromise = null;\n      throw error;\n    }\n  }\n\n  /**\n   * Actual initialization process\n   */\n  private async _doInitialize(): Promise<MediaStreamResources> {\n    try {\n      console.log('üé§ [AudioManager] Starting initialization');\n\n      // Create AudioContext (single instance)\n      if (!this.audioContext) {\n        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n        console.log('‚úÖ [AudioManager] AudioContext creation complete');\n      }\n\n      // Resume AudioContext if suspended\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n        console.log('‚úÖ [AudioManager] AudioContext resume complete');\n      }\n\n      // Get MediaStream (single instance)\n      if (!this.mediaStream) {\n        const deviceSpecs = this.getPlatformSpecs();\n        \n        console.log(`üîç [AudioManager] Device detection: ${deviceSpecs.deviceType}`, navigator.userAgent);\n        console.log(`üîç [AudioManager] Touch support: ${'ontouchend' in document}`);\n        \n        // Safari WebKit compatibility: Maximum compatibility audio settings\n        const audioConstraints: MediaStreamConstraints = {\n          audio: {\n            // Basic settings: Safari WebKit stability focused\n            echoCancellation: this.config.echoCancellation,\n            noiseSuppression: this.config.noiseSuppression,\n            autoGainControl: this.config.autoGainControl,\n            \n            // iOS specific: Ultra high sensitivity settings\n            ...(deviceSpecs.isIOS && {\n              googAutoGainControl: false,     // Google AGC complete disable\n              googNoiseSuppression: false,    // Google noise suppression disable\n              googEchoCancellation: false,    // Google echo cancellation disable\n              googHighpassFilter: false,      // Google highpass filter disable\n              googTypingNoiseDetection: false, // Typing noise detection disable\n              googBeamforming: false,         // Beamforming disable\n              mozAutoGainControl: false,      // Mozilla AGC disable\n              mozNoiseSuppression: false,     // Mozilla noise suppression disable\n            } as any),\n            \n            // Safari compatibility: Explicit quality settings\n            sampleRate: this.config.sampleRate,\n            channelCount: this.config.channelCount,\n            sampleSize: 16,\n            \n            // Safari WebKit additional stabilization settings\n            latency: this.config.latency,  // 100ms latency tolerance\n            volume: 1.0,   // Volume normalization\n            \n            // Flexible device selection (Safari compatibility)\n            deviceId: { ideal: 'default' }\n          }\n        };\n        \n        console.log('üé§ [AudioManager] Getting MediaStream with Safari-compatible settings:', audioConstraints);\n        this.mediaStream = await navigator.mediaDevices.getUserMedia(audioConstraints);\n        console.log('‚úÖ [AudioManager] MediaStream acquisition complete');\n      }\n\n      // Create SourceNode (single instance)\n      if (!this.sourceNode) {\n        this.sourceNode = this.audioContext.createMediaStreamSource(this.mediaStream);\n        console.log('‚úÖ [AudioManager] SourceNode creation complete');\n        \n        // MediaStream state check\n        const tracks = this.mediaStream.getTracks();\n        console.log('üé§ [AudioManager] MediaStream tracks:', tracks.map(t => ({\n          kind: t.kind,\n          label: t.label,\n          enabled: t.enabled,\n          readyState: t.readyState,\n          muted: t.muted\n        })));\n      }\n\n      // Create GainNode (for microphone sensitivity adjustment)\n      if (!this.gainNode) {\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.gain.value = this.currentSensitivity;\n        \n        // Connect SourceNode -> GainNode\n        this.sourceNode.connect(this.gainNode);\n        console.log(`‚úÖ [AudioManager] GainNode creation complete (sensitivity: ${this.currentSensitivity}x)`);\n      }\n\n      this.isInitialized = true;\n      this.refCount++;\n      this.lastError = null;\n\n      console.log(`üé§ [AudioManager] Initialization complete (refCount: ${this.refCount})`);\n\n      return {\n        audioContext: this.audioContext,\n        mediaStream: this.mediaStream,\n        sourceNode: this.sourceNode\n      };\n\n    } catch (error) {\n      console.error('‚ùå [AudioManager] Initialization error:', error);\n      this.lastError = error as Error;\n      this.isInitialized = false;\n      \n      // Cleanup on error\n      this._cleanup();\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Create dedicated AnalyserNode\n   * @param id - Analyser identifier\n   * @param options - Option settings\n   */\n  createAnalyser(id: string, options: {\n    fftSize?: number;\n    smoothingTimeConstant?: number;\n    minDecibels?: number;\n    maxDecibels?: number;\n    useFilters?: boolean;\n  } = {}): AnalyserNode {\n    if (!this.isInitialized || !this.audioContext || !this.sourceNode) {\n      throw new Error('AudioManager not initialized. Call initialize() first.');\n    }\n\n    // Remove existing analyser if present\n    this.removeAnalyser(id);\n\n    const {\n      fftSize = 2048,\n      smoothingTimeConstant = 0.8,\n      minDecibels = -90,\n      maxDecibels = -10,\n      useFilters = true\n    } = options;\n\n    // Create Analyser (Safari WebKit optimized)\n    const analyser = this.audioContext.createAnalyser();\n    \n    // Safari load reduction settings\n    analyser.fftSize = Math.min(fftSize, 2048); // Safari upper limit restriction\n    analyser.smoothingTimeConstant = Math.max(smoothingTimeConstant, 0.7); // Safari stabilization\n    analyser.minDecibels = Math.max(minDecibels, -80); // Safari range optimization\n    analyser.maxDecibels = Math.min(maxDecibels, -10);\n\n    let finalNode: AudioNode = this.gainNode || this.sourceNode;\n\n    // Create filter chain (optional)\n    if (useFilters) {\n      const filterChain = this._createFilterChain();\n      this.filters.set(id, filterChain);\n      \n      // Connect filter chain (starting from GainNode)\n      finalNode.connect(filterChain.highpass);\n      filterChain.highpass.connect(filterChain.lowpass);\n      filterChain.lowpass.connect(filterChain.notch);\n      filterChain.notch.connect(analyser);\n      \n      console.log(`üîß [AudioManager] Filtered Analyser created: ${id}`);\n    } else {\n      // Direct connection (signal from GainNode)\n      finalNode.connect(analyser);\n      console.log(`üîß [AudioManager] Raw signal Analyser created: ${id}`);\n    }\n    \n    // Important: Analyser only passes audio through, don't connect to destination\n    // (prevents microphone feedback)\n\n    this.analysers.set(id, analyser);\n    return analyser;\n  }\n\n  /**\n   * Create 3-stage noise reduction filter chain\n   */\n  private _createFilterChain() {\n    if (!this.audioContext) {\n      throw new Error('AudioContext not available');\n    }\n\n    // 1. Highpass filter (remove low frequency noise: cut below 80Hz)\n    const highpass = this.audioContext.createBiquadFilter();\n    highpass.type = 'highpass';\n    highpass.frequency.setValueAtTime(80, this.audioContext.currentTime);\n    highpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n    const lowpass = this.audioContext.createBiquadFilter();\n    lowpass.type = 'lowpass';\n    lowpass.frequency.setValueAtTime(800, this.audioContext.currentTime);\n    lowpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 3. Notch filter (remove power noise: 60Hz)\n    const notch = this.audioContext.createBiquadFilter();\n    notch.type = 'notch';\n    notch.frequency.setValueAtTime(60, this.audioContext.currentTime);\n    notch.Q.setValueAtTime(10, this.audioContext.currentTime);\n\n    return { highpass, lowpass, notch };\n  }\n\n  /**\n   * Remove specific analyser\n   */\n  removeAnalyser(id: string): void {\n    if (this.analysers.has(id)) {\n      const analyser = this.analysers.get(id)!;\n      analyser.disconnect();\n      this.analysers.delete(id);\n      console.log(`üóëÔ∏è [AudioManager] Analyser removed: ${id}`);\n    }\n\n    if (this.filters.has(id)) {\n      const filterChain = this.filters.get(id)!;\n      filterChain.highpass.disconnect();\n      filterChain.lowpass.disconnect();\n      filterChain.notch.disconnect();\n      this.filters.delete(id);\n      console.log(`üóëÔ∏è [AudioManager] Filter chain removed: ${id}`);\n    }\n  }\n\n  /**\n   * Adjust microphone sensitivity\n   * @param sensitivity - Sensitivity multiplier (0.1 ~ 10.0)\n   */\n  setSensitivity(sensitivity: number): void {\n    // Range limit (extended to 10.0x for iPad real device support)\n    const clampedSensitivity = Math.max(0.1, Math.min(10.0, sensitivity));\n    \n    if (this.gainNode) {\n      this.gainNode.gain.value = clampedSensitivity;\n      this.currentSensitivity = clampedSensitivity;\n      console.log(`üé§ [AudioManager] Microphone sensitivity updated: ${clampedSensitivity.toFixed(1)}x`);\n    } else {\n      // If GainNode not initialized, save setting only\n      this.currentSensitivity = clampedSensitivity;\n      console.log(`üé§ [AudioManager] Microphone sensitivity set (awaiting initialization): ${clampedSensitivity.toFixed(1)}x`);\n    }\n  }\n\n  /**\n   * Get current microphone sensitivity\n   */\n  getSensitivity(): number {\n    return this.currentSensitivity;\n  }\n\n  /**\n   * Get platform-specific settings according to specification\n   * Complies with MICROPHONE_PLATFORM_SPECIFICATIONS.md\n   */\n  getPlatformSpecs(): DeviceSpecs {\n    // Device detection (unified version)\n    const isIPhone = /iPhone/.test(navigator.userAgent);\n    const isIPad = /iPad/.test(navigator.userAgent);\n    const isIPadOS = /Macintosh/.test(navigator.userAgent) && 'ontouchend' in document;\n    const isIOS = isIPhone || isIPad || isIPadOS;\n    \n    // Specification-compliant parameters\n    const deviceType = (isIPad || isIPadOS) ? 'iPad' : isIPhone ? 'iPhone' : 'PC';\n    \n    return {\n      deviceType,\n      isIOS,\n      \n      // Volume calculation divisor (important: this value determines sensitivity)\n      divisor: isIOS ? 4.0 : 6.0,           // iPhone/iPad: 4.0, PC: 6.0\n      \n      // Volume correction (iPhone/iPad low frequency cut response)  \n      gainCompensation: isIOS ? 1.5 : 1.0,  // iPhone/iPad: 1.5, PC: 1.0\n      \n      // Noise threshold (basis for 0% display during silence)\n      noiseThreshold: isIOS ? 12 : 15,      // iPhone/iPad: 12, PC: 15\n      \n      // Smoothing (minimal)\n      smoothingFactor: 0.2,                 // Common to both platforms\n      \n      // Additional device-specific settings\n      sensitivity: this.currentSensitivity,\n      noiseGate: isIOS ? 0.01 : 0.02\n    };\n  }\n\n  /**\n   * Decrement reference count and cleanup\n   */\n  release(analyserIds: string[] = []): void {\n    // Remove specified analysers\n    analyserIds.forEach(id => this.removeAnalyser(id));\n\n    this.refCount = Math.max(0, this.refCount - 1);\n    console.log(`üìâ [AudioManager] Reference count decremented: ${this.refCount}`);\n\n    // Full cleanup only when no one is using it\n    if (this.refCount <= 0) {\n      console.log('üßπ [AudioManager] Starting full resource cleanup');\n      this._cleanup();\n    }\n  }\n\n  /**\n   * Force cleanup (for emergency use)\n   */\n  forceCleanup(): void {\n    console.log('üö® [AudioManager] Force cleanup executed');\n    this._cleanup();\n  }\n\n  /**\n   * Internal cleanup process\n   */\n  private _cleanup(): void {\n    console.log('üßπ [AudioManager] Starting cleanup');\n    \n    // Remove all analysers\n    for (const id of this.analysers.keys()) {\n      this.removeAnalyser(id);\n    }\n\n    // Stop MediaStream (health check compatible)\n    if (this.mediaStream) {\n      const tracks = this.mediaStream.getTracks();\n      console.log(`üõë [AudioManager] Stopping MediaStream: ${tracks.length} tracks`);\n      \n      tracks.forEach((track, index) => {\n        try {\n          if (track.readyState !== 'ended') {\n            track.stop();\n            console.log(`üõë [AudioManager] Track ${index} stop complete`);\n          } else {\n            console.log(`‚ö†Ô∏è [AudioManager] Track ${index} already ended`);\n          }\n        } catch (error) {\n          console.warn(`‚ö†Ô∏è [AudioManager] Track ${index} stop error:`, error);\n        }\n      });\n      \n      this.mediaStream = null;\n    }\n\n    // Close AudioContext\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      try {\n        this.audioContext.close();\n        console.log('üõë [AudioManager] AudioContext close complete');\n      } catch (error) {\n        console.warn('‚ö†Ô∏è [AudioManager] AudioContext close error:', error);\n      }\n      this.audioContext = null;\n    }\n\n    // Remove GainNode\n    if (this.gainNode) {\n      this.gainNode.disconnect();\n      this.gainNode = null;\n    }\n\n    // Remove SourceNode\n    if (this.sourceNode) {\n      this.sourceNode.disconnect();\n      this.sourceNode = null;\n    }\n\n    // Reset state\n    this.isInitialized = false;\n    this.refCount = 0;\n    this.initPromise = null;\n    this.currentSensitivity = this._getDefaultSensitivity(); // Reset to device-dependent default sensitivity\n\n    console.log('‚úÖ [AudioManager] Cleanup complete');\n  }\n\n  /**\n   * Get current status (for debugging)\n   */\n  getStatus() {\n    return {\n      isInitialized: this.isInitialized,\n      refCount: this.refCount,\n      audioContextState: this.audioContext?.state || 'none',\n      mediaStreamActive: this.mediaStream?.active || false,\n      activeAnalysers: Array.from(this.analysers.keys()),\n      activeFilters: Array.from(this.filters.keys()),\n      lastError: this.lastError,\n      currentSensitivity: this.currentSensitivity\n    };\n  }\n\n  /**\n   * MediaStream health status check\n   */\n  checkMediaStreamHealth(): HealthStatus {\n    if (!this.mediaStream) {\n      return { \n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    // MediaStream state check (Safari compatibility enhanced)\n    if (!this.mediaStream.active) {\n      return {\n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const tracks = this.mediaStream.getTracks();\n    if (tracks.length === 0) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const audioTrack = tracks.find(track => track.kind === 'audio');\n    if (!audioTrack) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: tracks.map(track => ({\n          kind: track.kind,\n          enabled: track.enabled,\n          readyState: track.readyState,\n          muted: track.muted\n        })),\n        healthy: false\n      };\n    }\n\n    const trackStates: TrackState[] = tracks.map(track => ({\n      kind: track.kind,\n      enabled: track.enabled,\n      readyState: track.readyState,\n      muted: track.muted\n    }));\n\n    // AudioTrack detailed state check (Safari WebKit compatibility)\n    if (audioTrack.readyState === 'ended') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    if (!audioTrack.enabled) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // Safari-specific muted state check\n    if (audioTrack.muted) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // Additional check: MediaStream and Track consistency verification\n    if (this.mediaStream.active && audioTrack.readyState !== 'live') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    return {\n      mediaStreamActive: this.mediaStream.active,\n      audioContextState: this.audioContext?.state || 'none',\n      trackStates,\n      healthy: true,\n      refCount: this.refCount\n    };\n  }\n}","/**\n * PitchDetector - Framework-agnostic High-precision Pitch Detection\n * \n * Based on Pitchy library with McLeod Pitch Method\n * Includes harmonic correction, noise filtering, and device-specific optimization\n */\n\nimport { PitchDetector as PitchyDetector } from 'pitchy';\nimport type { \n  PitchDetectorConfig, \n  PitchDetectionResult, \n  PitchCallback,\n  ErrorCallback,\n  StateChangeCallback,\n  DeviceSpecs\n} from '../types';\nimport { AudioManager } from './AudioManager';\n\nexport class PitchDetector {\n  // Core components\n  private audioManager: AudioManager;\n  private pitchDetector: PitchyDetector<Float32Array> | null = null;\n  private analyser: AnalyserNode | null = null;\n  private rawAnalyser: AnalyserNode | null = null;\n  private animationFrame: number | null = null;\n  \n  // State management\n  private componentState: 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'error' = 'uninitialized';\n  private isInitialized = false;\n  private isDetecting = false;\n  private lastError: Error | null = null;\n  \n  // Analyser management\n  private analyserIds: string[] = [];\n  \n  // Detection data\n  private currentVolume = 0;\n  private rawVolume = 0;\n  private currentFrequency = 0;\n  private detectedNote = '--';\n  private pitchClarity = 0;\n  \n  // Stabilization buffers\n  private volumeHistory: number[] = [];\n  private stableVolume = 0;\n  \n  // Harmonic correction\n  private previousFrequency = 0;\n  private harmonicHistory: Array<{frequency: number, confidence: number, timestamp: number}> = [];\n  \n  // Configuration\n  private config: Required<PitchDetectorConfig>;\n  private disableHarmonicCorrection = false;\n  \n  // Callbacks\n  private callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  } = {};\n  \n  // Device specifications\n  private deviceSpecs: DeviceSpecs;\n\n  constructor(audioManager: AudioManager, config: PitchDetectorConfig = {}) {\n    this.audioManager = audioManager;\n    this.config = {\n      fftSize: 4096,\n      smoothing: 0.1,\n      clarityThreshold: 0.8,\n      minVolumeAbsolute: 0.01,\n      ...config\n    };\n    \n    this.deviceSpecs = this.audioManager.getPlatformSpecs();\n  }\n\n  /**\n   * Set callback functions\n   */\n  setCallbacks(callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Initialize pitch detector with external AudioContext\n   */\n  async initialize(): Promise<void> {\n    try {\n      this.componentState = 'initializing';\n      this.lastError = null;\n      \n      console.log('üéôÔ∏è [PitchDetector] Starting initialization via AudioManager');\n      \n      // Get shared resources from AudioManager\n      await this.audioManager.initialize();\n      \n      console.log('‚úÖ [PitchDetector] AudioManager resources acquired');\n      \n      // Create dedicated Analyser (with filters)\n      const filteredAnalyserId = `pitch-detector-filtered-${Date.now()}`;\n      this.analyser = this.audioManager.createAnalyser(filteredAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: true\n      });\n      this.analyserIds.push(filteredAnalyserId);\n      \n      // Create raw signal Analyser (for comparison)\n      const rawAnalyserId = `pitch-detector-raw-${Date.now()}`;\n      this.rawAnalyser = this.audioManager.createAnalyser(rawAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: false\n      });\n      this.analyserIds.push(rawAnalyserId);\n      \n      console.log('‚úÖ [PitchDetector] Analysers created:', this.analyserIds);\n      \n      // Initialize PitchDetector\n      this.pitchDetector = PitchyDetector.forFloat32Array(this.analyser.fftSize);\n      \n      // Initialization complete\n      this.componentState = 'ready';\n      this.isInitialized = true;\n      \n      // Notify state change\n      this.callbacks.onStateChange?.(this.componentState);\n      \n      console.log('‚úÖ [PitchDetector] Initialization complete');\n      \n    } catch (error) {\n      console.error('‚ùå [PitchDetector] Initialization error:', error);\n      this.componentState = 'error';\n      this.lastError = error as Error;\n      this.isInitialized = false;\n      \n      // Notify error\n      this.callbacks.onError?.(error as Error);\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Start pitch detection\n   */\n  startDetection(): boolean {\n    if (this.componentState !== 'ready') {\n      const error = new Error(`Cannot start detection: component state is ${this.componentState}`);\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    if (!this.analyser || !this.pitchDetector) {\n      const error = new Error('Required components not available');\n      this.componentState = 'error';\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    this.componentState = 'detecting';\n    this.isDetecting = true;\n    this.callbacks.onStateChange?.(this.componentState);\n    this.detectPitch();\n    return true;\n  }\n\n  /**\n   * Stop pitch detection\n   */\n  stopDetection(): void {\n    this.isDetecting = false;\n    if (this.animationFrame) {\n      cancelAnimationFrame(this.animationFrame);\n      this.animationFrame = null;\n    }\n    \n    // Return state to ready (if initialized)\n    if (this.componentState === 'detecting' && this.isInitialized) {\n      this.componentState = 'ready';\n      this.callbacks.onStateChange?.(this.componentState);\n    }\n  }\n\n  /**\n   * Real-time pitch detection loop\n   */\n  private detectPitch(): void {\n    if (!this.isDetecting || !this.analyser || !this.rawAnalyser || !this.pitchDetector) return;\n    \n    const bufferLength = this.analyser.fftSize;\n    const buffer = new Float32Array(bufferLength);\n    const rawBuffer = new Float32Array(this.rawAnalyser.fftSize);\n    \n    this.analyser.getFloatTimeDomainData(buffer);\n    this.rawAnalyser.getFloatTimeDomainData(rawBuffer);\n    \n    // Volume calculation (filtered)\n    let sum = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      sum += Math.abs(buffer[i]);\n    }\n    const rms = Math.sqrt(sum / bufferLength);\n    \n    // Platform-specific volume calculation\n    const platformSpecs = this.deviceSpecs;\n    const adjustedRms = rms * platformSpecs.gainCompensation;\n    const volumePercent = Math.max(0, Math.min(100, \n      (adjustedRms * 100) / platformSpecs.divisor * 6 - platformSpecs.noiseThreshold\n    ));\n    \n    // Raw volume calculation (pre-filter)\n    let rawSum = 0;\n    for (let i = 0; i < rawBuffer.length; i++) {\n      rawSum += Math.abs(rawBuffer[i]);\n    }\n    const rawRms = Math.sqrt(rawSum / rawBuffer.length);\n    const rawVolumePercent = Math.max(0, Math.min(100, \n      (rawRms * platformSpecs.gainCompensation * 100) / platformSpecs.divisor * 6 - platformSpecs.noiseThreshold\n    ));\n    \n    // Volume stabilization (5-frame moving average)\n    this.volumeHistory.push(volumePercent);\n    if (this.volumeHistory.length > 5) {\n      this.volumeHistory.shift();\n    }\n    this.stableVolume = this.volumeHistory.reduce((sum, v) => sum + v, 0) / this.volumeHistory.length;\n    this.currentVolume = this.stableVolume;\n    this.rawVolume = rawVolumePercent;\n    \n    // Pitch detection (using PitchDetector)\n    const audioContext = this.audioManager.getStatus().audioContextState;\n    const sampleRate = audioContext === 'running' ? 44100 : 44100; // Default fallback\n    const [pitch, clarity] = this.pitchDetector.findPitch(buffer, sampleRate);\n    \n    // Human vocal range filtering (practical adjustment)\n    // Optimized for actual human voice range:\n    // - Low range: 65Hz and above (C2 and above, considering male lowest vocal range)  \n    // - High range: 1200Hz and below (practical singing range)\n    // - Exclude extreme low frequency noise (G-1, etc.) reliably\n    const isValidVocalRange = pitch >= 65 && pitch <= 1200;\n    \n    if (pitch && clarity > this.config.clarityThreshold && this.currentVolume > 30 && isValidVocalRange) {\n      let finalFreq = pitch;\n      \n      // Harmonic correction control (for 230Hz stuck issue debugging)\n      if (!this.disableHarmonicCorrection) {\n        // Apply unified harmonic correction system (pass volume information)\n        const normalizedVolume = Math.min(this.currentVolume / 100, 1.0); // Normalize to 0-1\n        finalFreq = this.correctHarmonic(pitch, normalizedVolume);\n      }\n      \n      // Update frequency display\n      this.currentFrequency = Math.round(finalFreq);\n      this.detectedNote = this.frequencyToNote(this.currentFrequency);\n      this.pitchClarity = clarity;\n      \n    } else {\n      // Clear harmonic correction history when signal is weak\n      if (this.currentFrequency === 0) {\n        this.resetHarmonicHistory();\n      }\n      \n      // Clear frequency display\n      this.currentFrequency = 0;\n      this.detectedNote = '--';\n      this.pitchClarity = 0;\n    }\n    \n    // Set VolumeBar to 0 when no pitch is detected (counter extreme low frequency noise)\n    const displayVolume = this.currentFrequency > 0 ? this.rawVolume : 0;\n    \n    // Send data to callback\n    const result: PitchDetectionResult = {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      clarity: this.pitchClarity,\n      volume: displayVolume,\n      cents: this.currentFrequency > 0 ? this.frequencyToCents(this.currentFrequency) : undefined\n    };\n    \n    this.callbacks.onPitchUpdate?.(result);\n    \n    this.animationFrame = requestAnimationFrame(() => this.detectPitch());\n  }\n\n  /**\n   * Harmonic correction system\n   */\n  private correctHarmonic(frequency: number, volume: number): number {\n    const now = Date.now();\n    const confidenceThreshold = 0.7;\n    const historyWindow = 1000; // 1 second\n    \n    // Clean old history\n    this.harmonicHistory = this.harmonicHistory.filter(h => now - h.timestamp < historyWindow);\n    \n    // Calculate confidence based on volume and stability\n    const volumeConfidence = Math.min(volume * 1.5, 1.0);\n    const stabilityConfidence = this.previousFrequency > 0 ? \n      Math.max(0, 1 - Math.abs(frequency - this.previousFrequency) / this.previousFrequency) : 0.5;\n    const confidence = (volumeConfidence + stabilityConfidence) / 2;\n    \n    // Add to history\n    this.harmonicHistory.push({ frequency, confidence, timestamp: now });\n    \n    // Check for harmonic patterns\n    if (this.harmonicHistory.length >= 3) {\n      const recentHistory = this.harmonicHistory.slice(-5);\n      const avgFrequency = recentHistory.reduce((sum, h) => sum + h.frequency, 0) / recentHistory.length;\n      const avgConfidence = recentHistory.reduce((sum, h) => sum + h.confidence, 0) / recentHistory.length;\n      \n      // Check for 2x harmonic (octave up error)\n      const halfFrequency = frequency / 2;\n      if (Math.abs(halfFrequency - avgFrequency) / avgFrequency < 0.1 && avgConfidence > confidenceThreshold) {\n        console.log(`üîß [PitchDetector] Octave correction: ${frequency}Hz ‚Üí ${halfFrequency}Hz`);\n        this.previousFrequency = halfFrequency;\n        return halfFrequency;\n      }\n      \n      // Check for 1/2x harmonic (octave down error)\n      const doubleFrequency = frequency * 2;\n      if (Math.abs(doubleFrequency - avgFrequency) / avgFrequency < 0.1 && avgConfidence > confidenceThreshold) {\n        console.log(`üîß [PitchDetector] Octave up correction: ${frequency}Hz ‚Üí ${doubleFrequency}Hz`);\n        this.previousFrequency = doubleFrequency;\n        return doubleFrequency;\n      }\n    }\n    \n    this.previousFrequency = frequency;\n    return frequency;\n  }\n\n  /**\n   * Reset harmonic correction history\n   */\n  private resetHarmonicHistory(): void {\n    this.harmonicHistory = [];\n    this.previousFrequency = 0;\n  }\n\n  /**\n   * Convert frequency to note name\n   */\n  private frequencyToNote(frequency: number): string {\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const A4 = 440;\n    \n    if (frequency <= 0) return '--';\n    \n    const semitonesFromA4 = Math.round(12 * Math.log2(frequency / A4));\n    const noteIndex = (semitonesFromA4 + 9 + 120) % 12;\n    const octave = Math.floor((semitonesFromA4 + 9) / 12) + 4;\n    \n    return noteNames[noteIndex] + octave;\n  }\n\n  /**\n   * Convert frequency to cents deviation from nearest note\n   */\n  private frequencyToCents(frequency: number): number {\n    const A4 = 440;\n    const semitonesFromA4 = 12 * Math.log2(frequency / A4);\n    const nearestSemitone = Math.round(semitonesFromA4);\n    const centsDeviation = (semitonesFromA4 - nearestSemitone) * 100;\n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Reset display state\n   */\n  resetDisplayState(): void {\n    this.currentVolume = 0;\n    this.rawVolume = 0;\n    this.currentFrequency = 0;\n    this.detectedNote = '--';\n    this.pitchClarity = 0;\n    this.stableVolume = 0;\n    \n    // Clear buffers\n    this.volumeHistory = [];\n    \n    // Reset harmonic correction\n    this.resetHarmonicHistory();\n    \n    console.log('üîÑ [PitchDetector] Display state reset');\n  }\n\n  /**\n   * Enable/disable harmonic correction\n   */\n  setHarmonicCorrectionEnabled(enabled: boolean): void {\n    this.disableHarmonicCorrection = !enabled;\n    if (!enabled) {\n      this.resetHarmonicHistory();\n    }\n  }\n\n  /**\n   * Get initialization status\n   */\n  getIsInitialized(): boolean {\n    return this.isInitialized && this.componentState === 'ready';\n  }\n\n  /**\n   * Get current state\n   */\n  getState() {\n    return {\n      componentState: this.componentState,\n      isInitialized: this.isInitialized,\n      isDetecting: this.isDetecting,\n      lastError: this.lastError,\n      hasRequiredComponents: !!(this.analyser && this.pitchDetector)\n    };\n  }\n\n  /**\n   * Get current detection result\n   */\n  getCurrentResult(): PitchDetectionResult {\n    return {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      clarity: this.pitchClarity,\n      volume: this.currentFrequency > 0 ? this.rawVolume : 0\n    };\n  }\n\n  /**\n   * Reinitialize detector\n   */\n  async reinitialize(): Promise<void> {\n    console.log('üîÑ [PitchDetector] Starting reinitialization');\n    \n    // Cleanup current state\n    this.cleanup();\n    \n    // Short wait to ensure resource release\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    // Execute reinitialization\n    await this.initialize();\n    \n    console.log('‚úÖ [PitchDetector] Reinitialization complete');\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    console.log('üßπ [PitchDetector] Starting cleanup');\n    \n    this.stopDetection();\n    \n    // Notify AudioManager to release created Analysers\n    if (this.analyserIds.length > 0) {\n      this.audioManager.release(this.analyserIds);\n      console.log('üì§ [PitchDetector] Notified AudioManager of Analyser release:', this.analyserIds);\n      this.analyserIds = [];\n    }\n    \n    // Reset state\n    this.componentState = 'uninitialized';\n    this.isInitialized = false;\n    this.lastError = null;\n    \n    // Clear references (actual resources managed by AudioManager)\n    this.analyser = null;\n    this.rawAnalyser = null;\n    this.pitchDetector = null;\n    \n    // Clear history\n    this.volumeHistory = [];\n    this.resetHarmonicHistory();\n    \n    console.log('‚úÖ [PitchDetector] Cleanup complete');\n  }\n}","/**\n * NoiseFilter - 3-stage Noise Reduction Filter Chain\n * \n * Implements sophisticated noise filtering for voice detection:\n * 1. Highpass filter - Remove low frequency noise (below 80Hz)\n * 2. Lowpass filter - Remove high frequency noise (above 800Hz) \n * 3. Notch filter - Remove power line noise (60Hz)\n */\n\nimport type { NoiseFilterConfig } from '../types';\n\nexport class NoiseFilter {\n  private audioContext: AudioContext;\n  private config: Required<NoiseFilterConfig>;\n  \n  // Filter nodes\n  private highpassFilter: BiquadFilterNode | null = null;\n  private lowpassFilter: BiquadFilterNode | null = null;\n  private notchFilter: BiquadFilterNode | null = null;\n  \n  // Chain state\n  private isConnected = false;\n  private inputNode: AudioNode | null = null;\n  private outputNode: AudioNode | null = null;\n\n  constructor(audioContext: AudioContext, config: NoiseFilterConfig = {}) {\n    this.audioContext = audioContext;\n    this.config = {\n      highpassFreq: 80,\n      lowpassFreq: 800,\n      notchFreq: 60,\n      highpassQ: 0.7,\n      lowpassQ: 0.7,\n      notchQ: 10.0,\n      useFilters: true,\n      ...config\n    };\n    \n    this.createFilterChain();\n  }\n\n  /**\n   * Create the 3-stage filter chain\n   */\n  private createFilterChain(): void {\n    if (!this.config.useFilters) {\n      console.log('üîá [NoiseFilter] Filters disabled - bypassing filter chain');\n      return;\n    }\n\n    try {\n      // 1. Highpass filter (remove low frequency noise: cut below 80Hz)\n      this.highpassFilter = this.audioContext.createBiquadFilter();\n      this.highpassFilter.type = 'highpass';\n      this.highpassFilter.frequency.setValueAtTime(this.config.highpassFreq, this.audioContext.currentTime);\n      this.highpassFilter.Q.setValueAtTime(this.config.highpassQ, this.audioContext.currentTime);\n\n      // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n      this.lowpassFilter = this.audioContext.createBiquadFilter();\n      this.lowpassFilter.type = 'lowpass';\n      this.lowpassFilter.frequency.setValueAtTime(this.config.lowpassFreq, this.audioContext.currentTime);\n      this.lowpassFilter.Q.setValueAtTime(this.config.lowpassQ, this.audioContext.currentTime);\n\n      // 3. Notch filter (remove power line noise: 60Hz)\n      this.notchFilter = this.audioContext.createBiquadFilter();\n      this.notchFilter.type = 'notch';\n      this.notchFilter.frequency.setValueAtTime(this.config.notchFreq, this.audioContext.currentTime);\n      this.notchFilter.Q.setValueAtTime(this.config.notchQ, this.audioContext.currentTime);\n\n      console.log('‚úÖ [NoiseFilter] 3-stage filter chain created', {\n        highpass: `${this.config.highpassFreq}Hz (Q=${this.config.highpassQ})`,\n        lowpass: `${this.config.lowpassFreq}Hz (Q=${this.config.lowpassQ})`,\n        notch: `${this.config.notchFreq}Hz (Q=${this.config.notchQ})`\n      });\n\n    } catch (error) {\n      console.error('‚ùå [NoiseFilter] Failed to create filter chain:', error);\n      throw new Error(`NoiseFilter initialization failed: ${error}`);\n    }\n  }\n\n  /**\n   * Connect the filter chain between input and output nodes\n   */\n  connect(inputNode: AudioNode, outputNode?: AudioNode): AudioNode {\n    if (!this.config.useFilters) {\n      // Bypass filtering - direct connection\n      if (outputNode) {\n        inputNode.connect(outputNode);\n      }\n      return inputNode;\n    }\n\n    if (!this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      throw new Error('NoiseFilter not properly initialized');\n    }\n\n    try {\n      // Disconnect any existing connections\n      this.disconnect();\n\n      // Store references\n      this.inputNode = inputNode;\n      this.outputNode = outputNode || null;\n\n      // Create filter chain: input ‚Üí highpass ‚Üí lowpass ‚Üí notch ‚Üí output\n      inputNode.connect(this.highpassFilter);\n      this.highpassFilter.connect(this.lowpassFilter);\n      this.lowpassFilter.connect(this.notchFilter);\n      \n      if (outputNode) {\n        this.notchFilter.connect(outputNode);\n      }\n\n      this.isConnected = true;\n\n      console.log('üîó [NoiseFilter] Filter chain connected');\n      \n      // Return the final node in the chain (notch filter) for further connections\n      return this.notchFilter!;\n\n    } catch (error) {\n      console.error('‚ùå [NoiseFilter] Connection failed:', error);\n      throw new Error(`NoiseFilter connection failed: ${error}`);\n    }\n  }\n\n  /**\n   * Disconnect the filter chain\n   */\n  disconnect(): void {\n    try {\n      if (this.highpassFilter) {\n        this.highpassFilter.disconnect();\n      }\n      if (this.lowpassFilter) {\n        this.lowpassFilter.disconnect();\n      }\n      if (this.notchFilter) {\n        this.notchFilter.disconnect();\n      }\n      \n      this.isConnected = false;\n      this.inputNode = null;\n      this.outputNode = null;\n\n      console.log('üîå [NoiseFilter] Filter chain disconnected');\n\n    } catch (error) {\n      console.warn('‚ö†Ô∏è [NoiseFilter] Disconnect warning:', error);\n    }\n  }\n\n  /**\n   * Update filter parameters dynamically\n   */\n  updateFrequencies(params: {\n    highpassFreq?: number;\n    lowpassFreq?: number;\n    notchFreq?: number;\n    highpassQ?: number;\n    lowpassQ?: number;\n    notchQ?: number;\n  }): void {\n    const currentTime = this.audioContext.currentTime;\n\n    try {\n      if (params.highpassFreq !== undefined && this.highpassFilter) {\n        this.highpassFilter.frequency.setValueAtTime(params.highpassFreq, currentTime);\n        this.config.highpassFreq = params.highpassFreq;\n      }\n\n      if (params.lowpassFreq !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.frequency.setValueAtTime(params.lowpassFreq, currentTime);\n        this.config.lowpassFreq = params.lowpassFreq;\n      }\n\n      if (params.notchFreq !== undefined && this.notchFilter) {\n        this.notchFilter.frequency.setValueAtTime(params.notchFreq, currentTime);\n        this.config.notchFreq = params.notchFreq;\n      }\n\n      if (params.highpassQ !== undefined && this.highpassFilter) {\n        this.highpassFilter.Q.setValueAtTime(params.highpassQ, currentTime);\n        this.config.highpassQ = params.highpassQ;\n      }\n\n      if (params.lowpassQ !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.Q.setValueAtTime(params.lowpassQ, currentTime);\n        this.config.lowpassQ = params.lowpassQ;\n      }\n\n      if (params.notchQ !== undefined && this.notchFilter) {\n        this.notchFilter.Q.setValueAtTime(params.notchQ, currentTime);\n        this.config.notchQ = params.notchQ;\n      }\n\n      console.log('üîß [NoiseFilter] Filter parameters updated:', params);\n\n    } catch (error) {\n      console.error('‚ùå [NoiseFilter] Parameter update failed:', error);\n      throw new Error(`NoiseFilter parameter update failed: ${error}`);\n    }\n  }\n\n  /**\n   * Enable or disable the entire filter chain\n   */\n  setEnabled(enabled: boolean): void {\n    if (enabled === this.config.useFilters) {\n      return; // No change needed\n    }\n\n    this.config.useFilters = enabled;\n\n    if (this.isConnected && this.inputNode) {\n      // Reconnect with new settings\n      const savedOutputNode = this.outputNode;\n      this.disconnect();\n      \n      if (enabled) {\n        // Recreate filters if they were destroyed\n        if (!this.highpassFilter) {\n          this.createFilterChain();\n        }\n      }\n      \n      this.connect(this.inputNode, savedOutputNode || undefined);\n    }\n\n    console.log(`üîò [NoiseFilter] Filters ${enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  /**\n   * Get filter response at specific frequency (for visualization)\n   */\n  getFilterResponse(frequency: number): { magnitude: number; phase: number } {\n    if (!this.config.useFilters || !this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n\n    try {\n      // Create frequency array for single frequency\n      const frequencyArray = new Float32Array([frequency]);\n      const magnitudeArray = new Float32Array(1);\n      const phaseArray = new Float32Array(1);\n\n      // Calculate combined response (simplified - in practice you'd need to chain the calculations)\n      this.highpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const highpassMagnitude = magnitudeArray[0];\n      \n      this.lowpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const lowpassMagnitude = magnitudeArray[0];\n      \n      this.notchFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const notchMagnitude = magnitudeArray[0];\n\n      // Combined magnitude (multiply individual filter responses)\n      const combinedMagnitude = highpassMagnitude * lowpassMagnitude * notchMagnitude;\n      \n      return { \n        magnitude: combinedMagnitude, \n        phase: phaseArray[0] \n      };\n\n    } catch (error) {\n      console.warn('‚ö†Ô∏è [NoiseFilter] Filter response calculation failed:', error);\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n  }\n\n  /**\n   * Get current filter configuration\n   */\n  getConfig(): Required<NoiseFilterConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Get filter chain status\n   */\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      useFilters: this.config.useFilters,\n      hasFilters: !!(this.highpassFilter && this.lowpassFilter && this.notchFilter),\n      filterTypes: this.config.useFilters ? ['highpass', 'lowpass', 'notch'] : [],\n      frequencies: {\n        highpass: this.config.highpassFreq,\n        lowpass: this.config.lowpassFreq,\n        notch: this.config.notchFreq\n      },\n      qFactors: {\n        highpass: this.config.highpassQ,\n        lowpass: this.config.lowpassQ,\n        notch: this.config.notchQ\n      }\n    };\n  }\n\n  /**\n   * Get the final output node (for chaining)\n   */\n  getOutputNode(): AudioNode | null {\n    if (!this.config.useFilters || !this.notchFilter) {\n      return this.inputNode || null; // Bypass mode\n    }\n    return this.notchFilter;\n  }\n\n  /**\n   * Cleanup and destroy filter nodes\n   */\n  destroy(): void {\n    console.log('üóëÔ∏è [NoiseFilter] Destroying filter chain');\n    \n    this.disconnect();\n    \n    // Note: Filter nodes are automatically garbage collected\n    // when disconnected and no longer referenced\n    this.highpassFilter = null;\n    this.lowpassFilter = null;\n    this.notchFilter = null;\n    \n    console.log('‚úÖ [NoiseFilter] Cleanup complete');\n  }\n\n  /**\n   * Create a preset configuration for different scenarios\n   */\n  static getPresetConfig(preset: 'voice' | 'instrument' | 'wide' | 'minimal'): NoiseFilterConfig {\n    switch (preset) {\n      case 'voice':\n        return {\n          highpassFreq: 80,   // Remove breath noise\n          lowpassFreq: 800,   // Focus on vocal fundamentals\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.7,\n          lowpassQ: 0.7,\n          notchQ: 10.0,\n          useFilters: true\n        };\n        \n      case 'instrument':\n        return {\n          highpassFreq: 40,   // Preserve low fundamentals\n          lowpassFreq: 2000,  // Allow more harmonics\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.5,\n          lowpassQ: 0.5,\n          notchQ: 8.0,\n          useFilters: true\n        };\n        \n      case 'wide':\n        return {\n          highpassFreq: 20,   // Minimal low cut\n          lowpassFreq: 5000,  // Minimal high cut\n          notchFreq: 60,      // Only power line filtering\n          highpassQ: 0.3,\n          lowpassQ: 0.3,\n          notchQ: 5.0,\n          useFilters: true\n        };\n        \n      case 'minimal':\n        return {\n          highpassFreq: 60,   // Just power line region\n          lowpassFreq: 8000,  // Very high cutoff\n          notchFreq: 60,      // Power line only\n          highpassQ: 0.1,\n          lowpassQ: 0.1,\n          notchQ: 3.0,\n          useFilters: true\n        };\n        \n      default:\n        return {\n          useFilters: false\n        };\n    }\n  }\n}","/**\n * MicrophoneLifecycleManager - Page transition and idle detection microphone control\n * \n * Manages microphone lifecycle across page transitions, idle periods, and redirects\n * Implements reference counting for safe resource management\n * Handles SSR compatibility and automatic recovery\n */\n\nimport type { \n  MediaStreamResources, \n  HealthStatus,\n  LifecycleEvents,\n  StateChangeCallback,\n  ErrorCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\n\nexport class MicrophoneLifecycleManager {\n  private audioManager: AudioManager;\n  private refCount = 0;\n  private isActive = false;\n  private lastHealthCheck: HealthStatus | null = null;\n  \n  // Monitoring intervals\n  private healthCheckInterval: number | null = null;\n  private idleCheckInterval: number | null = null;\n  private visibilityCheckInterval: number | null = null;\n  \n  // State tracking\n  private lastActivityTime = Date.now();\n  private isPageVisible = true;\n  private isUserActive = true;\n  private autoRecoveryAttempts = 0;\n  private maxAutoRecoveryAttempts = 3;\n  \n  // Event listeners storage for cleanup\n  private eventListeners = new Map<string, EventListener>();\n  \n  // Configuration\n  private config = {\n    healthCheckIntervalMs: 5000,     // 5 seconds\n    idleTimeoutMs: 300000,           // 5 minutes\n    autoRecoveryDelayMs: 2000,       // 2 seconds\n    maxIdleTimeBeforeRelease: 600000 // 10 minutes\n  };\n  \n  // Callbacks\n  private callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  } = {};\n\n  constructor(audioManager: AudioManager, config: Partial<typeof MicrophoneLifecycleManager.prototype.config> = {}) {\n    this.audioManager = audioManager;\n    this.config = { ...this.config, ...config };\n    \n    // SSR compatibility check\n    if (typeof window === 'undefined') {\n      console.log('üîá [MicrophoneLifecycleManager] SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.setupEventListeners();\n  }\n\n  /**\n   * Set callback functions\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Acquire microphone resources (with reference counting)\n   */\n  async acquire(): Promise<MediaStreamResources> {\n    this.refCount++;\n    \n    console.log(`üé§ [MicrophoneLifecycleManager] Acquiring resources (refCount: ${this.refCount})`);\n    \n    try {\n      // Initialize AudioManager if not already active\n      if (!this.isActive) {\n        const resources = await this.audioManager.initialize();\n        this.isActive = true;\n        this.lastActivityTime = Date.now();\n        this.autoRecoveryAttempts = 0;\n        \n        // Start monitoring\n        this.startHealthMonitoring();\n        this.startIdleMonitoring();\n        this.startVisibilityMonitoring();\n        \n        this.callbacks.onStateChange?.('active');\n        \n        console.log('üü¢ [MicrophoneLifecycleManager] Microphone activated');\n        return resources;\n      }\n      \n      // Already active - just update activity and return existing resources\n      this.updateActivity();\n      const resources = await this.audioManager.initialize();\n      return resources;\n      \n    } catch (error) {\n      console.error('‚ùå [MicrophoneLifecycleManager] Failed to acquire resources:', error);\n      this.refCount = Math.max(0, this.refCount - 1);\n      this.callbacks.onError?.(error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Release microphone resources (with reference counting)\n   */\n  release(): void {\n    this.refCount = Math.max(0, this.refCount - 1);\n    \n    console.log(`üìâ [MicrophoneLifecycleManager] Releasing resources (refCount: ${this.refCount})`);\n    \n    // Only stop monitoring and cleanup when no references remain\n    if (this.refCount <= 0) {\n      this.stopAllMonitoring();\n      this.audioManager.release();\n      this.isActive = false;\n      \n      this.callbacks.onStateChange?.('inactive');\n      \n      console.log('üî¥ [MicrophoneLifecycleManager] Microphone deactivated');\n    }\n  }\n\n  /**\n   * Force release all resources (emergency cleanup)\n   */\n  forceRelease(): void {\n    console.log('üö® [MicrophoneLifecycleManager] Force release - cleaning up all resources');\n    \n    this.refCount = 0;\n    this.stopAllMonitoring();\n    this.audioManager.forceCleanup();\n    this.isActive = false;\n    \n    this.callbacks.onStateChange?.('inactive');\n  }\n\n  /**\n   * Setup page lifecycle event listeners\n   */\n  private setupEventListeners(): void {\n    // Page visibility change\n    const visibilityChangeHandler = () => {\n      this.isPageVisible = !document.hidden;\n      this.handleVisibilityChange();\n    };\n    \n    // User activity tracking\n    const activityHandler = () => {\n      this.updateActivity();\n    };\n    \n    // Page unload / beforeunload\n    const unloadHandler = () => {\n      this.forceRelease();\n    };\n    \n    // Page focus / blur\n    const focusHandler = () => {\n      this.isPageVisible = true;\n      this.handleVisibilityChange();\n    };\n    \n    const blurHandler = () => {\n      this.isPageVisible = false;\n      this.handleVisibilityChange();\n    };\n    \n    // Add event listeners\n    document.addEventListener('visibilitychange', visibilityChangeHandler);\n    document.addEventListener('mousemove', activityHandler);\n    document.addEventListener('keydown', activityHandler);\n    document.addEventListener('click', activityHandler);\n    document.addEventListener('scroll', activityHandler);\n    document.addEventListener('touchstart', activityHandler);\n    window.addEventListener('beforeunload', unloadHandler);\n    window.addEventListener('unload', unloadHandler);\n    window.addEventListener('focus', focusHandler);\n    window.addEventListener('blur', blurHandler);\n    \n    // Store references for cleanup\n    this.eventListeners.set('visibilitychange', visibilityChangeHandler);\n    this.eventListeners.set('mousemove', activityHandler);\n    this.eventListeners.set('keydown', activityHandler);\n    this.eventListeners.set('click', activityHandler);\n    this.eventListeners.set('scroll', activityHandler);\n    this.eventListeners.set('touchstart', activityHandler);\n    this.eventListeners.set('beforeunload', unloadHandler);\n    this.eventListeners.set('unload', unloadHandler);\n    this.eventListeners.set('focus', focusHandler);\n    this.eventListeners.set('blur', blurHandler);\n    \n    console.log('üëÇ [MicrophoneLifecycleManager] Event listeners setup complete');\n  }\n\n  /**\n   * Handle page visibility changes\n   */\n  private handleVisibilityChange(): void {\n    if (!this.isActive) return;\n    \n    if (this.isPageVisible) {\n      console.log('üëÅÔ∏è [MicrophoneLifecycleManager] Page became visible - resuming monitoring');\n      this.updateActivity();\n      \n      // Check microphone health after page becomes visible\n      setTimeout(() => {\n        this.performHealthCheck();\n      }, 1000);\n      \n    } else {\n      console.log('üôà [MicrophoneLifecycleManager] Page became hidden - reducing monitoring frequency');\n      \n      // Consider releasing resources if page stays hidden for too long\n      setTimeout(() => {\n        if (!this.isPageVisible && this.isActive) {\n          const timeSinceActivity = Date.now() - this.lastActivityTime;\n          if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n            console.log('‚è∞ [MicrophoneLifecycleManager] Long inactivity detected - releasing resources');\n            this.forceRelease();\n          }\n        }\n      }, this.config.maxIdleTimeBeforeRelease);\n    }\n  }\n\n  /**\n   * Update user activity timestamp\n   */\n  private updateActivity(): void {\n    this.lastActivityTime = Date.now();\n    this.isUserActive = true;\n  }\n\n  /**\n   * Start health monitoring\n   */\n  private startHealthMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n    \n    this.healthCheckInterval = window.setInterval(() => {\n      this.performHealthCheck();\n    }, this.config.healthCheckIntervalMs);\n    \n    console.log(`üíì [MicrophoneLifecycleManager] Health monitoring started (${this.config.healthCheckIntervalMs}ms interval)`);\n  }\n\n  /**\n   * Start idle monitoring\n   */\n  private startIdleMonitoring(): void {\n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n    }\n    \n    this.idleCheckInterval = window.setInterval(() => {\n      this.checkIdleTimeout();\n    }, 30000); // Check every 30 seconds\n    \n    console.log('üò¥ [MicrophoneLifecycleManager] Idle monitoring started');\n  }\n\n  /**\n   * Start visibility monitoring\n   */\n  private startVisibilityMonitoring(): void {\n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n    }\n    \n    this.visibilityCheckInterval = window.setInterval(() => {\n      // Additional visibility-based health checks\n      if (this.isPageVisible && this.isActive) {\n        this.performHealthCheck();\n      }\n    }, 10000); // Check every 10 seconds when visible\n    \n    console.log('üëÅÔ∏è [MicrophoneLifecycleManager] Visibility monitoring started');\n  }\n\n  /**\n   * Perform comprehensive health check\n   */\n  private async performHealthCheck(): Promise<void> {\n    if (!this.isActive) return;\n    \n    try {\n      const healthStatus = this.audioManager.checkMediaStreamHealth();\n      this.lastHealthCheck = healthStatus;\n      \n      if (!healthStatus.healthy) {\n        console.warn('‚ö†Ô∏è [MicrophoneLifecycleManager] Unhealthy microphone state detected:', healthStatus);\n        \n        // Attempt automatic recovery\n        if (this.autoRecoveryAttempts < this.maxAutoRecoveryAttempts) {\n          this.autoRecoveryAttempts++;\n          \n          console.log(`üîß [MicrophoneLifecycleManager] Attempting automatic recovery (${this.autoRecoveryAttempts}/${this.maxAutoRecoveryAttempts})`);\n          \n          setTimeout(async () => {\n            try {\n              await this.audioManager.initialize(); // This will trigger re-initialization if needed\n              console.log('‚úÖ [MicrophoneLifecycleManager] Automatic recovery successful');\n              \n              // Dispatch success event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoverySuccess', {});\n              \n            } catch (error) {\n              console.error('‚ùå [MicrophoneLifecycleManager] Automatic recovery failed:', error);\n              this.callbacks.onError?.(error as Error);\n              \n              // Dispatch failure event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoveryFailed', { error });\n            }\n          }, this.config.autoRecoveryDelayMs);\n          \n        } else {\n          console.error('‚ùå [MicrophoneLifecycleManager] Maximum recovery attempts reached - manual intervention required');\n          this.callbacks.onError?.(new Error('Microphone health check failed - maximum recovery attempts exceeded'));\n        }\n      }\n      \n    } catch (error) {\n      console.error('‚ùå [MicrophoneLifecycleManager] Health check failed:', error);\n      this.callbacks.onError?.(error as Error);\n    }\n  }\n\n  /**\n   * Check for idle timeout\n   */\n  private checkIdleTimeout(): void {\n    if (!this.isActive) return;\n    \n    const timeSinceActivity = Date.now() - this.lastActivityTime;\n    const isIdle = timeSinceActivity > this.config.idleTimeoutMs;\n    \n    if (isIdle && this.isUserActive) {\n      console.log('üò¥ [MicrophoneLifecycleManager] User idle detected');\n      this.isUserActive = false;\n      \n      // Optionally reduce monitoring frequency during idle\n      // But don't automatically release - let the application decide\n    }\n    \n    // Check for extreme idle (auto-release)\n    if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n      console.log('‚è∞ [MicrophoneLifecycleManager] Extreme idle detected - auto-releasing resources');\n      this.forceRelease();\n    }\n  }\n\n  /**\n   * Stop all monitoring intervals\n   */\n  private stopAllMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n    }\n    \n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n      this.idleCheckInterval = null;\n    }\n    \n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n      this.visibilityCheckInterval = null;\n    }\n    \n    console.log('‚èπÔ∏è [MicrophoneLifecycleManager] All monitoring stopped');\n  }\n\n  /**\n   * Dispatch custom event\n   */\n  private dispatchCustomEvent(eventName: keyof LifecycleEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Get current status\n   */\n  getStatus() {\n    return {\n      refCount: this.refCount,\n      isActive: this.isActive,\n      isPageVisible: this.isPageVisible,\n      isUserActive: this.isUserActive,\n      lastActivityTime: this.lastActivityTime,\n      timeSinceActivity: Date.now() - this.lastActivityTime,\n      autoRecoveryAttempts: this.autoRecoveryAttempts,\n      lastHealthCheck: this.lastHealthCheck,\n      audioManagerStatus: this.audioManager.getStatus()\n    };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Restart monitoring with new intervals if active\n    if (this.isActive) {\n      this.stopAllMonitoring();\n      this.startHealthMonitoring();\n      this.startIdleMonitoring();\n      this.startVisibilityMonitoring();\n    }\n    \n    console.log('üîß [MicrophoneLifecycleManager] Configuration updated:', newConfig);\n  }\n\n  /**\n   * Cleanup and destroy\n   */\n  destroy(): void {\n    console.log('üóëÔ∏è [MicrophoneLifecycleManager] Destroying lifecycle manager');\n    \n    // Stop all monitoring\n    this.stopAllMonitoring();\n    \n    // Force release resources\n    this.forceRelease();\n    \n    // Remove event listeners\n    this.eventListeners.forEach((listener, eventName) => {\n      if (eventName.includes('window:')) {\n        window.removeEventListener(eventName.replace('window:', ''), listener);\n      } else {\n        document.removeEventListener(eventName, listener);\n      }\n    });\n    this.eventListeners.clear();\n    \n    console.log('‚úÖ [MicrophoneLifecycleManager] Cleanup complete');\n  }\n}","/**\n * ErrorNotificationSystem - Framework-agnostic Error Display and Notification\n * \n * Provides error messaging functionality that can be displayed on any page\n * Includes different notification types, auto-hide functionality, and priority management\n * Framework-agnostic implementation using vanilla DOM manipulation\n */\n\nimport type { NotificationConfig, NotificationElement } from '../types';\n\nexport class ErrorNotificationSystem {\n  private container: HTMLElement | null = null;\n  private notifications = new Map<string, NotificationElement>();\n  private notificationCounter = 0;\n  private defaultDuration = 5000; // 5 seconds\n  private maxNotifications = 5;\n  \n  // CSS classes for styling\n  private cssClasses = {\n    container: 'pitchpro-notifications',\n    notification: 'pitchpro-notification',\n    title: 'pitchpro-notification-title',\n    message: 'pitchpro-notification-message',\n    details: 'pitchpro-notification-details',\n    solution: 'pitchpro-notification-solution',\n    closeButton: 'pitchpro-notification-close',\n    error: 'pitchpro-notification-error',\n    warning: 'pitchpro-notification-warning',\n    success: 'pitchpro-notification-success',\n    info: 'pitchpro-notification-info',\n    high: 'pitchpro-notification-priority-high',\n    medium: 'pitchpro-notification-priority-medium',\n    low: 'pitchpro-notification-priority-low'\n  };\n\n  constructor() {\n    // SSR compatibility\n    if (typeof window === 'undefined') {\n      console.log('üîá [ErrorNotificationSystem] SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.initializeContainer();\n    this.injectCSS();\n  }\n\n  /**\n   * Create and inject the notification container into the DOM\n   */\n  private initializeContainer(): void {\n    // Check if container already exists\n    let existingContainer = document.querySelector(`.${this.cssClasses.container}`);\n    \n    if (!existingContainer) {\n      this.container = document.createElement('div');\n      this.container.className = this.cssClasses.container;\n      this.container.setAttribute('role', 'alert');\n      this.container.setAttribute('aria-live', 'polite');\n      \n      // Add to document body\n      document.body.appendChild(this.container);\n      \n      console.log('üìã [ErrorNotificationSystem] Notification container created');\n    } else {\n      this.container = existingContainer as HTMLElement;\n      console.log('üìã [ErrorNotificationSystem] Using existing notification container');\n    }\n  }\n\n  /**\n   * Inject default CSS styles\n   */\n  private injectCSS(): void {\n    // Check if styles already exist\n    if (document.querySelector('#pitchpro-notifications-styles')) {\n      return;\n    }\n\n    const css = `\n      .${this.cssClasses.container} {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 10000;\n        max-width: 400px;\n        pointer-events: none;\n      }\n\n      .${this.cssClasses.notification} {\n        background: white;\n        border: 1px solid #e2e8f0;\n        border-radius: 8px;\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n        margin-bottom: 12px;\n        padding: 16px;\n        pointer-events: auto;\n        position: relative;\n        animation: slideIn 0.3s ease-out;\n        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;\n      }\n\n      .${this.cssClasses.notification}.removing {\n        opacity: 0;\n        transform: translateX(100%);\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateX(100%);\n        }\n        to {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.error} {\n        border-left: 4px solid #ef4444;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.warning} {\n        border-left: 4px solid #f59e0b;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.success} {\n        border-left: 4px solid #10b981;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.info} {\n        border-left: 4px solid #3b82f6;\n      }\n\n      .${this.cssClasses.title} {\n        font-weight: 600;\n        font-size: 14px;\n        color: #1f2937;\n        margin-bottom: 4px;\n        padding-right: 24px;\n      }\n\n      .${this.cssClasses.message} {\n        font-size: 13px;\n        color: #4b5563;\n        margin-bottom: 8px;\n        line-height: 1.4;\n      }\n\n      .${this.cssClasses.details} {\n        font-size: 12px;\n        color: #6b7280;\n        margin-bottom: 8px;\n        padding-left: 12px;\n        border-left: 2px solid #e5e7eb;\n      }\n\n      .${this.cssClasses.details} li {\n        margin-bottom: 2px;\n      }\n\n      .${this.cssClasses.solution} {\n        font-size: 12px;\n        color: #059669;\n        background: #ecfdf5;\n        border: 1px solid #a7f3d0;\n        border-radius: 4px;\n        padding: 8px;\n        margin-top: 8px;\n      }\n\n      .${this.cssClasses.closeButton} {\n        position: absolute;\n        top: 12px;\n        right: 12px;\n        background: none;\n        border: none;\n        font-size: 18px;\n        color: #9ca3af;\n        cursor: pointer;\n        padding: 0;\n        width: 20px;\n        height: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .${this.cssClasses.closeButton}:hover {\n        color: #6b7280;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.high} {\n        border-width: 2px;\n        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      }\n\n      @media (max-width: 640px) {\n        .${this.cssClasses.container} {\n          top: 10px;\n          left: 10px;\n          right: 10px;\n          max-width: none;\n        }\n      }\n    `;\n\n    const style = document.createElement('style');\n    style.id = 'pitchpro-notifications-styles';\n    style.textContent = css;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Show a notification\n   */\n  show(config: NotificationConfig): string {\n    if (!this.container) {\n      console.warn('‚ö†Ô∏è [ErrorNotificationSystem] Container not available - cannot show notification');\n      return '';\n    }\n\n    // Generate unique ID\n    const id = `notification-${++this.notificationCounter}`;\n\n    // Create notification element\n    const notification = this.createNotificationElement(id, config);\n\n    // Remove oldest notification if we're at the limit\n    if (this.notifications.size >= this.maxNotifications) {\n      const oldestId = Array.from(this.notifications.keys())[0];\n      this.remove(oldestId);\n    }\n\n    // Add to container and tracking\n    this.container.appendChild(notification);\n    this.notifications.set(id, notification);\n\n    // Auto-hide if configured\n    if (config.autoHide !== false) {\n      const duration = config.duration || this.defaultDuration;\n      setTimeout(() => {\n        this.remove(id);\n      }, duration);\n    }\n\n    console.log(`üì¢ [ErrorNotificationSystem] Notification shown: ${config.type} - ${config.title}`);\n    \n    return id;\n  }\n\n  /**\n   * Create notification DOM element\n   */\n  private createNotificationElement(id: string, config: NotificationConfig): NotificationElement {\n    const notification = document.createElement('div') as unknown as NotificationElement;\n    notification.className = [\n      this.cssClasses.notification,\n      this.cssClasses[config.type],\n      config.priority ? this.cssClasses[config.priority] : ''\n    ].filter(Boolean).join(' ');\n    notification['data-notification-id'] = id;\n\n    // Title\n    const title = document.createElement('div');\n    title.className = this.cssClasses.title;\n    title.textContent = config.title;\n    notification.appendChild(title);\n\n    // Message\n    const message = document.createElement('div');\n    message.className = this.cssClasses.message;\n    message.textContent = config.message;\n    notification.appendChild(message);\n\n    // Details (if provided)\n    if (config.details && config.details.length > 0) {\n      const details = document.createElement('div');\n      details.className = this.cssClasses.details;\n      \n      const list = document.createElement('ul');\n      list.style.margin = '0';\n      list.style.paddingLeft = '16px';\n      \n      config.details.forEach(detail => {\n        const item = document.createElement('li');\n        item.textContent = detail;\n        list.appendChild(item);\n      });\n      \n      details.appendChild(list);\n      notification.appendChild(details);\n    }\n\n    // Solution (if provided)\n    if (config.solution) {\n      const solution = document.createElement('div');\n      solution.className = this.cssClasses.solution;\n      solution.textContent = config.solution;\n      notification.appendChild(solution);\n    }\n\n    // Close button\n    const closeButton = document.createElement('button');\n    closeButton.className = this.cssClasses.closeButton;\n    closeButton.innerHTML = '√ó';\n    closeButton.setAttribute('aria-label', 'Close notification');\n    closeButton.addEventListener('click', () => {\n      this.remove(id);\n    });\n    notification.appendChild(closeButton);\n\n    return notification;\n  }\n\n  /**\n   * Remove a specific notification\n   */\n  remove(id: string): void {\n    const notification = this.notifications.get(id);\n    if (!notification) {\n      return;\n    }\n\n    // Add removing class for exit animation\n    notification.classList.add('removing');\n\n    // Remove from DOM after animation\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification);\n      }\n      this.notifications.delete(id);\n    }, 300);\n\n    console.log(`üóëÔ∏è [ErrorNotificationSystem] Notification removed: ${id}`);\n  }\n\n  /**\n   * Clear all notifications\n   */\n  clearAll(): void {\n    const ids = Array.from(this.notifications.keys());\n    ids.forEach(id => this.remove(id));\n    \n    console.log('üßπ [ErrorNotificationSystem] All notifications cleared');\n  }\n\n  /**\n   * Show error notification (convenience method)\n   */\n  showError(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'error',\n      title,\n      message,\n      priority: 'high',\n      autoHide: false, // Errors should be manually dismissed\n      ...options\n    });\n  }\n\n  /**\n   * Show warning notification (convenience method)\n   */\n  showWarning(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'warning',\n      title,\n      message,\n      priority: 'medium',\n      duration: 8000, // Longer duration for warnings\n      ...options\n    });\n  }\n\n  /**\n   * Show success notification (convenience method)\n   */\n  showSuccess(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'success',\n      title,\n      message,\n      priority: 'low',\n      duration: 3000, // Shorter duration for success messages\n      ...options\n    });\n  }\n\n  /**\n   * Show info notification (convenience method)\n   */\n  showInfo(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'info',\n      title,\n      message,\n      priority: 'low',\n      ...options\n    });\n  }\n\n  /**\n   * Show microphone error with common solutions\n   */\n  showMicrophoneError(error: Error, context?: string): string {\n    // Common solutions for microphone errors\n    // const commonSolutions = [\n    //   '„Éñ„É©„Ç¶„Ç∂„Å´„Éû„Ç§„ÇØ„Ç¢„ÇØ„Çª„Çπ„ÇíË®±ÂèØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',\n    //   '„Éû„Ç§„ÇØ„Åå‰ªñ„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Åß‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',\n    //   '„Éñ„É©„Ç¶„Ç∂„ÇíÂÜçËµ∑Âãï„Åó„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ',\n    //   '„Éá„Éê„Ç§„Çπ„ÅÆË®≠ÂÆö„Åß„Éû„Ç§„ÇØ„ÅåÊúâÂäπ„Å´„Å™„Å£„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ'\n    // ];\n\n    return this.showError(\n      '„Éû„Ç§„ÇØ„É≠„Éï„Ç©„É≥„Ç®„É©„Éº',\n      `„Éû„Ç§„ÇØ„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`,\n      {\n        details: context ? [`Áô∫ÁîüÁÆáÊâÄ: ${context}`, `„Ç®„É©„ÉºË©≥Á¥∞: ${error.name}`] : [`„Ç®„É©„ÉºË©≥Á¥∞: ${error.name}`],\n        solution: '„Éû„Ç§„ÇØ„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„ÄÅ„Éñ„É©„Ç¶„Ç∂„Å´„Éû„Ç§„ÇØ„Ç¢„ÇØ„Çª„Çπ„ÇíË®±ÂèØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show audio context error\n   */\n  showAudioContextError(error: Error): string {\n    return this.showError(\n      '„Ç™„Éº„Éá„Ç£„Ç™„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº',\n      `Èü≥Â£∞Âá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`,\n      {\n        details: [\n          '„Éñ„É©„Ç¶„Ç∂„ÅåWeb Audio API„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô',\n          '„Åæ„Åü„ÅØ„ÄÅÈü≥Â£∞„Éá„Éê„Ç§„Çπ„Å´ÂïèÈ°å„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„Åô'\n        ],\n        solution: '„Éñ„É©„Ç¶„Ç∂„ÇíÊúÄÊñ∞Áâà„Å´Êõ¥Êñ∞„Åô„Çã„Åã„ÄÅÂà•„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅßË©¶„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show network/loading error\n   */\n  showLoadingError(resource: string, error: Error): string {\n    return this.showError(\n      'Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº',\n      `${resource}„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`,\n      {\n        details: [\n          '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',\n          '„Éñ„É©„Ç¶„Ç∂„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Ç¢„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ'\n        ],\n        solution: '„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åô„Çã„Åã„ÄÅ„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',\n        priority: 'medium'\n      }\n    );\n  }\n\n  /**\n   * Get current notification count\n   */\n  getNotificationCount(): number {\n    return this.notifications.size;\n  }\n\n  /**\n   * Get all notification IDs\n   */\n  getNotificationIds(): string[] {\n    return Array.from(this.notifications.keys());\n  }\n\n  /**\n   * Check if a specific notification exists\n   */\n  hasNotification(id: string): boolean {\n    return this.notifications.has(id);\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: {\n    defaultDuration?: number;\n    maxNotifications?: number;\n  }): void {\n    if (config.defaultDuration !== undefined) {\n      this.defaultDuration = config.defaultDuration;\n    }\n    if (config.maxNotifications !== undefined) {\n      this.maxNotifications = config.maxNotifications;\n    }\n    \n    console.log('üîß [ErrorNotificationSystem] Configuration updated:', config);\n  }\n\n  /**\n   * Destroy the notification system\n   */\n  destroy(): void {\n    console.log('üóëÔ∏è [ErrorNotificationSystem] Destroying notification system');\n    \n    this.clearAll();\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    // Remove injected CSS\n    const styleElement = document.querySelector('#pitchpro-notifications-styles');\n    if (styleElement && styleElement.parentNode) {\n      styleElement.parentNode.removeChild(styleElement);\n    }\n    \n    this.container = null;\n    this.notifications.clear();\n    \n    console.log('‚úÖ [ErrorNotificationSystem] Cleanup complete');\n  }\n}","/**\n * MicrophoneController - High-level Microphone Management Interface\n * \n * Combines AudioManager, LifecycleManager, and ErrorNotificationSystem\n * Provides a simple, unified API for microphone control with error handling\n * Includes device detection, sensitivity management, and automatic recovery\n */\n\nimport type { \n  DeviceSpecs,\n  MediaStreamResources,\n  MicrophoneControllerEvents,\n  ErrorCallback,\n  StateChangeCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\nimport { MicrophoneLifecycleManager } from './MicrophoneLifecycleManager';\nimport { ErrorNotificationSystem } from './ErrorNotificationSystem';\n\nexport class MicrophoneController {\n  private audioManager: AudioManager;\n  private lifecycleManager: MicrophoneLifecycleManager;\n  private errorSystem: ErrorNotificationSystem;\n  \n  // State management\n  private currentState: 'uninitialized' | 'initializing' | 'ready' | 'active' | 'error' = 'uninitialized';\n  private isPermissionGranted = false;\n  private lastError: Error | null = null;\n  \n  // Event handling\n  private eventCallbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  } = {};\n  \n  // Device specifications\n  private deviceSpecs: DeviceSpecs | null = null;\n\n  constructor(\n    audioManagerConfig = {},\n    lifecycleConfig = {},\n    showErrorNotifications = true\n  ) {\n    this.audioManager = new AudioManager(audioManagerConfig);\n    this.lifecycleManager = new MicrophoneLifecycleManager(this.audioManager, lifecycleConfig);\n    this.errorSystem = showErrorNotifications ? new ErrorNotificationSystem() : null as any;\n    \n    this.setupEventHandlers();\n    this.detectDevice();\n  }\n\n  /**\n   * Set callback functions for events\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  }): void {\n    this.eventCallbacks = { ...this.eventCallbacks, ...callbacks };\n  }\n\n  /**\n   * Setup internal event handlers\n   */\n  private setupEventHandlers(): void {\n    // Lifecycle manager callbacks\n    this.lifecycleManager.setCallbacks({\n      onStateChange: (state) => {\n        this.updateState(state === 'active' ? 'active' : 'ready');\n      },\n      onError: (error) => {\n        this.handleError(error, 'lifecycle');\n      }\n    });\n  }\n\n  /**\n   * Detect device specifications\n   */\n  private detectDevice(): void {\n    this.deviceSpecs = this.audioManager.getPlatformSpecs();\n    console.log('üì± [MicrophoneController] Device detected:', this.deviceSpecs);\n    \n    // Notify callback\n    this.eventCallbacks.onDeviceChange?.(this.deviceSpecs);\n    \n    // Dispatch custom event\n    this.dispatchCustomEvent('pitchpro:deviceDetected', { specs: this.deviceSpecs });\n  }\n\n  /**\n   * Initialize microphone access and permissions\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    try {\n      this.updateState('initializing');\n      console.log('üé§ [MicrophoneController] Starting initialization');\n\n      // Acquire resources through lifecycle manager\n      const resources = await this.lifecycleManager.acquire();\n      \n      // Update state and permissions\n      this.isPermissionGranted = true;\n      this.updateState('ready');\n      this.lastError = null;\n\n      // Notify permission change\n      this.eventCallbacks.onPermissionChange?.(true);\n      this.dispatchCustomEvent('pitchpro:microphoneGranted', { stream: resources.mediaStream });\n\n      console.log('‚úÖ [MicrophoneController] Initialization complete');\n      return resources;\n\n    } catch (error) {\n      console.error('‚ùå [MicrophoneController] Initialization failed:', error);\n      \n      this.isPermissionGranted = false;\n      this.handleError(error as Error, 'initialization');\n      \n      // Notify permission denial\n      this.eventCallbacks.onPermissionChange?.(false);\n      this.dispatchCustomEvent('pitchpro:microphoneDenied', { error: error as Error });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Request microphone permission (alias for initialize)\n   */\n  async requestPermission(): Promise<boolean> {\n    try {\n      await this.initialize();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Check if microphone permission is granted\n   */\n  async checkPermissionStatus(): Promise<'granted' | 'denied' | 'prompt'> {\n    if (typeof navigator === 'undefined' || !navigator.mediaDevices) {\n      return 'denied';\n    }\n\n    try {\n      const result = await navigator.permissions.query({ name: 'microphone' as PermissionName });\n      return result.state as 'granted' | 'denied' | 'prompt';\n    } catch {\n      // Fallback: try to access microphone with minimal constraints\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: { \n            echoCancellation: false,\n            noiseSuppression: false,\n            autoGainControl: false\n          } \n        });\n        stream.getTracks().forEach(track => track.stop());\n        return 'granted';\n      } catch {\n        return 'denied';\n      }\n    }\n  }\n\n  /**\n   * Stop microphone and release resources\n   */\n  stop(): void {\n    console.log('üõë [MicrophoneController] Stopping microphone');\n    \n    this.lifecycleManager.release();\n    this.updateState('ready');\n    \n    // Dispatch stop event\n    this.dispatchCustomEvent('pitchpro:microphoneStopped', {});\n    \n    console.log('‚úÖ [MicrophoneController] Microphone stopped');\n  }\n\n  /**\n   * Force stop with complete cleanup\n   */\n  forceStop(): void {\n    console.log('üö® [MicrophoneController] Force stopping microphone');\n    \n    this.lifecycleManager.forceRelease();\n    this.updateState('uninitialized');\n    this.isPermissionGranted = false;\n    \n    console.log('‚úÖ [MicrophoneController] Force stop complete');\n  }\n\n  /**\n   * Set microphone sensitivity\n   */\n  setSensitivity(sensitivity: number): void {\n    const oldSensitivity = this.audioManager.getSensitivity();\n    this.audioManager.setSensitivity(sensitivity);\n    const newSensitivity = this.audioManager.getSensitivity();\n    \n    if (oldSensitivity !== newSensitivity) {\n      console.log(`üîß [MicrophoneController] Sensitivity changed: ${oldSensitivity}x ‚Üí ${newSensitivity}x`);\n      \n      // Notify callbacks\n      this.eventCallbacks.onSensitivityChange?.(newSensitivity);\n      this.dispatchCustomEvent('pitchpro:sensitivityChanged', { sensitivity: newSensitivity });\n    }\n  }\n\n  /**\n   * Get current microphone sensitivity\n   */\n  getSensitivity(): number {\n    return this.audioManager.getSensitivity();\n  }\n\n  /**\n   * Get device specifications\n   */\n  getDeviceSpecs(): DeviceSpecs | null {\n    return this.deviceSpecs;\n  }\n\n  /**\n   * Get current state\n   */\n  getState(): string {\n    return this.currentState;\n  }\n\n  /**\n   * Check if microphone is active\n   */\n  isActive(): boolean {\n    return this.currentState === 'active';\n  }\n\n  /**\n   * Check if microphone is ready (initialized but not active)\n   */\n  isReady(): boolean {\n    return this.currentState === 'ready';\n  }\n\n  /**\n   * Check if permission is granted\n   */\n  hasPermission(): boolean {\n    return this.isPermissionGranted;\n  }\n\n  /**\n   * Get comprehensive status\n   */\n  getStatus() {\n    return {\n      state: this.currentState,\n      isPermissionGranted: this.isPermissionGranted,\n      isActive: this.isActive(),\n      isReady: this.isReady(),\n      sensitivity: this.getSensitivity(),\n      deviceSpecs: this.deviceSpecs,\n      lastError: this.lastError,\n      audioManagerStatus: this.audioManager.getStatus(),\n      lifecycleStatus: this.lifecycleManager.getStatus()\n    };\n  }\n\n  /**\n   * Perform health check\n   */\n  checkHealth() {\n    return this.audioManager.checkMediaStreamHealth();\n  }\n\n  /**\n   * Test microphone functionality\n   */\n  async testMicrophone(durationMs = 2000): Promise<{\n    success: boolean;\n    volume: number;\n    frequency: number | null;\n    duration: number;\n    error?: Error;\n  }> {\n    const startTime = Date.now();\n    \n    try {\n      // Ensure we have resources\n      if (!this.isReady() && !this.isActive()) {\n        await this.initialize();\n      }\n      \n      // Create temporary analyser for testing\n      const analyser = this.audioManager.createAnalyser('microphone-test', {\n        fftSize: 1024,\n        smoothingTimeConstant: 0.8\n      });\n      \n      // Collect audio data for specified duration\n      let maxVolume = 0;\n      let detectedFrequency: number | null = null as number | null;\n      const endTime = startTime + durationMs;\n      \n      await new Promise<void>((resolve) => {\n        const checkAudio = () => {\n          if (Date.now() >= endTime) {\n            resolve();\n            return;\n          }\n          \n          // Analyze current audio\n          const bufferLength = analyser.fftSize;\n          const dataArray = new Float32Array(bufferLength);\n          analyser.getFloatTimeDomainData(dataArray);\n          \n          // Calculate RMS volume\n          let sum = 0;\n          for (let i = 0; i < bufferLength; i++) {\n            sum += Math.abs(dataArray[i]);\n          }\n          const rms = Math.sqrt(sum / bufferLength);\n          const volume = rms * 100;\n          \n          if (volume > maxVolume) {\n            maxVolume = volume;\n          }\n          \n          // Simple peak detection for frequency\n          if (volume > 5) { // Only check frequency if there's significant volume\n            let maxIndex = 0;\n            let maxValue = 0;\n            for (let i = 1; i < bufferLength / 2; i++) {\n              const value = Math.abs(dataArray[i]);\n              if (value > maxValue) {\n                maxValue = value;\n                maxIndex = i;\n              }\n            }\n            if (maxIndex > 0) {\n              detectedFrequency = (maxIndex * 44100) / bufferLength;\n            }\n          }\n          \n          requestAnimationFrame(checkAudio);\n        };\n        \n        checkAudio();\n      });\n      \n      // Cleanup test analyser\n      this.audioManager.removeAnalyser('microphone-test');\n      \n      const duration = Date.now() - startTime;\n      const success = maxVolume > 1; // Consider success if we detected some audio\n      \n      const frequencyDisplay = detectedFrequency ? detectedFrequency.toFixed(0) : 'none';\n      console.log(`üß™ [MicrophoneController] Microphone test complete: volume=${maxVolume.toFixed(2)}, frequency=${frequencyDisplay}, duration=${duration}ms`);\n      \n      return {\n        success,\n        volume: maxVolume,\n        frequency: detectedFrequency,\n        duration\n      };\n      \n    } catch (error) {\n      const duration = Date.now() - startTime;\n      console.error('‚ùå [MicrophoneController] Microphone test failed:', error);\n      \n      return {\n        success: false,\n        volume: 0,\n        frequency: null,\n        duration,\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * Update internal state and notify\n   */\n  private updateState(newState: typeof this.currentState): void {\n    if (this.currentState !== newState) {\n      const oldState = this.currentState;\n      this.currentState = newState;\n      \n      console.log(`üîÑ [MicrophoneController] State changed: ${oldState} ‚Üí ${newState}`);\n      \n      // Notify callback\n      this.eventCallbacks.onStateChange?.(newState);\n    }\n  }\n\n  /**\n   * Handle errors with notification system\n   */\n  private handleError(error: Error, context: string): void {\n    console.error(`‚ùå [MicrophoneController] Error in ${context}:`, error);\n    \n    this.lastError = error;\n    this.updateState('error');\n    \n    // Show error notification if system is available\n    if (this.errorSystem) {\n      if (context === 'initialization' || context === 'lifecycle') {\n        this.errorSystem.showMicrophoneError(error, context);\n      } else {\n        this.errorSystem.showError(\n          '„Éû„Ç§„ÇØ„Ç®„É©„Éº',\n          `${context}„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`,\n          { priority: 'medium' }\n        );\n      }\n    }\n    \n    // Notify error callback\n    this.eventCallbacks.onError?.(error);\n  }\n\n  /**\n   * Dispatch custom DOM event\n   */\n  private dispatchCustomEvent(eventName: keyof MicrophoneControllerEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Add event listener for microphone events\n   */\n  addEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.addEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Remove event listener for microphone events\n   */\n  removeEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.removeEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Cleanup and destroy all resources\n   */\n  destroy(): void {\n    console.log('üóëÔ∏è [MicrophoneController] Destroying controller');\n    \n    // Force stop to ensure cleanup\n    this.forceStop();\n    \n    // Destroy managed components\n    this.lifecycleManager.destroy();\n    this.errorSystem?.destroy();\n    \n    // Clear callbacks\n    this.eventCallbacks = {};\n    \n    // Reset state\n    this.currentState = 'uninitialized';\n    this.isPermissionGranted = false;\n    this.lastError = null;\n    this.deviceSpecs = null;\n    \n    console.log('‚úÖ [MicrophoneController] Cleanup complete');\n  }\n}"],"names":["AudioManager","config","healthCheck","_a","_b","_c","t","resolve","result","error","deviceSpecs","audioConstraints","tracks","id","options","fftSize","smoothingTimeConstant","minDecibels","maxDecibels","useFilters","analyser","finalNode","filterChain","highpass","lowpass","notch","sensitivity","clampedSensitivity","isIPhone","isIPad","isIPadOS","isIOS","analyserIds","track","index","audioTrack","_d","trackStates","_e","_g","_h","_i","_f","PitchDetector","audioManager","callbacks","filteredAnalyserId","rawAnalyserId","PitchyDetector","bufferLength","buffer","rawBuffer","sum","i","rms","platformSpecs","adjustedRms","volumePercent","rawSum","rawRms","rawVolumePercent","v","audioContext","sampleRate","pitch","clarity","isValidVocalRange","finalFreq","normalizedVolume","displayVolume","frequency","volume","now","confidenceThreshold","historyWindow","volumeConfidence","stabilityConfidence","confidence","recentHistory","avgFrequency","h","avgConfidence","halfFrequency","doubleFrequency","noteNames","semitonesFromA4","noteIndex","octave","nearestSemitone","centsDeviation","enabled","NoiseFilter","inputNode","outputNode","params","currentTime","savedOutputNode","frequencyArray","magnitudeArray","phaseArray","highpassMagnitude","lowpassMagnitude","notchMagnitude","preset","MicrophoneLifecycleManager","resources","visibilityChangeHandler","activityHandler","unloadHandler","focusHandler","blurHandler","healthStatus","timeSinceActivity","eventName","detail","event","newConfig","listener","ErrorNotificationSystem","existingContainer","css","style","notification","oldestId","duration","title","message","details","list","item","solution","closeButton","context","resource","styleElement","MicrophoneController","audioManagerConfig","lifecycleConfig","showErrorNotifications","state","oldSensitivity","newSensitivity","durationMs","startTime","maxVolume","detectedFrequency","endTime","checkAudio","dataArray","maxIndex","maxValue","value","success","frequencyDisplay","newState","oldState","type"],"mappings":"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"}