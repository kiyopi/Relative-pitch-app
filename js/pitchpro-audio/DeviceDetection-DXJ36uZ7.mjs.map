{"version":3,"file":"DeviceDetection-DXJ36uZ7.mjs","sources":["../src/utils/DeviceDetection.ts"],"sourcesContent":["/**\n * DeviceDetection - Cross-platform device detection and optimization\n * \n * Detects device types, capabilities, and provides optimized settings\n * Handles iPadOS 13+ detection issues and provides device-specific configurations\n */\n\nimport type { DeviceSpecs } from '../types';\n\nexport class DeviceDetection {\n  private static cachedSpecs: DeviceSpecs | null = null;\n\n  /**\n   * Detect current device and return optimized specifications\n   */\n  static getDeviceSpecs(): DeviceSpecs {\n    // Return cached result if available\n    if (DeviceDetection.cachedSpecs) {\n      return DeviceDetection.cachedSpecs;\n    }\n\n    // SSR compatibility\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return DeviceDetection.getDefaultSpecs();\n    }\n\n    const userAgent = navigator.userAgent;\n    const deviceSpecs = DeviceDetection.analyzeUserAgent(userAgent);\n    \n    // Cache the result\n    DeviceDetection.cachedSpecs = deviceSpecs;\n    \n    console.log('ðŸ“± [DeviceDetection] Device analysis:', {\n      userAgent: userAgent.substring(0, 100) + '...',\n      deviceType: deviceSpecs.deviceType,\n      isIOS: deviceSpecs.isIOS,\n      sensitivity: deviceSpecs.sensitivity,\n      divisor: deviceSpecs.divisor\n    });\n\n    return deviceSpecs;\n  }\n\n  /**\n   * Analyze user agent string and determine device specifications\n   */\n  private static analyzeUserAgent(userAgent: string): DeviceSpecs {\n    // iOS device detection (including iPadOS 13+ workaround)\n    const isIPhone = /iPhone/.test(userAgent);\n    const isIPad = /iPad/.test(userAgent);\n    \n    // iPadOS 13+ reports as \"Macintosh\" but has touch support\n    const isIPadOS = /Macintosh/.test(userAgent) && 'ontouchend' in document;\n    \n    // Additional iOS detection methods\n    const hasIOSNavigator = /iPad|iPhone|iPod/.test(userAgent);\n    const hasIOSPlatform = /iPad|iPhone|iPod/.test((navigator as any).platform || '');\n    \n    // Combined iOS detection\n    const isIOS = isIPhone || isIPad || isIPadOS || hasIOSNavigator || hasIOSPlatform;\n    \n    // More specific device type detection\n    let deviceType: 'iPhone' | 'iPad' | 'PC' = 'PC';\n    \n    if (isIPhone) {\n      deviceType = 'iPhone';\n    } else if (isIPad || isIPadOS) {\n      deviceType = 'iPad';\n    } else if (isIOS) {\n      // Fallback iOS device - could be iPhone or iPad\n      deviceType = DeviceDetection.detectIOSDeviceType();\n    }\n\n    // Get device-specific optimizations\n    const optimizations = DeviceDetection.getDeviceOptimizations(deviceType, isIOS);\n\n    return {\n      deviceType,\n      isIOS,\n      sensitivity: optimizations.sensitivity,\n      noiseGate: optimizations.noiseGate,\n      divisor: optimizations.divisor,\n      gainCompensation: optimizations.gainCompensation,\n      noiseThreshold: optimizations.noiseThreshold,\n      smoothingFactor: optimizations.smoothingFactor\n    };\n  }\n\n  /**\n   * Detect iOS device type when specific detection fails\n   */\n  private static detectIOSDeviceType(): 'iPhone' | 'iPad' {\n    // Use screen size as a heuristic\n    const screenWidth = window.screen.width;\n    const screenHeight = window.screen.height;\n    const maxDimension = Math.max(screenWidth, screenHeight);\n    const minDimension = Math.min(screenWidth, screenHeight);\n    \n    // iPad generally has larger screens\n    // iPhone 6 Plus and newer have screens around 414x736 or similar\n    // iPad screens are typically 768+ in at least one dimension\n    if (maxDimension >= 768 || (maxDimension >= 700 && minDimension >= 500)) {\n      return 'iPad';\n    }\n    \n    return 'iPhone';\n  }\n\n  /**\n   * Get device-specific optimization parameters\n   */\n  private static getDeviceOptimizations(deviceType: 'iPhone' | 'iPad' | 'PC', _isIOS: boolean) {\n    switch (deviceType) {\n      case 'iPad':\n        return {\n          sensitivity: 7.0,        // High sensitivity for iPad microphones\n          noiseGate: 0.01,         // Low noise gate\n          divisor: 4.0,            // Volume calculation divisor\n          gainCompensation: 1.5,   // Gain compensation for low-frequency cut\n          noiseThreshold: 12,      // Noise threshold for silence detection\n          smoothingFactor: 0.2     // Smoothing factor\n        };\n        \n      case 'iPhone':\n        return {\n          sensitivity: 3.0,        // Medium-high sensitivity for iPhone\n          noiseGate: 0.015,        // Medium noise gate\n          divisor: 4.0,            // Volume calculation divisor\n          gainCompensation: 1.5,   // Gain compensation\n          noiseThreshold: 12,      // Noise threshold\n          smoothingFactor: 0.2     // Smoothing factor\n        };\n        \n      case 'PC':\n      default:\n        return {\n          sensitivity: 1.0,        // Standard sensitivity for PC\n          noiseGate: 0.02,         // Higher noise gate for PC microphones\n          divisor: 6.0,            // Different volume calculation for PC\n          gainCompensation: 1.0,   // No additional gain compensation needed\n          noiseThreshold: 15,      // Higher noise threshold\n          smoothingFactor: 0.2     // Standard smoothing\n        };\n    }\n  }\n\n  /**\n   * Get default specifications for SSR or fallback\n   */\n  private static getDefaultSpecs(): DeviceSpecs {\n    return {\n      deviceType: 'PC',\n      isIOS: false,\n      sensitivity: 1.0,\n      noiseGate: 0.02,\n      divisor: 6.0,\n      gainCompensation: 1.0,\n      noiseThreshold: 15,\n      smoothingFactor: 0.2\n    };\n  }\n\n  /**\n   * Check if device supports Web Audio API\n   */\n  static supportsWebAudio(): boolean {\n    return typeof window !== 'undefined' && \n           (typeof window.AudioContext !== 'undefined' || typeof (window as any).webkitAudioContext !== 'undefined');\n  }\n\n  /**\n   * Check if device supports MediaDevices API\n   */\n  static supportsMediaDevices(): boolean {\n    return typeof navigator !== 'undefined' && \n           typeof navigator.mediaDevices !== 'undefined' && \n           typeof navigator.mediaDevices.getUserMedia !== 'undefined';\n  }\n\n  /**\n   * Check if device supports MediaRecorder API\n   */\n  static supportsMediaRecorder(): boolean {\n    return typeof window !== 'undefined' && typeof (window as any).MediaRecorder !== 'undefined';\n  }\n\n  /**\n   * Get comprehensive device capabilities\n   */\n  static getDeviceCapabilities() {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    return {\n      deviceSpecs: specs,\n      webAudioSupport: DeviceDetection.supportsWebAudio(),\n      mediaDevicesSupport: DeviceDetection.supportsMediaDevices(),\n      mediaRecorderSupport: DeviceDetection.supportsMediaRecorder(),\n      touchSupport: 'ontouchend' in document,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Unknown',\n      screenSize: typeof window !== 'undefined' ? {\n        width: window.screen.width,\n        height: window.screen.height,\n        pixelRatio: window.devicePixelRatio\n      } : null,\n      language: typeof navigator !== 'undefined' ? navigator.language : 'Unknown',\n      platform: typeof navigator !== 'undefined' ? (navigator as any).platform || 'Unknown' : 'Unknown'\n    };\n  }\n\n  /**\n   * Check if current device is mobile\n   */\n  static isMobile(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    return specs.isIOS || /Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator?.userAgent || '');\n  }\n\n  /**\n   * Check if current device is tablet\n   */\n  static isTablet(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    if (specs.deviceType === 'iPad') return true;\n    \n    // Android tablet detection\n    const userAgent = navigator?.userAgent || '';\n    return /Android/i.test(userAgent) && !/Mobile/i.test(userAgent);\n  }\n\n  /**\n   * Check if current device is desktop\n   */\n  static isDesktop(): boolean {\n    return !DeviceDetection.isMobile() && !DeviceDetection.isTablet();\n  }\n\n  /**\n   * Get recommended audio constraints for current device\n   */\n  static getOptimalAudioConstraints(): MediaStreamConstraints {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    const baseConstraints: MediaStreamConstraints = {\n      audio: {\n        echoCancellation: false,\n        noiseSuppression: false,\n        autoGainControl: false,\n        sampleRate: 44100,\n        channelCount: 1,\n        sampleSize: 16,\n        // latency: 0.1, // Not supported in MediaTrackConstraints\n        // volume: 1.0, // Not supported in MediaTrackConstraints\n        deviceId: { ideal: 'default' }\n      }\n    };\n\n    // Add iOS-specific optimizations\n    if (specs.isIOS && baseConstraints.audio && typeof baseConstraints.audio === 'object') {\n      (baseConstraints.audio as any) = {\n        ...baseConstraints.audio,\n        // Disable all browser-level processing for iOS\n        googAutoGainControl: false,\n        googNoiseSuppression: false,\n        googEchoCancellation: false,\n        googHighpassFilter: false,\n        googTypingNoiseDetection: false,\n        googBeamforming: false,\n        mozAutoGainControl: false,\n        mozNoiseSuppression: false\n      };\n    }\n\n    return baseConstraints;\n  }\n\n  /**\n   * Clear cached device specifications (for testing)\n   */\n  static clearCache(): void {\n    DeviceDetection.cachedSpecs = null;\n  }\n\n  /**\n   * Get device-specific debugging information\n   */\n  static getDebugInfo() {\n    const capabilities = DeviceDetection.getDeviceCapabilities();\n    \n    return {\n      ...capabilities,\n      detectionMethods: {\n        userAgentIPhone: /iPhone/.test(navigator?.userAgent || ''),\n        userAgentIPad: /iPad/.test(navigator?.userAgent || ''),\n        userAgentMacintosh: /Macintosh/.test(navigator?.userAgent || ''),\n        touchSupport: 'ontouchend' in document,\n        navigatorPlatform: (navigator as any)?.platform || 'Unknown',\n        screenAspectRatio: typeof window !== 'undefined' ? \n          (window.screen.width / window.screen.height).toFixed(2) : 'Unknown'\n      }\n    };\n  }\n}"],"names":["_DeviceDetection","userAgent","deviceSpecs","isIPhone","isIPad","isIPadOS","hasIOSNavigator","hasIOSPlatform","isIOS","deviceType","optimizations","screenWidth","screenHeight","maxDimension","minDimension","_isIOS","specs","baseConstraints","DeviceDetection"],"mappings":"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"}