{"version":3,"file":"MicrophoneController-mAu1_vZl.js","sources":["../src/core/AudioManager.ts","../src/core/PitchDetector.ts","../src/core/NoiseFilter.ts","../src/core/MicrophoneLifecycleManager.ts","../src/core/ErrorNotificationSystem.ts","../src/core/MicrophoneController.ts"],"sourcesContent":["/**\n * AudioManager - Framework-agnostic Global Audio Resource Management System\n * \n * Purpose: Solve multiple AudioContext issues\n * - Share single AudioContext across entire application\n * - Reuse single MediaStream across all components\n * - Safe resource management and cleanup\n */\n\nimport type { \n  AudioManagerConfig, \n  MediaStreamResources, \n  HealthStatus, \n  TrackState,\n  DeviceSpecs\n} from '../types';\n\nexport class AudioManager {\n  // Global shared resources\n  private audioContext: AudioContext | null = null;\n  private mediaStream: MediaStream | null = null;\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\n  private gainNode: GainNode | null = null; // For microphone sensitivity adjustment\n  \n  // Analyser management\n  private analysers = new Map<string, AnalyserNode>();\n  private filters = new Map<string, { highpass: BiquadFilterNode; lowpass: BiquadFilterNode; notch: BiquadFilterNode }>();\n  \n  // Reference counting (for safe cleanup)\n  private refCount = 0;\n  private initPromise: Promise<MediaStreamResources> | null = null; // Prevent duplicate initialization\n  \n  // State management\n  private isInitialized = false;\n  private lastError: Error | null = null;\n  \n  // Sensitivity settings (iPad compatibility)\n  private currentSensitivity: number; // Device-dependent default sensitivity\n  \n  // Configuration\n  private config: AudioManagerConfig;\n\n  constructor(config: AudioManagerConfig = {}) {\n    this.config = {\n      sampleRate: 44100,\n      channelCount: 1,\n      echoCancellation: false,\n      noiseSuppression: false,\n      autoGainControl: false,\n      latency: 0.1,\n      ...config\n    };\n    \n    this.currentSensitivity = this._getDefaultSensitivity();\n  }\n\n  /**\n   * Get device-dependent default sensitivity\n   */\n  private _getDefaultSensitivity(): number {\n    const deviceSpecs = this.getPlatformSpecs();\n    \n    switch (deviceSpecs.deviceType) {\n      case 'iPad':\n        console.log('üîß [AudioManager] iPad detected - setting default sensitivity 7.0x');\n        return 7.0;\n      case 'iPhone':\n        console.log('üîß [AudioManager] iPhone detected - setting default sensitivity 3.0x');\n        return 3.0;\n      default:\n        console.log('üîß [AudioManager] PC detected - setting default sensitivity 1.0x');\n        return 1.0;\n    }\n  }\n\n  /**\n   * Initialize audio resources\n   * Safe to call multiple times (singleton-like behavior)\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    // If already initializing, wait for completion\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    // If already initialized - perform MediaStream health check\n    if (this.isInitialized && this.audioContext && this.mediaStream) {\n      const healthCheck = this.checkMediaStreamHealth();\n      \n      if (healthCheck.healthy) {\n        this.refCount++;\n        return {\n          audioContext: this.audioContext,\n          mediaStream: this.mediaStream,\n          sourceNode: this.sourceNode!\n        };\n      } else {\n        // Force re-initialization if MediaStream is unhealthy\n        console.warn('‚ö†Ô∏è [AudioManager] Unhealthy MediaStream detected - force re-initialization:', healthCheck);\n        console.log('üîÑ [AudioManager] Unhealthy MediaStream details:', {\n          mediaStreamActive: this.mediaStream?.active,\n          trackCount: this.mediaStream?.getTracks().length,\n          trackStates: this.mediaStream?.getTracks().map(t => ({\n            kind: t.kind,\n            readyState: t.readyState,\n            enabled: t.enabled,\n            muted: t.muted\n          }))\n        });\n        \n        // Perform safe cleanup\n        this._cleanup();\n        this.isInitialized = false;\n        this.refCount = 0;\n        \n        // Short wait to ensure resource release\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        console.log('üîÑ [AudioManager] Cleanup complete - starting re-initialization');\n        // Continue to next block for re-initialization\n      }\n    }\n\n    // Execute initialization\n    this.initPromise = this._doInitialize();\n    \n    try {\n      const result = await this.initPromise;\n      this.initPromise = null;\n      return result;\n    } catch (error) {\n      this.initPromise = null;\n      throw error;\n    }\n  }\n\n  /**\n   * Actual initialization process\n   */\n  private async _doInitialize(): Promise<MediaStreamResources> {\n    try {\n      console.log('üé§ [AudioManager] Starting initialization');\n\n      // Create AudioContext (single instance)\n      if (!this.audioContext) {\n        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n        console.log('‚úÖ [AudioManager] AudioContext creation complete');\n      }\n\n      // Resume AudioContext if suspended\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n        console.log('‚úÖ [AudioManager] AudioContext resume complete');\n      }\n\n      // Get MediaStream (single instance)\n      if (!this.mediaStream) {\n        const deviceSpecs = this.getPlatformSpecs();\n        \n        console.log(`üîç [AudioManager] Device detection: ${deviceSpecs.deviceType}`, navigator.userAgent);\n        console.log(`üîç [AudioManager] Touch support: ${'ontouchend' in document}`);\n        \n        // Safari WebKit compatibility: Maximum compatibility audio settings\n        const audioConstraints: MediaStreamConstraints = {\n          audio: {\n            // Basic settings: Safari WebKit stability focused\n            echoCancellation: this.config.echoCancellation,\n            noiseSuppression: this.config.noiseSuppression,\n            autoGainControl: this.config.autoGainControl,\n            \n            // iOS specific: Ultra high sensitivity settings\n            ...(deviceSpecs.isIOS && {\n              googAutoGainControl: false,     // Google AGC complete disable\n              googNoiseSuppression: false,    // Google noise suppression disable\n              googEchoCancellation: false,    // Google echo cancellation disable\n              googHighpassFilter: false,      // Google highpass filter disable\n              googTypingNoiseDetection: false, // Typing noise detection disable\n              googBeamforming: false,         // Beamforming disable\n              mozAutoGainControl: false,      // Mozilla AGC disable\n              mozNoiseSuppression: false,     // Mozilla noise suppression disable\n            } as any),\n            \n            // Safari compatibility: Explicit quality settings\n            sampleRate: this.config.sampleRate,\n            channelCount: this.config.channelCount,\n            sampleSize: 16,\n            \n            // Safari WebKit additional stabilization settings\n            latency: this.config.latency,  // 100ms latency tolerance\n            volume: 1.0,   // Volume normalization\n            \n            // Flexible device selection (Safari compatibility)\n            deviceId: { ideal: 'default' }\n          }\n        };\n        \n        console.log('üé§ [AudioManager] Getting MediaStream with Safari-compatible settings:', audioConstraints);\n        this.mediaStream = await navigator.mediaDevices.getUserMedia(audioConstraints);\n        console.log('‚úÖ [AudioManager] MediaStream acquisition complete');\n      }\n\n      // Create SourceNode (single instance)\n      if (!this.sourceNode) {\n        this.sourceNode = this.audioContext.createMediaStreamSource(this.mediaStream);\n        console.log('‚úÖ [AudioManager] SourceNode creation complete');\n        \n        // MediaStream state check\n        const tracks = this.mediaStream.getTracks();\n        console.log('üé§ [AudioManager] MediaStream tracks:', tracks.map(t => ({\n          kind: t.kind,\n          label: t.label,\n          enabled: t.enabled,\n          readyState: t.readyState,\n          muted: t.muted\n        })));\n      }\n\n      // Create GainNode (for microphone sensitivity adjustment)\n      if (!this.gainNode) {\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.gain.value = this.currentSensitivity;\n        \n        // Connect SourceNode -> GainNode\n        this.sourceNode.connect(this.gainNode);\n        console.log(`‚úÖ [AudioManager] GainNode creation complete (sensitivity: ${this.currentSensitivity}x)`);\n      }\n\n      this.isInitialized = true;\n      this.refCount++;\n      this.lastError = null;\n\n      console.log(`üé§ [AudioManager] Initialization complete (refCount: ${this.refCount})`);\n\n      return {\n        audioContext: this.audioContext,\n        mediaStream: this.mediaStream,\n        sourceNode: this.sourceNode\n      };\n\n    } catch (error) {\n      console.error('‚ùå [AudioManager] Initialization error:', error);\n      this.lastError = error as Error;\n      this.isInitialized = false;\n      \n      // Cleanup on error\n      this._cleanup();\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Create dedicated AnalyserNode\n   * @param id - Analyser identifier\n   * @param options - Option settings\n   */\n  createAnalyser(id: string, options: {\n    fftSize?: number;\n    smoothingTimeConstant?: number;\n    minDecibels?: number;\n    maxDecibels?: number;\n    useFilters?: boolean;\n  } = {}): AnalyserNode {\n    if (!this.isInitialized || !this.audioContext || !this.sourceNode) {\n      throw new Error('AudioManager not initialized. Call initialize() first.');\n    }\n\n    // Remove existing analyser if present\n    this.removeAnalyser(id);\n\n    const {\n      fftSize = 2048,\n      smoothingTimeConstant = 0.8,\n      minDecibels = -90,\n      maxDecibels = -10,\n      useFilters = true\n    } = options;\n\n    // Create Analyser (Safari WebKit optimized)\n    const analyser = this.audioContext.createAnalyser();\n    \n    // Safari load reduction settings\n    analyser.fftSize = Math.min(fftSize, 2048); // Safari upper limit restriction\n    analyser.smoothingTimeConstant = Math.max(smoothingTimeConstant, 0.7); // Safari stabilization\n    analyser.minDecibels = Math.max(minDecibels, -80); // Safari range optimization\n    analyser.maxDecibels = Math.min(maxDecibels, -10);\n\n    let finalNode: AudioNode = this.gainNode || this.sourceNode;\n\n    // Create filter chain (optional)\n    if (useFilters) {\n      const filterChain = this._createFilterChain();\n      this.filters.set(id, filterChain);\n      \n      // Connect filter chain (starting from GainNode)\n      finalNode.connect(filterChain.highpass);\n      filterChain.highpass.connect(filterChain.lowpass);\n      filterChain.lowpass.connect(filterChain.notch);\n      filterChain.notch.connect(analyser);\n      \n      console.log(`üîß [AudioManager] Filtered Analyser created: ${id}`);\n    } else {\n      // Direct connection (signal from GainNode)\n      finalNode.connect(analyser);\n      console.log(`üîß [AudioManager] Raw signal Analyser created: ${id}`);\n    }\n    \n    // Important: Analyser only passes audio through, don't connect to destination\n    // (prevents microphone feedback)\n\n    this.analysers.set(id, analyser);\n    return analyser;\n  }\n\n  /**\n   * Create 3-stage noise reduction filter chain\n   */\n  private _createFilterChain() {\n    if (!this.audioContext) {\n      throw new Error('AudioContext not available');\n    }\n\n    // 1. Highpass filter (remove low frequency noise: cut below 80Hz)\n    const highpass = this.audioContext.createBiquadFilter();\n    highpass.type = 'highpass';\n    highpass.frequency.setValueAtTime(80, this.audioContext.currentTime);\n    highpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n    const lowpass = this.audioContext.createBiquadFilter();\n    lowpass.type = 'lowpass';\n    lowpass.frequency.setValueAtTime(800, this.audioContext.currentTime);\n    lowpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 3. Notch filter (remove power noise: 60Hz)\n    const notch = this.audioContext.createBiquadFilter();\n    notch.type = 'notch';\n    notch.frequency.setValueAtTime(60, this.audioContext.currentTime);\n    notch.Q.setValueAtTime(10, this.audioContext.currentTime);\n\n    return { highpass, lowpass, notch };\n  }\n\n  /**\n   * Remove specific analyser\n   */\n  removeAnalyser(id: string): void {\n    if (this.analysers.has(id)) {\n      const analyser = this.analysers.get(id)!;\n      analyser.disconnect();\n      this.analysers.delete(id);\n      console.log(`üóëÔ∏è [AudioManager] Analyser removed: ${id}`);\n    }\n\n    if (this.filters.has(id)) {\n      const filterChain = this.filters.get(id)!;\n      filterChain.highpass.disconnect();\n      filterChain.lowpass.disconnect();\n      filterChain.notch.disconnect();\n      this.filters.delete(id);\n      console.log(`üóëÔ∏è [AudioManager] Filter chain removed: ${id}`);\n    }\n  }\n\n  /**\n   * Adjust microphone sensitivity\n   * @param sensitivity - Sensitivity multiplier (0.1 ~ 10.0)\n   */\n  setSensitivity(sensitivity: number): void {\n    // Range limit (extended to 10.0x for iPad real device support)\n    const clampedSensitivity = Math.max(0.1, Math.min(10.0, sensitivity));\n    \n    if (this.gainNode) {\n      this.gainNode.gain.value = clampedSensitivity;\n      this.currentSensitivity = clampedSensitivity;\n      console.log(`üé§ [AudioManager] Microphone sensitivity updated: ${clampedSensitivity.toFixed(1)}x`);\n    } else {\n      // If GainNode not initialized, save setting only\n      this.currentSensitivity = clampedSensitivity;\n      console.log(`üé§ [AudioManager] Microphone sensitivity set (awaiting initialization): ${clampedSensitivity.toFixed(1)}x`);\n    }\n  }\n\n  /**\n   * Get current microphone sensitivity\n   */\n  getSensitivity(): number {\n    return this.currentSensitivity;\n  }\n\n  /**\n   * Get platform-specific settings according to specification\n   * Complies with MICROPHONE_PLATFORM_SPECIFICATIONS.md\n   */\n  getPlatformSpecs(): DeviceSpecs {\n    // Device detection (unified version)\n    const isIPhone = /iPhone/.test(navigator.userAgent);\n    const isIPad = /iPad/.test(navigator.userAgent);\n    const isIPadOS = /Macintosh/.test(navigator.userAgent) && 'ontouchend' in document;\n    const isIOS = isIPhone || isIPad || isIPadOS;\n    \n    // Specification-compliant parameters\n    const deviceType = (isIPad || isIPadOS) ? 'iPad' : isIPhone ? 'iPhone' : 'PC';\n    \n    return {\n      deviceType,\n      isIOS,\n      \n      // Volume calculation divisor (important: this value determines sensitivity)\n      divisor: isIOS ? 4.0 : 6.0,           // iPhone/iPad: 4.0, PC: 6.0\n      \n      // Volume correction (iPhone/iPad low frequency cut response)  \n      gainCompensation: isIOS ? 1.5 : 1.0,  // iPhone/iPad: 1.5, PC: 1.0\n      \n      // Noise threshold (basis for 0% display during silence)\n      noiseThreshold: isIOS ? 12 : 15,      // iPhone/iPad: 12, PC: 15\n      \n      // Smoothing (minimal)\n      smoothingFactor: 0.2,                 // Common to both platforms\n      \n      // Additional device-specific settings\n      sensitivity: this.currentSensitivity,\n      noiseGate: isIOS ? 0.01 : 0.02\n    };\n  }\n\n  /**\n   * Decrement reference count and cleanup\n   */\n  release(analyserIds: string[] = []): void {\n    // Remove specified analysers\n    analyserIds.forEach(id => this.removeAnalyser(id));\n\n    this.refCount = Math.max(0, this.refCount - 1);\n    console.log(`üìâ [AudioManager] Reference count decremented: ${this.refCount}`);\n\n    // Full cleanup only when no one is using it\n    if (this.refCount <= 0) {\n      console.log('üßπ [AudioManager] Starting full resource cleanup');\n      this._cleanup();\n    }\n  }\n\n  /**\n   * Force cleanup (for emergency use)\n   */\n  forceCleanup(): void {\n    console.log('üö® [AudioManager] Force cleanup executed');\n    this._cleanup();\n  }\n\n  /**\n   * Internal cleanup process\n   */\n  private _cleanup(): void {\n    console.log('üßπ [AudioManager] Starting cleanup');\n    \n    // Remove all analysers\n    for (const id of this.analysers.keys()) {\n      this.removeAnalyser(id);\n    }\n\n    // Stop MediaStream (health check compatible)\n    if (this.mediaStream) {\n      const tracks = this.mediaStream.getTracks();\n      console.log(`üõë [AudioManager] Stopping MediaStream: ${tracks.length} tracks`);\n      \n      tracks.forEach((track, index) => {\n        try {\n          if (track.readyState !== 'ended') {\n            track.stop();\n            console.log(`üõë [AudioManager] Track ${index} stop complete`);\n          } else {\n            console.log(`‚ö†Ô∏è [AudioManager] Track ${index} already ended`);\n          }\n        } catch (error) {\n          console.warn(`‚ö†Ô∏è [AudioManager] Track ${index} stop error:`, error);\n        }\n      });\n      \n      this.mediaStream = null;\n    }\n\n    // Close AudioContext\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      try {\n        this.audioContext.close();\n        console.log('üõë [AudioManager] AudioContext close complete');\n      } catch (error) {\n        console.warn('‚ö†Ô∏è [AudioManager] AudioContext close error:', error);\n      }\n      this.audioContext = null;\n    }\n\n    // Remove GainNode\n    if (this.gainNode) {\n      this.gainNode.disconnect();\n      this.gainNode = null;\n    }\n\n    // Remove SourceNode\n    if (this.sourceNode) {\n      this.sourceNode.disconnect();\n      this.sourceNode = null;\n    }\n\n    // Reset state\n    this.isInitialized = false;\n    this.refCount = 0;\n    this.initPromise = null;\n    this.currentSensitivity = this._getDefaultSensitivity(); // Reset to device-dependent default sensitivity\n\n    console.log('‚úÖ [AudioManager] Cleanup complete');\n  }\n\n  /**\n   * Get current status (for debugging)\n   */\n  getStatus() {\n    return {\n      isInitialized: this.isInitialized,\n      refCount: this.refCount,\n      audioContextState: this.audioContext?.state || 'none',\n      mediaStreamActive: this.mediaStream?.active || false,\n      activeAnalysers: Array.from(this.analysers.keys()),\n      activeFilters: Array.from(this.filters.keys()),\n      lastError: this.lastError,\n      currentSensitivity: this.currentSensitivity\n    };\n  }\n\n  /**\n   * MediaStream health status check\n   */\n  checkMediaStreamHealth(): HealthStatus {\n    if (!this.mediaStream) {\n      return { \n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    // MediaStream state check (Safari compatibility enhanced)\n    if (!this.mediaStream.active) {\n      return {\n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const tracks = this.mediaStream.getTracks();\n    if (tracks.length === 0) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const audioTrack = tracks.find(track => track.kind === 'audio');\n    if (!audioTrack) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: tracks.map(track => ({\n          kind: track.kind,\n          enabled: track.enabled,\n          readyState: track.readyState,\n          muted: track.muted\n        })),\n        healthy: false\n      };\n    }\n\n    const trackStates: TrackState[] = tracks.map(track => ({\n      kind: track.kind,\n      enabled: track.enabled,\n      readyState: track.readyState,\n      muted: track.muted\n    }));\n\n    // AudioTrack detailed state check (Safari WebKit compatibility)\n    if (audioTrack.readyState === 'ended') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    if (!audioTrack.enabled) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // Safari-specific muted state check\n    if (audioTrack.muted) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // Additional check: MediaStream and Track consistency verification\n    if (this.mediaStream.active && audioTrack.readyState !== 'live') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    return {\n      mediaStreamActive: this.mediaStream.active,\n      audioContextState: this.audioContext?.state || 'none',\n      trackStates,\n      healthy: true,\n      refCount: this.refCount\n    };\n  }\n}","/**\n * PitchDetector - Framework-agnostic High-precision Pitch Detection\n * \n * Based on Pitchy library with McLeod Pitch Method\n * Includes harmonic correction, noise filtering, and device-specific optimization\n */\n\nimport { PitchDetector as PitchyDetector } from 'pitchy';\nimport type { \n  PitchDetectorConfig, \n  PitchDetectionResult, \n  PitchCallback,\n  ErrorCallback,\n  StateChangeCallback,\n  DeviceSpecs\n} from '../types';\nimport { AudioManager } from './AudioManager';\n\nexport class PitchDetector {\n  // Core components\n  private audioManager: AudioManager;\n  private pitchDetector: PitchyDetector<Float32Array> | null = null;\n  private analyser: AnalyserNode | null = null;\n  private rawAnalyser: AnalyserNode | null = null;\n  private animationFrame: number | null = null;\n  \n  // State management\n  private componentState: 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'error' = 'uninitialized';\n  private isInitialized = false;\n  private isDetecting = false;\n  private lastError: Error | null = null;\n  \n  // Analyser management\n  private analyserIds: string[] = [];\n  \n  // Detection data\n  private currentVolume = 0;\n  private rawVolume = 0;\n  private currentFrequency = 0;\n  private detectedNote = '--';\n  private pitchClarity = 0;\n  \n  // Stabilization buffers\n  private volumeHistory: number[] = [];\n  private stableVolume = 0;\n  \n  // Harmonic correction\n  private previousFrequency = 0;\n  private harmonicHistory: Array<{frequency: number, confidence: number, timestamp: number}> = [];\n  \n  // Configuration\n  private config: Required<PitchDetectorConfig>;\n  private disableHarmonicCorrection = false;\n  \n  // Callbacks\n  private callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  } = {};\n  \n  // Device specifications\n  private deviceSpecs: DeviceSpecs;\n\n  constructor(audioManager: AudioManager, config: PitchDetectorConfig = {}) {\n    this.audioManager = audioManager;\n    this.config = {\n      fftSize: 4096,\n      smoothing: 0.1,\n      clarityThreshold: 0.8,\n      minVolumeAbsolute: 0.01,\n      ...config\n    };\n    \n    this.deviceSpecs = this.audioManager.getPlatformSpecs();\n  }\n\n  /**\n   * Set callback functions\n   */\n  setCallbacks(callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Initialize pitch detector with external AudioContext\n   */\n  async initialize(): Promise<void> {\n    try {\n      this.componentState = 'initializing';\n      this.lastError = null;\n      \n      console.log('üéôÔ∏è [PitchDetector] Starting initialization via AudioManager');\n      \n      // Get shared resources from AudioManager\n      await this.audioManager.initialize();\n      \n      console.log('‚úÖ [PitchDetector] AudioManager resources acquired');\n      \n      // Create dedicated Analyser (with filters)\n      const filteredAnalyserId = `pitch-detector-filtered-${Date.now()}`;\n      this.analyser = this.audioManager.createAnalyser(filteredAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: true\n      });\n      this.analyserIds.push(filteredAnalyserId);\n      \n      // Create raw signal Analyser (for comparison)\n      const rawAnalyserId = `pitch-detector-raw-${Date.now()}`;\n      this.rawAnalyser = this.audioManager.createAnalyser(rawAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: false\n      });\n      this.analyserIds.push(rawAnalyserId);\n      \n      console.log('‚úÖ [PitchDetector] Analysers created:', this.analyserIds);\n      \n      // Initialize PitchDetector\n      this.pitchDetector = PitchyDetector.forFloat32Array(this.analyser.fftSize);\n      \n      // Initialization complete\n      this.componentState = 'ready';\n      this.isInitialized = true;\n      \n      // Notify state change\n      this.callbacks.onStateChange?.(this.componentState);\n      \n      console.log('‚úÖ [PitchDetector] Initialization complete');\n      \n    } catch (error) {\n      console.error('‚ùå [PitchDetector] Initialization error:', error);\n      this.componentState = 'error';\n      this.lastError = error as Error;\n      this.isInitialized = false;\n      \n      // Notify error\n      this.callbacks.onError?.(error as Error);\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Start pitch detection\n   */\n  startDetection(): boolean {\n    if (this.componentState !== 'ready') {\n      const error = new Error(`Cannot start detection: component state is ${this.componentState}`);\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    if (!this.analyser || !this.pitchDetector) {\n      const error = new Error('Required components not available');\n      this.componentState = 'error';\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    this.componentState = 'detecting';\n    this.isDetecting = true;\n    this.callbacks.onStateChange?.(this.componentState);\n    this.detectPitch();\n    return true;\n  }\n\n  /**\n   * Stop pitch detection\n   */\n  stopDetection(): void {\n    this.isDetecting = false;\n    if (this.animationFrame) {\n      cancelAnimationFrame(this.animationFrame);\n      this.animationFrame = null;\n    }\n    \n    // Return state to ready (if initialized)\n    if (this.componentState === 'detecting' && this.isInitialized) {\n      this.componentState = 'ready';\n      this.callbacks.onStateChange?.(this.componentState);\n    }\n  }\n\n  /**\n   * Real-time pitch detection loop\n   */\n  private detectPitch(): void {\n    if (!this.isDetecting || !this.analyser || !this.rawAnalyser || !this.pitchDetector) return;\n    \n    const bufferLength = this.analyser.fftSize;\n    const buffer = new Float32Array(bufferLength);\n    const rawBuffer = new Float32Array(this.rawAnalyser.fftSize);\n    \n    this.analyser.getFloatTimeDomainData(buffer);\n    this.rawAnalyser.getFloatTimeDomainData(rawBuffer);\n    \n    // Volume calculation (filtered)\n    let sum = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      sum += Math.abs(buffer[i]);\n    }\n    const rms = Math.sqrt(sum / bufferLength);\n    \n    // Platform-specific volume calculation\n    const platformSpecs = this.deviceSpecs;\n    const adjustedRms = rms * platformSpecs.gainCompensation;\n    const volumePercent = Math.max(0, Math.min(100, \n      (adjustedRms * 100) / platformSpecs.divisor * 6 - platformSpecs.noiseThreshold\n    ));\n    \n    // Raw volume calculation (pre-filter)\n    let rawSum = 0;\n    for (let i = 0; i < rawBuffer.length; i++) {\n      rawSum += Math.abs(rawBuffer[i]);\n    }\n    const rawRms = Math.sqrt(rawSum / rawBuffer.length);\n    const rawVolumePercent = Math.max(0, Math.min(100, \n      (rawRms * platformSpecs.gainCompensation * 100) / platformSpecs.divisor * 6 - platformSpecs.noiseThreshold\n    ));\n    \n    // Volume stabilization (5-frame moving average)\n    this.volumeHistory.push(volumePercent);\n    if (this.volumeHistory.length > 5) {\n      this.volumeHistory.shift();\n    }\n    this.stableVolume = this.volumeHistory.reduce((sum, v) => sum + v, 0) / this.volumeHistory.length;\n    this.currentVolume = this.stableVolume;\n    this.rawVolume = rawVolumePercent;\n    \n    // Pitch detection (using PitchDetector)\n    const audioContext = this.audioManager.getStatus().audioContextState;\n    const sampleRate = audioContext === 'running' ? 44100 : 44100; // Default fallback\n    const [pitch, clarity] = this.pitchDetector.findPitch(buffer, sampleRate);\n    \n    // Human vocal range filtering (practical adjustment)\n    // Optimized for actual human voice range:\n    // - Low range: 65Hz and above (C2 and above, considering male lowest vocal range)  \n    // - High range: 1200Hz and below (practical singing range)\n    // - Exclude extreme low frequency noise (G-1, etc.) reliably\n    const isValidVocalRange = pitch >= 65 && pitch <= 1200;\n    \n    if (pitch && clarity > this.config.clarityThreshold && this.currentVolume > 30 && isValidVocalRange) {\n      let finalFreq = pitch;\n      \n      // Harmonic correction control (for 230Hz stuck issue debugging)\n      if (!this.disableHarmonicCorrection) {\n        // Apply unified harmonic correction system (pass volume information)\n        const normalizedVolume = Math.min(this.currentVolume / 100, 1.0); // Normalize to 0-1\n        finalFreq = this.correctHarmonic(pitch, normalizedVolume);\n      }\n      \n      // Update frequency display\n      this.currentFrequency = Math.round(finalFreq);\n      this.detectedNote = this.frequencyToNote(this.currentFrequency);\n      this.pitchClarity = clarity;\n      \n    } else {\n      // Clear harmonic correction history when signal is weak\n      if (this.currentFrequency === 0) {\n        this.resetHarmonicHistory();\n      }\n      \n      // Clear frequency display\n      this.currentFrequency = 0;\n      this.detectedNote = '--';\n      this.pitchClarity = 0;\n    }\n    \n    // Set VolumeBar to 0 when no pitch is detected (counter extreme low frequency noise)\n    const displayVolume = this.currentFrequency > 0 ? this.rawVolume : 0;\n    \n    // Send data to callback\n    const result: PitchDetectionResult = {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      clarity: this.pitchClarity,\n      volume: displayVolume,\n      cents: this.currentFrequency > 0 ? this.frequencyToCents(this.currentFrequency) : undefined\n    };\n    \n    this.callbacks.onPitchUpdate?.(result);\n    \n    this.animationFrame = requestAnimationFrame(() => this.detectPitch());\n  }\n\n  /**\n   * Harmonic correction system\n   */\n  private correctHarmonic(frequency: number, volume: number): number {\n    const now = Date.now();\n    const confidenceThreshold = 0.7;\n    const historyWindow = 1000; // 1 second\n    \n    // Clean old history\n    this.harmonicHistory = this.harmonicHistory.filter(h => now - h.timestamp < historyWindow);\n    \n    // Calculate confidence based on volume and stability\n    const volumeConfidence = Math.min(volume * 1.5, 1.0);\n    const stabilityConfidence = this.previousFrequency > 0 ? \n      Math.max(0, 1 - Math.abs(frequency - this.previousFrequency) / this.previousFrequency) : 0.5;\n    const confidence = (volumeConfidence + stabilityConfidence) / 2;\n    \n    // Add to history\n    this.harmonicHistory.push({ frequency, confidence, timestamp: now });\n    \n    // Check for harmonic patterns\n    if (this.harmonicHistory.length >= 3) {\n      const recentHistory = this.harmonicHistory.slice(-5);\n      const avgFrequency = recentHistory.reduce((sum, h) => sum + h.frequency, 0) / recentHistory.length;\n      const avgConfidence = recentHistory.reduce((sum, h) => sum + h.confidence, 0) / recentHistory.length;\n      \n      // Check for 2x harmonic (octave up error)\n      const halfFrequency = frequency / 2;\n      if (Math.abs(halfFrequency - avgFrequency) / avgFrequency < 0.1 && avgConfidence > confidenceThreshold) {\n        console.log(`üîß [PitchDetector] Octave correction: ${frequency}Hz ‚Üí ${halfFrequency}Hz`);\n        this.previousFrequency = halfFrequency;\n        return halfFrequency;\n      }\n      \n      // Check for 1/2x harmonic (octave down error)\n      const doubleFrequency = frequency * 2;\n      if (Math.abs(doubleFrequency - avgFrequency) / avgFrequency < 0.1 && avgConfidence > confidenceThreshold) {\n        console.log(`üîß [PitchDetector] Octave up correction: ${frequency}Hz ‚Üí ${doubleFrequency}Hz`);\n        this.previousFrequency = doubleFrequency;\n        return doubleFrequency;\n      }\n    }\n    \n    this.previousFrequency = frequency;\n    return frequency;\n  }\n\n  /**\n   * Reset harmonic correction history\n   */\n  private resetHarmonicHistory(): void {\n    this.harmonicHistory = [];\n    this.previousFrequency = 0;\n  }\n\n  /**\n   * Convert frequency to note name\n   */\n  private frequencyToNote(frequency: number): string {\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const A4 = 440;\n    \n    if (frequency <= 0) return '--';\n    \n    const semitonesFromA4 = Math.round(12 * Math.log2(frequency / A4));\n    const noteIndex = (semitonesFromA4 + 9 + 120) % 12;\n    const octave = Math.floor((semitonesFromA4 + 9) / 12) + 4;\n    \n    return noteNames[noteIndex] + octave;\n  }\n\n  /**\n   * Convert frequency to cents deviation from nearest note\n   */\n  private frequencyToCents(frequency: number): number {\n    const A4 = 440;\n    const semitonesFromA4 = 12 * Math.log2(frequency / A4);\n    const nearestSemitone = Math.round(semitonesFromA4);\n    const centsDeviation = (semitonesFromA4 - nearestSemitone) * 100;\n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Reset display state\n   */\n  resetDisplayState(): void {\n    this.currentVolume = 0;\n    this.rawVolume = 0;\n    this.currentFrequency = 0;\n    this.detectedNote = '--';\n    this.pitchClarity = 0;\n    this.stableVolume = 0;\n    \n    // Clear buffers\n    this.volumeHistory = [];\n    \n    // Reset harmonic correction\n    this.resetHarmonicHistory();\n    \n    console.log('üîÑ [PitchDetector] Display state reset');\n  }\n\n  /**\n   * Enable/disable harmonic correction\n   */\n  setHarmonicCorrectionEnabled(enabled: boolean): void {\n    this.disableHarmonicCorrection = !enabled;\n    if (!enabled) {\n      this.resetHarmonicHistory();\n    }\n  }\n\n  /**\n   * Get initialization status\n   */\n  getIsInitialized(): boolean {\n    return this.isInitialized && this.componentState === 'ready';\n  }\n\n  /**\n   * Get current state\n   */\n  getState() {\n    return {\n      componentState: this.componentState,\n      isInitialized: this.isInitialized,\n      isDetecting: this.isDetecting,\n      lastError: this.lastError,\n      hasRequiredComponents: !!(this.analyser && this.pitchDetector)\n    };\n  }\n\n  /**\n   * Get current detection result\n   */\n  getCurrentResult(): PitchDetectionResult {\n    return {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      clarity: this.pitchClarity,\n      volume: this.currentFrequency > 0 ? this.rawVolume : 0\n    };\n  }\n\n  /**\n   * Reinitialize detector\n   */\n  async reinitialize(): Promise<void> {\n    console.log('üîÑ [PitchDetector] Starting reinitialization');\n    \n    // Cleanup current state\n    this.cleanup();\n    \n    // Short wait to ensure resource release\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    // Execute reinitialization\n    await this.initialize();\n    \n    console.log('‚úÖ [PitchDetector] Reinitialization complete');\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    console.log('üßπ [PitchDetector] Starting cleanup');\n    \n    this.stopDetection();\n    \n    // Notify AudioManager to release created Analysers\n    if (this.analyserIds.length > 0) {\n      this.audioManager.release(this.analyserIds);\n      console.log('üì§ [PitchDetector] Notified AudioManager of Analyser release:', this.analyserIds);\n      this.analyserIds = [];\n    }\n    \n    // Reset state\n    this.componentState = 'uninitialized';\n    this.isInitialized = false;\n    this.lastError = null;\n    \n    // Clear references (actual resources managed by AudioManager)\n    this.analyser = null;\n    this.rawAnalyser = null;\n    this.pitchDetector = null;\n    \n    // Clear history\n    this.volumeHistory = [];\n    this.resetHarmonicHistory();\n    \n    console.log('‚úÖ [PitchDetector] Cleanup complete');\n  }\n}","/**\n * NoiseFilter - 3-stage Noise Reduction Filter Chain\n * \n * Implements sophisticated noise filtering for voice detection:\n * 1. Highpass filter - Remove low frequency noise (below 80Hz)\n * 2. Lowpass filter - Remove high frequency noise (above 800Hz) \n * 3. Notch filter - Remove power line noise (60Hz)\n */\n\nimport type { NoiseFilterConfig } from '../types';\n\nexport class NoiseFilter {\n  private audioContext: AudioContext;\n  private config: Required<NoiseFilterConfig>;\n  \n  // Filter nodes\n  private highpassFilter: BiquadFilterNode | null = null;\n  private lowpassFilter: BiquadFilterNode | null = null;\n  private notchFilter: BiquadFilterNode | null = null;\n  \n  // Chain state\n  private isConnected = false;\n  private inputNode: AudioNode | null = null;\n  private outputNode: AudioNode | null = null;\n\n  constructor(audioContext: AudioContext, config: NoiseFilterConfig = {}) {\n    this.audioContext = audioContext;\n    this.config = {\n      highpassFreq: 80,\n      lowpassFreq: 800,\n      notchFreq: 60,\n      highpassQ: 0.7,\n      lowpassQ: 0.7,\n      notchQ: 10.0,\n      useFilters: true,\n      ...config\n    };\n    \n    this.createFilterChain();\n  }\n\n  /**\n   * Create the 3-stage filter chain\n   */\n  private createFilterChain(): void {\n    if (!this.config.useFilters) {\n      console.log('üîá [NoiseFilter] Filters disabled - bypassing filter chain');\n      return;\n    }\n\n    try {\n      // 1. Highpass filter (remove low frequency noise: cut below 80Hz)\n      this.highpassFilter = this.audioContext.createBiquadFilter();\n      this.highpassFilter.type = 'highpass';\n      this.highpassFilter.frequency.setValueAtTime(this.config.highpassFreq, this.audioContext.currentTime);\n      this.highpassFilter.Q.setValueAtTime(this.config.highpassQ, this.audioContext.currentTime);\n\n      // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n      this.lowpassFilter = this.audioContext.createBiquadFilter();\n      this.lowpassFilter.type = 'lowpass';\n      this.lowpassFilter.frequency.setValueAtTime(this.config.lowpassFreq, this.audioContext.currentTime);\n      this.lowpassFilter.Q.setValueAtTime(this.config.lowpassQ, this.audioContext.currentTime);\n\n      // 3. Notch filter (remove power line noise: 60Hz)\n      this.notchFilter = this.audioContext.createBiquadFilter();\n      this.notchFilter.type = 'notch';\n      this.notchFilter.frequency.setValueAtTime(this.config.notchFreq, this.audioContext.currentTime);\n      this.notchFilter.Q.setValueAtTime(this.config.notchQ, this.audioContext.currentTime);\n\n      console.log('‚úÖ [NoiseFilter] 3-stage filter chain created', {\n        highpass: `${this.config.highpassFreq}Hz (Q=${this.config.highpassQ})`,\n        lowpass: `${this.config.lowpassFreq}Hz (Q=${this.config.lowpassQ})`,\n        notch: `${this.config.notchFreq}Hz (Q=${this.config.notchQ})`\n      });\n\n    } catch (error) {\n      console.error('‚ùå [NoiseFilter] Failed to create filter chain:', error);\n      throw new Error(`NoiseFilter initialization failed: ${error}`);\n    }\n  }\n\n  /**\n   * Connect the filter chain between input and output nodes\n   */\n  connect(inputNode: AudioNode, outputNode?: AudioNode): AudioNode {\n    if (!this.config.useFilters) {\n      // Bypass filtering - direct connection\n      if (outputNode) {\n        inputNode.connect(outputNode);\n      }\n      return inputNode;\n    }\n\n    if (!this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      throw new Error('NoiseFilter not properly initialized');\n    }\n\n    try {\n      // Disconnect any existing connections\n      this.disconnect();\n\n      // Store references\n      this.inputNode = inputNode;\n      this.outputNode = outputNode || null;\n\n      // Create filter chain: input ‚Üí highpass ‚Üí lowpass ‚Üí notch ‚Üí output\n      inputNode.connect(this.highpassFilter);\n      this.highpassFilter.connect(this.lowpassFilter);\n      this.lowpassFilter.connect(this.notchFilter);\n      \n      if (outputNode) {\n        this.notchFilter.connect(outputNode);\n      }\n\n      this.isConnected = true;\n\n      console.log('üîó [NoiseFilter] Filter chain connected');\n      \n      // Return the final node in the chain (notch filter) for further connections\n      return this.notchFilter!;\n\n    } catch (error) {\n      console.error('‚ùå [NoiseFilter] Connection failed:', error);\n      throw new Error(`NoiseFilter connection failed: ${error}`);\n    }\n  }\n\n  /**\n   * Disconnect the filter chain\n   */\n  disconnect(): void {\n    try {\n      if (this.highpassFilter) {\n        this.highpassFilter.disconnect();\n      }\n      if (this.lowpassFilter) {\n        this.lowpassFilter.disconnect();\n      }\n      if (this.notchFilter) {\n        this.notchFilter.disconnect();\n      }\n      \n      this.isConnected = false;\n      this.inputNode = null;\n      this.outputNode = null;\n\n      console.log('üîå [NoiseFilter] Filter chain disconnected');\n\n    } catch (error) {\n      console.warn('‚ö†Ô∏è [NoiseFilter] Disconnect warning:', error);\n    }\n  }\n\n  /**\n   * Update filter parameters dynamically\n   */\n  updateFrequencies(params: {\n    highpassFreq?: number;\n    lowpassFreq?: number;\n    notchFreq?: number;\n    highpassQ?: number;\n    lowpassQ?: number;\n    notchQ?: number;\n  }): void {\n    const currentTime = this.audioContext.currentTime;\n\n    try {\n      if (params.highpassFreq !== undefined && this.highpassFilter) {\n        this.highpassFilter.frequency.setValueAtTime(params.highpassFreq, currentTime);\n        this.config.highpassFreq = params.highpassFreq;\n      }\n\n      if (params.lowpassFreq !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.frequency.setValueAtTime(params.lowpassFreq, currentTime);\n        this.config.lowpassFreq = params.lowpassFreq;\n      }\n\n      if (params.notchFreq !== undefined && this.notchFilter) {\n        this.notchFilter.frequency.setValueAtTime(params.notchFreq, currentTime);\n        this.config.notchFreq = params.notchFreq;\n      }\n\n      if (params.highpassQ !== undefined && this.highpassFilter) {\n        this.highpassFilter.Q.setValueAtTime(params.highpassQ, currentTime);\n        this.config.highpassQ = params.highpassQ;\n      }\n\n      if (params.lowpassQ !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.Q.setValueAtTime(params.lowpassQ, currentTime);\n        this.config.lowpassQ = params.lowpassQ;\n      }\n\n      if (params.notchQ !== undefined && this.notchFilter) {\n        this.notchFilter.Q.setValueAtTime(params.notchQ, currentTime);\n        this.config.notchQ = params.notchQ;\n      }\n\n      console.log('üîß [NoiseFilter] Filter parameters updated:', params);\n\n    } catch (error) {\n      console.error('‚ùå [NoiseFilter] Parameter update failed:', error);\n      throw new Error(`NoiseFilter parameter update failed: ${error}`);\n    }\n  }\n\n  /**\n   * Enable or disable the entire filter chain\n   */\n  setEnabled(enabled: boolean): void {\n    if (enabled === this.config.useFilters) {\n      return; // No change needed\n    }\n\n    this.config.useFilters = enabled;\n\n    if (this.isConnected && this.inputNode) {\n      // Reconnect with new settings\n      const savedOutputNode = this.outputNode;\n      this.disconnect();\n      \n      if (enabled) {\n        // Recreate filters if they were destroyed\n        if (!this.highpassFilter) {\n          this.createFilterChain();\n        }\n      }\n      \n      this.connect(this.inputNode, savedOutputNode || undefined);\n    }\n\n    console.log(`üîò [NoiseFilter] Filters ${enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  /**\n   * Get filter response at specific frequency (for visualization)\n   */\n  getFilterResponse(frequency: number): { magnitude: number; phase: number } {\n    if (!this.config.useFilters || !this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n\n    try {\n      // Create frequency array for single frequency\n      const frequencyArray = new Float32Array([frequency]);\n      const magnitudeArray = new Float32Array(1);\n      const phaseArray = new Float32Array(1);\n\n      // Calculate combined response (simplified - in practice you'd need to chain the calculations)\n      this.highpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const highpassMagnitude = magnitudeArray[0];\n      \n      this.lowpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const lowpassMagnitude = magnitudeArray[0];\n      \n      this.notchFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const notchMagnitude = magnitudeArray[0];\n\n      // Combined magnitude (multiply individual filter responses)\n      const combinedMagnitude = highpassMagnitude * lowpassMagnitude * notchMagnitude;\n      \n      return { \n        magnitude: combinedMagnitude, \n        phase: phaseArray[0] \n      };\n\n    } catch (error) {\n      console.warn('‚ö†Ô∏è [NoiseFilter] Filter response calculation failed:', error);\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n  }\n\n  /**\n   * Get current filter configuration\n   */\n  getConfig(): Required<NoiseFilterConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Get filter chain status\n   */\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      useFilters: this.config.useFilters,\n      hasFilters: !!(this.highpassFilter && this.lowpassFilter && this.notchFilter),\n      filterTypes: this.config.useFilters ? ['highpass', 'lowpass', 'notch'] : [],\n      frequencies: {\n        highpass: this.config.highpassFreq,\n        lowpass: this.config.lowpassFreq,\n        notch: this.config.notchFreq\n      },\n      qFactors: {\n        highpass: this.config.highpassQ,\n        lowpass: this.config.lowpassQ,\n        notch: this.config.notchQ\n      }\n    };\n  }\n\n  /**\n   * Get the final output node (for chaining)\n   */\n  getOutputNode(): AudioNode | null {\n    if (!this.config.useFilters || !this.notchFilter) {\n      return this.inputNode || null; // Bypass mode\n    }\n    return this.notchFilter;\n  }\n\n  /**\n   * Cleanup and destroy filter nodes\n   */\n  destroy(): void {\n    console.log('üóëÔ∏è [NoiseFilter] Destroying filter chain');\n    \n    this.disconnect();\n    \n    // Note: Filter nodes are automatically garbage collected\n    // when disconnected and no longer referenced\n    this.highpassFilter = null;\n    this.lowpassFilter = null;\n    this.notchFilter = null;\n    \n    console.log('‚úÖ [NoiseFilter] Cleanup complete');\n  }\n\n  /**\n   * Create a preset configuration for different scenarios\n   */\n  static getPresetConfig(preset: 'voice' | 'instrument' | 'wide' | 'minimal'): NoiseFilterConfig {\n    switch (preset) {\n      case 'voice':\n        return {\n          highpassFreq: 80,   // Remove breath noise\n          lowpassFreq: 800,   // Focus on vocal fundamentals\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.7,\n          lowpassQ: 0.7,\n          notchQ: 10.0,\n          useFilters: true\n        };\n        \n      case 'instrument':\n        return {\n          highpassFreq: 40,   // Preserve low fundamentals\n          lowpassFreq: 2000,  // Allow more harmonics\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.5,\n          lowpassQ: 0.5,\n          notchQ: 8.0,\n          useFilters: true\n        };\n        \n      case 'wide':\n        return {\n          highpassFreq: 20,   // Minimal low cut\n          lowpassFreq: 5000,  // Minimal high cut\n          notchFreq: 60,      // Only power line filtering\n          highpassQ: 0.3,\n          lowpassQ: 0.3,\n          notchQ: 5.0,\n          useFilters: true\n        };\n        \n      case 'minimal':\n        return {\n          highpassFreq: 60,   // Just power line region\n          lowpassFreq: 8000,  // Very high cutoff\n          notchFreq: 60,      // Power line only\n          highpassQ: 0.1,\n          lowpassQ: 0.1,\n          notchQ: 3.0,\n          useFilters: true\n        };\n        \n      default:\n        return {\n          useFilters: false\n        };\n    }\n  }\n}","/**\n * MicrophoneLifecycleManager - Page transition and idle detection microphone control\n * \n * Manages microphone lifecycle across page transitions, idle periods, and redirects\n * Implements reference counting for safe resource management\n * Handles SSR compatibility and automatic recovery\n */\n\nimport type { \n  MediaStreamResources, \n  HealthStatus,\n  LifecycleEvents,\n  StateChangeCallback,\n  ErrorCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\n\nexport class MicrophoneLifecycleManager {\n  private audioManager: AudioManager;\n  private refCount = 0;\n  private isActive = false;\n  private lastHealthCheck: HealthStatus | null = null;\n  \n  // Monitoring intervals\n  private healthCheckInterval: number | null = null;\n  private idleCheckInterval: number | null = null;\n  private visibilityCheckInterval: number | null = null;\n  \n  // State tracking\n  private lastActivityTime = Date.now();\n  private isPageVisible = true;\n  private isUserActive = true;\n  private autoRecoveryAttempts = 0;\n  private maxAutoRecoveryAttempts = 3;\n  \n  // Event listeners storage for cleanup\n  private eventListeners = new Map<string, EventListener>();\n  \n  // Configuration\n  private config = {\n    healthCheckIntervalMs: 5000,     // 5 seconds\n    idleTimeoutMs: 300000,           // 5 minutes\n    autoRecoveryDelayMs: 2000,       // 2 seconds\n    maxIdleTimeBeforeRelease: 600000 // 10 minutes\n  };\n  \n  // Callbacks\n  private callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  } = {};\n\n  constructor(audioManager: AudioManager, config: Partial<typeof MicrophoneLifecycleManager.prototype.config> = {}) {\n    this.audioManager = audioManager;\n    this.config = { ...this.config, ...config };\n    \n    // SSR compatibility check\n    if (typeof window === 'undefined') {\n      console.log('üîá [MicrophoneLifecycleManager] SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.setupEventListeners();\n  }\n\n  /**\n   * Set callback functions\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Acquire microphone resources (with reference counting)\n   */\n  async acquire(): Promise<MediaStreamResources> {\n    this.refCount++;\n    \n    console.log(`üé§ [MicrophoneLifecycleManager] Acquiring resources (refCount: ${this.refCount})`);\n    \n    try {\n      // Initialize AudioManager if not already active\n      if (!this.isActive) {\n        const resources = await this.audioManager.initialize();\n        this.isActive = true;\n        this.lastActivityTime = Date.now();\n        this.autoRecoveryAttempts = 0;\n        \n        // Start monitoring\n        this.startHealthMonitoring();\n        this.startIdleMonitoring();\n        this.startVisibilityMonitoring();\n        \n        this.callbacks.onStateChange?.('active');\n        \n        console.log('üü¢ [MicrophoneLifecycleManager] Microphone activated');\n        return resources;\n      }\n      \n      // Already active - just update activity and return existing resources\n      this.updateActivity();\n      const resources = await this.audioManager.initialize();\n      return resources;\n      \n    } catch (error) {\n      console.error('‚ùå [MicrophoneLifecycleManager] Failed to acquire resources:', error);\n      this.refCount = Math.max(0, this.refCount - 1);\n      this.callbacks.onError?.(error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Release microphone resources (with reference counting)\n   */\n  release(): void {\n    this.refCount = Math.max(0, this.refCount - 1);\n    \n    console.log(`üìâ [MicrophoneLifecycleManager] Releasing resources (refCount: ${this.refCount})`);\n    \n    // Only stop monitoring and cleanup when no references remain\n    if (this.refCount <= 0) {\n      this.stopAllMonitoring();\n      this.audioManager.release();\n      this.isActive = false;\n      \n      this.callbacks.onStateChange?.('inactive');\n      \n      console.log('üî¥ [MicrophoneLifecycleManager] Microphone deactivated');\n    }\n  }\n\n  /**\n   * Force release all resources (emergency cleanup)\n   */\n  forceRelease(): void {\n    console.log('üö® [MicrophoneLifecycleManager] Force release - cleaning up all resources');\n    \n    this.refCount = 0;\n    this.stopAllMonitoring();\n    this.audioManager.forceCleanup();\n    this.isActive = false;\n    \n    this.callbacks.onStateChange?.('inactive');\n  }\n\n  /**\n   * Setup page lifecycle event listeners\n   */\n  private setupEventListeners(): void {\n    // Page visibility change\n    const visibilityChangeHandler = () => {\n      this.isPageVisible = !document.hidden;\n      this.handleVisibilityChange();\n    };\n    \n    // User activity tracking\n    const activityHandler = () => {\n      this.updateActivity();\n    };\n    \n    // Page unload / beforeunload\n    const unloadHandler = () => {\n      this.forceRelease();\n    };\n    \n    // Page focus / blur\n    const focusHandler = () => {\n      this.isPageVisible = true;\n      this.handleVisibilityChange();\n    };\n    \n    const blurHandler = () => {\n      this.isPageVisible = false;\n      this.handleVisibilityChange();\n    };\n    \n    // Add event listeners\n    document.addEventListener('visibilitychange', visibilityChangeHandler);\n    document.addEventListener('mousemove', activityHandler);\n    document.addEventListener('keydown', activityHandler);\n    document.addEventListener('click', activityHandler);\n    document.addEventListener('scroll', activityHandler);\n    document.addEventListener('touchstart', activityHandler);\n    window.addEventListener('beforeunload', unloadHandler);\n    window.addEventListener('unload', unloadHandler);\n    window.addEventListener('focus', focusHandler);\n    window.addEventListener('blur', blurHandler);\n    \n    // Store references for cleanup\n    this.eventListeners.set('visibilitychange', visibilityChangeHandler);\n    this.eventListeners.set('mousemove', activityHandler);\n    this.eventListeners.set('keydown', activityHandler);\n    this.eventListeners.set('click', activityHandler);\n    this.eventListeners.set('scroll', activityHandler);\n    this.eventListeners.set('touchstart', activityHandler);\n    this.eventListeners.set('beforeunload', unloadHandler);\n    this.eventListeners.set('unload', unloadHandler);\n    this.eventListeners.set('focus', focusHandler);\n    this.eventListeners.set('blur', blurHandler);\n    \n    console.log('üëÇ [MicrophoneLifecycleManager] Event listeners setup complete');\n  }\n\n  /**\n   * Handle page visibility changes\n   */\n  private handleVisibilityChange(): void {\n    if (!this.isActive) return;\n    \n    if (this.isPageVisible) {\n      console.log('üëÅÔ∏è [MicrophoneLifecycleManager] Page became visible - resuming monitoring');\n      this.updateActivity();\n      \n      // Check microphone health after page becomes visible\n      setTimeout(() => {\n        this.performHealthCheck();\n      }, 1000);\n      \n    } else {\n      console.log('üôà [MicrophoneLifecycleManager] Page became hidden - reducing monitoring frequency');\n      \n      // Consider releasing resources if page stays hidden for too long\n      setTimeout(() => {\n        if (!this.isPageVisible && this.isActive) {\n          const timeSinceActivity = Date.now() - this.lastActivityTime;\n          if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n            console.log('‚è∞ [MicrophoneLifecycleManager] Long inactivity detected - releasing resources');\n            this.forceRelease();\n          }\n        }\n      }, this.config.maxIdleTimeBeforeRelease);\n    }\n  }\n\n  /**\n   * Update user activity timestamp\n   */\n  private updateActivity(): void {\n    this.lastActivityTime = Date.now();\n    this.isUserActive = true;\n  }\n\n  /**\n   * Start health monitoring\n   */\n  private startHealthMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n    \n    this.healthCheckInterval = window.setInterval(() => {\n      this.performHealthCheck();\n    }, this.config.healthCheckIntervalMs);\n    \n    console.log(`üíì [MicrophoneLifecycleManager] Health monitoring started (${this.config.healthCheckIntervalMs}ms interval)`);\n  }\n\n  /**\n   * Start idle monitoring\n   */\n  private startIdleMonitoring(): void {\n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n    }\n    \n    this.idleCheckInterval = window.setInterval(() => {\n      this.checkIdleTimeout();\n    }, 30000); // Check every 30 seconds\n    \n    console.log('üò¥ [MicrophoneLifecycleManager] Idle monitoring started');\n  }\n\n  /**\n   * Start visibility monitoring\n   */\n  private startVisibilityMonitoring(): void {\n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n    }\n    \n    this.visibilityCheckInterval = window.setInterval(() => {\n      // Additional visibility-based health checks\n      if (this.isPageVisible && this.isActive) {\n        this.performHealthCheck();\n      }\n    }, 10000); // Check every 10 seconds when visible\n    \n    console.log('üëÅÔ∏è [MicrophoneLifecycleManager] Visibility monitoring started');\n  }\n\n  /**\n   * Perform comprehensive health check\n   */\n  private async performHealthCheck(): Promise<void> {\n    if (!this.isActive) return;\n    \n    try {\n      const healthStatus = this.audioManager.checkMediaStreamHealth();\n      this.lastHealthCheck = healthStatus;\n      \n      if (!healthStatus.healthy) {\n        console.warn('‚ö†Ô∏è [MicrophoneLifecycleManager] Unhealthy microphone state detected:', healthStatus);\n        \n        // Attempt automatic recovery\n        if (this.autoRecoveryAttempts < this.maxAutoRecoveryAttempts) {\n          this.autoRecoveryAttempts++;\n          \n          console.log(`üîß [MicrophoneLifecycleManager] Attempting automatic recovery (${this.autoRecoveryAttempts}/${this.maxAutoRecoveryAttempts})`);\n          \n          setTimeout(async () => {\n            try {\n              await this.audioManager.initialize(); // This will trigger re-initialization if needed\n              console.log('‚úÖ [MicrophoneLifecycleManager] Automatic recovery successful');\n              \n              // Dispatch success event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoverySuccess', {});\n              \n            } catch (error) {\n              console.error('‚ùå [MicrophoneLifecycleManager] Automatic recovery failed:', error);\n              this.callbacks.onError?.(error as Error);\n              \n              // Dispatch failure event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoveryFailed', { error });\n            }\n          }, this.config.autoRecoveryDelayMs);\n          \n        } else {\n          console.error('‚ùå [MicrophoneLifecycleManager] Maximum recovery attempts reached - manual intervention required');\n          this.callbacks.onError?.(new Error('Microphone health check failed - maximum recovery attempts exceeded'));\n        }\n      }\n      \n    } catch (error) {\n      console.error('‚ùå [MicrophoneLifecycleManager] Health check failed:', error);\n      this.callbacks.onError?.(error as Error);\n    }\n  }\n\n  /**\n   * Check for idle timeout\n   */\n  private checkIdleTimeout(): void {\n    if (!this.isActive) return;\n    \n    const timeSinceActivity = Date.now() - this.lastActivityTime;\n    const isIdle = timeSinceActivity > this.config.idleTimeoutMs;\n    \n    if (isIdle && this.isUserActive) {\n      console.log('üò¥ [MicrophoneLifecycleManager] User idle detected');\n      this.isUserActive = false;\n      \n      // Optionally reduce monitoring frequency during idle\n      // But don't automatically release - let the application decide\n    }\n    \n    // Check for extreme idle (auto-release)\n    if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n      console.log('‚è∞ [MicrophoneLifecycleManager] Extreme idle detected - auto-releasing resources');\n      this.forceRelease();\n    }\n  }\n\n  /**\n   * Stop all monitoring intervals\n   */\n  private stopAllMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n    }\n    \n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n      this.idleCheckInterval = null;\n    }\n    \n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n      this.visibilityCheckInterval = null;\n    }\n    \n    console.log('‚èπÔ∏è [MicrophoneLifecycleManager] All monitoring stopped');\n  }\n\n  /**\n   * Dispatch custom event\n   */\n  private dispatchCustomEvent(eventName: keyof LifecycleEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Get current status\n   */\n  getStatus() {\n    return {\n      refCount: this.refCount,\n      isActive: this.isActive,\n      isPageVisible: this.isPageVisible,\n      isUserActive: this.isUserActive,\n      lastActivityTime: this.lastActivityTime,\n      timeSinceActivity: Date.now() - this.lastActivityTime,\n      autoRecoveryAttempts: this.autoRecoveryAttempts,\n      lastHealthCheck: this.lastHealthCheck,\n      audioManagerStatus: this.audioManager.getStatus()\n    };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Restart monitoring with new intervals if active\n    if (this.isActive) {\n      this.stopAllMonitoring();\n      this.startHealthMonitoring();\n      this.startIdleMonitoring();\n      this.startVisibilityMonitoring();\n    }\n    \n    console.log('üîß [MicrophoneLifecycleManager] Configuration updated:', newConfig);\n  }\n\n  /**\n   * Cleanup and destroy\n   */\n  destroy(): void {\n    console.log('üóëÔ∏è [MicrophoneLifecycleManager] Destroying lifecycle manager');\n    \n    // Stop all monitoring\n    this.stopAllMonitoring();\n    \n    // Force release resources\n    this.forceRelease();\n    \n    // Remove event listeners\n    this.eventListeners.forEach((listener, eventName) => {\n      if (eventName.includes('window:')) {\n        window.removeEventListener(eventName.replace('window:', ''), listener);\n      } else {\n        document.removeEventListener(eventName, listener);\n      }\n    });\n    this.eventListeners.clear();\n    \n    console.log('‚úÖ [MicrophoneLifecycleManager] Cleanup complete');\n  }\n}","/**\n * ErrorNotificationSystem - Framework-agnostic Error Display and Notification\n * \n * Provides error messaging functionality that can be displayed on any page\n * Includes different notification types, auto-hide functionality, and priority management\n * Framework-agnostic implementation using vanilla DOM manipulation\n */\n\nimport type { NotificationConfig, NotificationElement } from '../types';\n\nexport class ErrorNotificationSystem {\n  private container: HTMLElement | null = null;\n  private notifications = new Map<string, NotificationElement>();\n  private notificationCounter = 0;\n  private defaultDuration = 5000; // 5 seconds\n  private maxNotifications = 5;\n  \n  // CSS classes for styling\n  private cssClasses = {\n    container: 'pitchpro-notifications',\n    notification: 'pitchpro-notification',\n    title: 'pitchpro-notification-title',\n    message: 'pitchpro-notification-message',\n    details: 'pitchpro-notification-details',\n    solution: 'pitchpro-notification-solution',\n    closeButton: 'pitchpro-notification-close',\n    error: 'pitchpro-notification-error',\n    warning: 'pitchpro-notification-warning',\n    success: 'pitchpro-notification-success',\n    info: 'pitchpro-notification-info',\n    high: 'pitchpro-notification-priority-high',\n    medium: 'pitchpro-notification-priority-medium',\n    low: 'pitchpro-notification-priority-low'\n  };\n\n  constructor() {\n    // SSR compatibility\n    if (typeof window === 'undefined') {\n      console.log('üîá [ErrorNotificationSystem] SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.initializeContainer();\n    this.injectCSS();\n  }\n\n  /**\n   * Create and inject the notification container into the DOM\n   */\n  private initializeContainer(): void {\n    // Check if container already exists\n    let existingContainer = document.querySelector(`.${this.cssClasses.container}`);\n    \n    if (!existingContainer) {\n      this.container = document.createElement('div');\n      this.container.className = this.cssClasses.container;\n      this.container.setAttribute('role', 'alert');\n      this.container.setAttribute('aria-live', 'polite');\n      \n      // Add to document body\n      document.body.appendChild(this.container);\n      \n      console.log('üìã [ErrorNotificationSystem] Notification container created');\n    } else {\n      this.container = existingContainer as HTMLElement;\n      console.log('üìã [ErrorNotificationSystem] Using existing notification container');\n    }\n  }\n\n  /**\n   * Inject default CSS styles\n   */\n  private injectCSS(): void {\n    // Check if styles already exist\n    if (document.querySelector('#pitchpro-notifications-styles')) {\n      return;\n    }\n\n    const css = `\n      .${this.cssClasses.container} {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 10000;\n        max-width: 400px;\n        pointer-events: none;\n      }\n\n      .${this.cssClasses.notification} {\n        background: white;\n        border: 1px solid #e2e8f0;\n        border-radius: 8px;\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n        margin-bottom: 12px;\n        padding: 16px;\n        pointer-events: auto;\n        position: relative;\n        animation: slideIn 0.3s ease-out;\n        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;\n      }\n\n      .${this.cssClasses.notification}.removing {\n        opacity: 0;\n        transform: translateX(100%);\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateX(100%);\n        }\n        to {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.error} {\n        border-left: 4px solid #ef4444;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.warning} {\n        border-left: 4px solid #f59e0b;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.success} {\n        border-left: 4px solid #10b981;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.info} {\n        border-left: 4px solid #3b82f6;\n      }\n\n      .${this.cssClasses.title} {\n        font-weight: 600;\n        font-size: 14px;\n        color: #1f2937;\n        margin-bottom: 4px;\n        padding-right: 24px;\n      }\n\n      .${this.cssClasses.message} {\n        font-size: 13px;\n        color: #4b5563;\n        margin-bottom: 8px;\n        line-height: 1.4;\n      }\n\n      .${this.cssClasses.details} {\n        font-size: 12px;\n        color: #6b7280;\n        margin-bottom: 8px;\n        padding-left: 12px;\n        border-left: 2px solid #e5e7eb;\n      }\n\n      .${this.cssClasses.details} li {\n        margin-bottom: 2px;\n      }\n\n      .${this.cssClasses.solution} {\n        font-size: 12px;\n        color: #059669;\n        background: #ecfdf5;\n        border: 1px solid #a7f3d0;\n        border-radius: 4px;\n        padding: 8px;\n        margin-top: 8px;\n      }\n\n      .${this.cssClasses.closeButton} {\n        position: absolute;\n        top: 12px;\n        right: 12px;\n        background: none;\n        border: none;\n        font-size: 18px;\n        color: #9ca3af;\n        cursor: pointer;\n        padding: 0;\n        width: 20px;\n        height: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .${this.cssClasses.closeButton}:hover {\n        color: #6b7280;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.high} {\n        border-width: 2px;\n        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      }\n\n      @media (max-width: 640px) {\n        .${this.cssClasses.container} {\n          top: 10px;\n          left: 10px;\n          right: 10px;\n          max-width: none;\n        }\n      }\n    `;\n\n    const style = document.createElement('style');\n    style.id = 'pitchpro-notifications-styles';\n    style.textContent = css;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Show a notification\n   */\n  show(config: NotificationConfig): string {\n    if (!this.container) {\n      console.warn('‚ö†Ô∏è [ErrorNotificationSystem] Container not available - cannot show notification');\n      return '';\n    }\n\n    // Generate unique ID\n    const id = `notification-${++this.notificationCounter}`;\n\n    // Create notification element\n    const notification = this.createNotificationElement(id, config);\n\n    // Remove oldest notification if we're at the limit\n    if (this.notifications.size >= this.maxNotifications) {\n      const oldestId = Array.from(this.notifications.keys())[0];\n      this.remove(oldestId);\n    }\n\n    // Add to container and tracking\n    this.container.appendChild(notification);\n    this.notifications.set(id, notification);\n\n    // Auto-hide if configured\n    if (config.autoHide !== false) {\n      const duration = config.duration || this.defaultDuration;\n      setTimeout(() => {\n        this.remove(id);\n      }, duration);\n    }\n\n    console.log(`üì¢ [ErrorNotificationSystem] Notification shown: ${config.type} - ${config.title}`);\n    \n    return id;\n  }\n\n  /**\n   * Create notification DOM element\n   */\n  private createNotificationElement(id: string, config: NotificationConfig): NotificationElement {\n    const notification = document.createElement('div') as unknown as NotificationElement;\n    notification.className = [\n      this.cssClasses.notification,\n      this.cssClasses[config.type],\n      config.priority ? this.cssClasses[config.priority] : ''\n    ].filter(Boolean).join(' ');\n    notification['data-notification-id'] = id;\n\n    // Title\n    const title = document.createElement('div');\n    title.className = this.cssClasses.title;\n    title.textContent = config.title;\n    notification.appendChild(title);\n\n    // Message\n    const message = document.createElement('div');\n    message.className = this.cssClasses.message;\n    message.textContent = config.message;\n    notification.appendChild(message);\n\n    // Details (if provided)\n    if (config.details && config.details.length > 0) {\n      const details = document.createElement('div');\n      details.className = this.cssClasses.details;\n      \n      const list = document.createElement('ul');\n      list.style.margin = '0';\n      list.style.paddingLeft = '16px';\n      \n      config.details.forEach(detail => {\n        const item = document.createElement('li');\n        item.textContent = detail;\n        list.appendChild(item);\n      });\n      \n      details.appendChild(list);\n      notification.appendChild(details);\n    }\n\n    // Solution (if provided)\n    if (config.solution) {\n      const solution = document.createElement('div');\n      solution.className = this.cssClasses.solution;\n      solution.textContent = config.solution;\n      notification.appendChild(solution);\n    }\n\n    // Close button\n    const closeButton = document.createElement('button');\n    closeButton.className = this.cssClasses.closeButton;\n    closeButton.innerHTML = '√ó';\n    closeButton.setAttribute('aria-label', 'Close notification');\n    closeButton.addEventListener('click', () => {\n      this.remove(id);\n    });\n    notification.appendChild(closeButton);\n\n    return notification;\n  }\n\n  /**\n   * Remove a specific notification\n   */\n  remove(id: string): void {\n    const notification = this.notifications.get(id);\n    if (!notification) {\n      return;\n    }\n\n    // Add removing class for exit animation\n    notification.classList.add('removing');\n\n    // Remove from DOM after animation\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification);\n      }\n      this.notifications.delete(id);\n    }, 300);\n\n    console.log(`üóëÔ∏è [ErrorNotificationSystem] Notification removed: ${id}`);\n  }\n\n  /**\n   * Clear all notifications\n   */\n  clearAll(): void {\n    const ids = Array.from(this.notifications.keys());\n    ids.forEach(id => this.remove(id));\n    \n    console.log('üßπ [ErrorNotificationSystem] All notifications cleared');\n  }\n\n  /**\n   * Show error notification (convenience method)\n   */\n  showError(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'error',\n      title,\n      message,\n      priority: 'high',\n      autoHide: false, // Errors should be manually dismissed\n      ...options\n    });\n  }\n\n  /**\n   * Show warning notification (convenience method)\n   */\n  showWarning(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'warning',\n      title,\n      message,\n      priority: 'medium',\n      duration: 8000, // Longer duration for warnings\n      ...options\n    });\n  }\n\n  /**\n   * Show success notification (convenience method)\n   */\n  showSuccess(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'success',\n      title,\n      message,\n      priority: 'low',\n      duration: 3000, // Shorter duration for success messages\n      ...options\n    });\n  }\n\n  /**\n   * Show info notification (convenience method)\n   */\n  showInfo(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'info',\n      title,\n      message,\n      priority: 'low',\n      ...options\n    });\n  }\n\n  /**\n   * Show microphone error with common solutions\n   */\n  showMicrophoneError(error: Error, context?: string): string {\n    // Common solutions for microphone errors\n    // const commonSolutions = [\n    //   '„Éñ„É©„Ç¶„Ç∂„Å´„Éû„Ç§„ÇØ„Ç¢„ÇØ„Çª„Çπ„ÇíË®±ÂèØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',\n    //   '„Éû„Ç§„ÇØ„Åå‰ªñ„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Åß‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',\n    //   '„Éñ„É©„Ç¶„Ç∂„ÇíÂÜçËµ∑Âãï„Åó„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ',\n    //   '„Éá„Éê„Ç§„Çπ„ÅÆË®≠ÂÆö„Åß„Éû„Ç§„ÇØ„ÅåÊúâÂäπ„Å´„Å™„Å£„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ'\n    // ];\n\n    return this.showError(\n      '„Éû„Ç§„ÇØ„É≠„Éï„Ç©„É≥„Ç®„É©„Éº',\n      `„Éû„Ç§„ÇØ„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`,\n      {\n        details: context ? [`Áô∫ÁîüÁÆáÊâÄ: ${context}`, `„Ç®„É©„ÉºË©≥Á¥∞: ${error.name}`] : [`„Ç®„É©„ÉºË©≥Á¥∞: ${error.name}`],\n        solution: '„Éû„Ç§„ÇØ„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„ÄÅ„Éñ„É©„Ç¶„Ç∂„Å´„Éû„Ç§„ÇØ„Ç¢„ÇØ„Çª„Çπ„ÇíË®±ÂèØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show audio context error\n   */\n  showAudioContextError(error: Error): string {\n    return this.showError(\n      '„Ç™„Éº„Éá„Ç£„Ç™„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº',\n      `Èü≥Â£∞Âá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`,\n      {\n        details: [\n          '„Éñ„É©„Ç¶„Ç∂„ÅåWeb Audio API„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô',\n          '„Åæ„Åü„ÅØ„ÄÅÈü≥Â£∞„Éá„Éê„Ç§„Çπ„Å´ÂïèÈ°å„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„Åô'\n        ],\n        solution: '„Éñ„É©„Ç¶„Ç∂„ÇíÊúÄÊñ∞Áâà„Å´Êõ¥Êñ∞„Åô„Çã„Åã„ÄÅÂà•„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅßË©¶„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show network/loading error\n   */\n  showLoadingError(resource: string, error: Error): string {\n    return this.showError(\n      'Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº',\n      `${resource}„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`,\n      {\n        details: [\n          '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',\n          '„Éñ„É©„Ç¶„Ç∂„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Ç¢„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ'\n        ],\n        solution: '„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åô„Çã„Åã„ÄÅ„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',\n        priority: 'medium'\n      }\n    );\n  }\n\n  /**\n   * Get current notification count\n   */\n  getNotificationCount(): number {\n    return this.notifications.size;\n  }\n\n  /**\n   * Get all notification IDs\n   */\n  getNotificationIds(): string[] {\n    return Array.from(this.notifications.keys());\n  }\n\n  /**\n   * Check if a specific notification exists\n   */\n  hasNotification(id: string): boolean {\n    return this.notifications.has(id);\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: {\n    defaultDuration?: number;\n    maxNotifications?: number;\n  }): void {\n    if (config.defaultDuration !== undefined) {\n      this.defaultDuration = config.defaultDuration;\n    }\n    if (config.maxNotifications !== undefined) {\n      this.maxNotifications = config.maxNotifications;\n    }\n    \n    console.log('üîß [ErrorNotificationSystem] Configuration updated:', config);\n  }\n\n  /**\n   * Destroy the notification system\n   */\n  destroy(): void {\n    console.log('üóëÔ∏è [ErrorNotificationSystem] Destroying notification system');\n    \n    this.clearAll();\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    // Remove injected CSS\n    const styleElement = document.querySelector('#pitchpro-notifications-styles');\n    if (styleElement && styleElement.parentNode) {\n      styleElement.parentNode.removeChild(styleElement);\n    }\n    \n    this.container = null;\n    this.notifications.clear();\n    \n    console.log('‚úÖ [ErrorNotificationSystem] Cleanup complete');\n  }\n}","/**\n * MicrophoneController - High-level Microphone Management Interface\n * \n * Combines AudioManager, LifecycleManager, and ErrorNotificationSystem\n * Provides a simple, unified API for microphone control with error handling\n * Includes device detection, sensitivity management, and automatic recovery\n */\n\nimport type { \n  DeviceSpecs,\n  MediaStreamResources,\n  MicrophoneControllerEvents,\n  ErrorCallback,\n  StateChangeCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\nimport { MicrophoneLifecycleManager } from './MicrophoneLifecycleManager';\nimport { ErrorNotificationSystem } from './ErrorNotificationSystem';\n\nexport class MicrophoneController {\n  private audioManager: AudioManager;\n  private lifecycleManager: MicrophoneLifecycleManager;\n  private errorSystem: ErrorNotificationSystem;\n  \n  // State management\n  private currentState: 'uninitialized' | 'initializing' | 'ready' | 'active' | 'error' = 'uninitialized';\n  private isPermissionGranted = false;\n  private lastError: Error | null = null;\n  \n  // Event handling\n  private eventCallbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  } = {};\n  \n  // Device specifications\n  private deviceSpecs: DeviceSpecs | null = null;\n\n  constructor(\n    audioManagerConfig = {},\n    lifecycleConfig = {},\n    showErrorNotifications = true\n  ) {\n    this.audioManager = new AudioManager(audioManagerConfig);\n    this.lifecycleManager = new MicrophoneLifecycleManager(this.audioManager, lifecycleConfig);\n    this.errorSystem = showErrorNotifications ? new ErrorNotificationSystem() : null as any;\n    \n    this.setupEventHandlers();\n    this.detectDevice();\n  }\n\n  /**\n   * Set callback functions for events\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  }): void {\n    this.eventCallbacks = { ...this.eventCallbacks, ...callbacks };\n  }\n\n  /**\n   * Setup internal event handlers\n   */\n  private setupEventHandlers(): void {\n    // Lifecycle manager callbacks\n    this.lifecycleManager.setCallbacks({\n      onStateChange: (state) => {\n        this.updateState(state === 'active' ? 'active' : 'ready');\n      },\n      onError: (error) => {\n        this.handleError(error, 'lifecycle');\n      }\n    });\n  }\n\n  /**\n   * Detect device specifications\n   */\n  private detectDevice(): void {\n    this.deviceSpecs = this.audioManager.getPlatformSpecs();\n    console.log('üì± [MicrophoneController] Device detected:', this.deviceSpecs);\n    \n    // Notify callback\n    this.eventCallbacks.onDeviceChange?.(this.deviceSpecs);\n    \n    // Dispatch custom event\n    this.dispatchCustomEvent('pitchpro:deviceDetected', { specs: this.deviceSpecs });\n  }\n\n  /**\n   * Initialize microphone access and permissions\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    try {\n      this.updateState('initializing');\n      console.log('üé§ [MicrophoneController] Starting initialization');\n\n      // Acquire resources through lifecycle manager\n      const resources = await this.lifecycleManager.acquire();\n      \n      // Update state and permissions\n      this.isPermissionGranted = true;\n      this.updateState('ready');\n      this.lastError = null;\n\n      // Notify permission change\n      this.eventCallbacks.onPermissionChange?.(true);\n      this.dispatchCustomEvent('pitchpro:microphoneGranted', { stream: resources.mediaStream });\n\n      console.log('‚úÖ [MicrophoneController] Initialization complete');\n      return resources;\n\n    } catch (error) {\n      console.error('‚ùå [MicrophoneController] Initialization failed:', error);\n      \n      this.isPermissionGranted = false;\n      this.handleError(error as Error, 'initialization');\n      \n      // Notify permission denial\n      this.eventCallbacks.onPermissionChange?.(false);\n      this.dispatchCustomEvent('pitchpro:microphoneDenied', { error: error as Error });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Request microphone permission (alias for initialize)\n   */\n  async requestPermission(): Promise<boolean> {\n    try {\n      await this.initialize();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Check if microphone permission is granted\n   */\n  async checkPermissionStatus(): Promise<'granted' | 'denied' | 'prompt'> {\n    if (typeof navigator === 'undefined' || !navigator.mediaDevices) {\n      return 'denied';\n    }\n\n    try {\n      const result = await navigator.permissions.query({ name: 'microphone' as PermissionName });\n      return result.state as 'granted' | 'denied' | 'prompt';\n    } catch {\n      // Fallback: try to access microphone with minimal constraints\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: { \n            echoCancellation: false,\n            noiseSuppression: false,\n            autoGainControl: false\n          } \n        });\n        stream.getTracks().forEach(track => track.stop());\n        return 'granted';\n      } catch {\n        return 'denied';\n      }\n    }\n  }\n\n  /**\n   * Stop microphone and release resources\n   */\n  stop(): void {\n    console.log('üõë [MicrophoneController] Stopping microphone');\n    \n    this.lifecycleManager.release();\n    this.updateState('ready');\n    \n    // Dispatch stop event\n    this.dispatchCustomEvent('pitchpro:microphoneStopped', {});\n    \n    console.log('‚úÖ [MicrophoneController] Microphone stopped');\n  }\n\n  /**\n   * Force stop with complete cleanup\n   */\n  forceStop(): void {\n    console.log('üö® [MicrophoneController] Force stopping microphone');\n    \n    this.lifecycleManager.forceRelease();\n    this.updateState('uninitialized');\n    this.isPermissionGranted = false;\n    \n    console.log('‚úÖ [MicrophoneController] Force stop complete');\n  }\n\n  /**\n   * Set microphone sensitivity\n   */\n  setSensitivity(sensitivity: number): void {\n    const oldSensitivity = this.audioManager.getSensitivity();\n    this.audioManager.setSensitivity(sensitivity);\n    const newSensitivity = this.audioManager.getSensitivity();\n    \n    if (oldSensitivity !== newSensitivity) {\n      console.log(`üîß [MicrophoneController] Sensitivity changed: ${oldSensitivity}x ‚Üí ${newSensitivity}x`);\n      \n      // Notify callbacks\n      this.eventCallbacks.onSensitivityChange?.(newSensitivity);\n      this.dispatchCustomEvent('pitchpro:sensitivityChanged', { sensitivity: newSensitivity });\n    }\n  }\n\n  /**\n   * Get current microphone sensitivity\n   */\n  getSensitivity(): number {\n    return this.audioManager.getSensitivity();\n  }\n\n  /**\n   * Get device specifications\n   */\n  getDeviceSpecs(): DeviceSpecs | null {\n    return this.deviceSpecs;\n  }\n\n  /**\n   * Get current state\n   */\n  getState(): string {\n    return this.currentState;\n  }\n\n  /**\n   * Check if microphone is active\n   */\n  isActive(): boolean {\n    return this.currentState === 'active';\n  }\n\n  /**\n   * Check if microphone is ready (initialized but not active)\n   */\n  isReady(): boolean {\n    return this.currentState === 'ready';\n  }\n\n  /**\n   * Check if permission is granted\n   */\n  hasPermission(): boolean {\n    return this.isPermissionGranted;\n  }\n\n  /**\n   * Get comprehensive status\n   */\n  getStatus() {\n    return {\n      state: this.currentState,\n      isPermissionGranted: this.isPermissionGranted,\n      isActive: this.isActive(),\n      isReady: this.isReady(),\n      sensitivity: this.getSensitivity(),\n      deviceSpecs: this.deviceSpecs,\n      lastError: this.lastError,\n      audioManagerStatus: this.audioManager.getStatus(),\n      lifecycleStatus: this.lifecycleManager.getStatus()\n    };\n  }\n\n  /**\n   * Perform health check\n   */\n  checkHealth() {\n    return this.audioManager.checkMediaStreamHealth();\n  }\n\n  /**\n   * Test microphone functionality\n   */\n  async testMicrophone(durationMs = 2000): Promise<{\n    success: boolean;\n    volume: number;\n    frequency: number | null;\n    duration: number;\n    error?: Error;\n  }> {\n    const startTime = Date.now();\n    \n    try {\n      // Ensure we have resources\n      if (!this.isReady() && !this.isActive()) {\n        await this.initialize();\n      }\n      \n      // Create temporary analyser for testing\n      const analyser = this.audioManager.createAnalyser('microphone-test', {\n        fftSize: 1024,\n        smoothingTimeConstant: 0.8\n      });\n      \n      // Collect audio data for specified duration\n      let maxVolume = 0;\n      let detectedFrequency: number | null = null as number | null;\n      const endTime = startTime + durationMs;\n      \n      await new Promise<void>((resolve) => {\n        const checkAudio = () => {\n          if (Date.now() >= endTime) {\n            resolve();\n            return;\n          }\n          \n          // Analyze current audio\n          const bufferLength = analyser.fftSize;\n          const dataArray = new Float32Array(bufferLength);\n          analyser.getFloatTimeDomainData(dataArray);\n          \n          // Calculate RMS volume\n          let sum = 0;\n          for (let i = 0; i < bufferLength; i++) {\n            sum += Math.abs(dataArray[i]);\n          }\n          const rms = Math.sqrt(sum / bufferLength);\n          const volume = rms * 100;\n          \n          if (volume > maxVolume) {\n            maxVolume = volume;\n          }\n          \n          // Simple peak detection for frequency\n          if (volume > 5) { // Only check frequency if there's significant volume\n            let maxIndex = 0;\n            let maxValue = 0;\n            for (let i = 1; i < bufferLength / 2; i++) {\n              const value = Math.abs(dataArray[i]);\n              if (value > maxValue) {\n                maxValue = value;\n                maxIndex = i;\n              }\n            }\n            if (maxIndex > 0) {\n              detectedFrequency = (maxIndex * 44100) / bufferLength;\n            }\n          }\n          \n          requestAnimationFrame(checkAudio);\n        };\n        \n        checkAudio();\n      });\n      \n      // Cleanup test analyser\n      this.audioManager.removeAnalyser('microphone-test');\n      \n      const duration = Date.now() - startTime;\n      const success = maxVolume > 1; // Consider success if we detected some audio\n      \n      const frequencyDisplay = detectedFrequency ? detectedFrequency.toFixed(0) : 'none';\n      console.log(`üß™ [MicrophoneController] Microphone test complete: volume=${maxVolume.toFixed(2)}, frequency=${frequencyDisplay}, duration=${duration}ms`);\n      \n      return {\n        success,\n        volume: maxVolume,\n        frequency: detectedFrequency,\n        duration\n      };\n      \n    } catch (error) {\n      const duration = Date.now() - startTime;\n      console.error('‚ùå [MicrophoneController] Microphone test failed:', error);\n      \n      return {\n        success: false,\n        volume: 0,\n        frequency: null,\n        duration,\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * Update internal state and notify\n   */\n  private updateState(newState: typeof this.currentState): void {\n    if (this.currentState !== newState) {\n      const oldState = this.currentState;\n      this.currentState = newState;\n      \n      console.log(`üîÑ [MicrophoneController] State changed: ${oldState} ‚Üí ${newState}`);\n      \n      // Notify callback\n      this.eventCallbacks.onStateChange?.(newState);\n    }\n  }\n\n  /**\n   * Handle errors with notification system\n   */\n  private handleError(error: Error, context: string): void {\n    console.error(`‚ùå [MicrophoneController] Error in ${context}:`, error);\n    \n    this.lastError = error;\n    this.updateState('error');\n    \n    // Show error notification if system is available\n    if (this.errorSystem) {\n      if (context === 'initialization' || context === 'lifecycle') {\n        this.errorSystem.showMicrophoneError(error, context);\n      } else {\n        this.errorSystem.showError(\n          '„Éû„Ç§„ÇØ„Ç®„É©„Éº',\n          `${context}„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`,\n          { priority: 'medium' }\n        );\n      }\n    }\n    \n    // Notify error callback\n    this.eventCallbacks.onError?.(error);\n  }\n\n  /**\n   * Dispatch custom DOM event\n   */\n  private dispatchCustomEvent(eventName: keyof MicrophoneControllerEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Add event listener for microphone events\n   */\n  addEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.addEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Remove event listener for microphone events\n   */\n  removeEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.removeEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Cleanup and destroy all resources\n   */\n  destroy(): void {\n    console.log('üóëÔ∏è [MicrophoneController] Destroying controller');\n    \n    // Force stop to ensure cleanup\n    this.forceStop();\n    \n    // Destroy managed components\n    this.lifecycleManager.destroy();\n    this.errorSystem?.destroy();\n    \n    // Clear callbacks\n    this.eventCallbacks = {};\n    \n    // Reset state\n    this.currentState = 'uninitialized';\n    this.isPermissionGranted = false;\n    this.lastError = null;\n    this.deviceSpecs = null;\n    \n    console.log('‚úÖ [MicrophoneController] Cleanup complete');\n  }\n}"],"names":["AudioManager","config","healthCheck","_a","_b","_c","t","resolve","result","error","deviceSpecs","audioConstraints","tracks","id","options","fftSize","smoothingTimeConstant","minDecibels","maxDecibels","useFilters","analyser","finalNode","filterChain","highpass","lowpass","notch","sensitivity","clampedSensitivity","isIPhone","isIPad","isIPadOS","isIOS","analyserIds","track","index","audioTrack","_d","trackStates","_e","_g","_h","_i","_f","PitchDetector","audioManager","callbacks","filteredAnalyserId","rawAnalyserId","PitchyDetector","bufferLength","buffer","rawBuffer","sum","i","rms","platformSpecs","adjustedRms","volumePercent","rawSum","rawRms","rawVolumePercent","v","audioContext","sampleRate","pitch","clarity","isValidVocalRange","finalFreq","normalizedVolume","displayVolume","frequency","volume","now","confidenceThreshold","historyWindow","volumeConfidence","stabilityConfidence","confidence","recentHistory","avgFrequency","h","avgConfidence","halfFrequency","doubleFrequency","noteNames","semitonesFromA4","noteIndex","octave","nearestSemitone","centsDeviation","enabled","NoiseFilter","inputNode","outputNode","params","currentTime","savedOutputNode","frequencyArray","magnitudeArray","phaseArray","highpassMagnitude","lowpassMagnitude","notchMagnitude","preset","MicrophoneLifecycleManager","resources","visibilityChangeHandler","activityHandler","unloadHandler","focusHandler","blurHandler","healthStatus","timeSinceActivity","eventName","detail","event","newConfig","listener","ErrorNotificationSystem","existingContainer","css","style","notification","oldestId","duration","title","message","details","list","item","solution","closeButton","context","resource","styleElement","MicrophoneController","audioManagerConfig","lifecycleConfig","showErrorNotifications","state","oldSensitivity","newSensitivity","durationMs","startTime","maxVolume","detectedFrequency","endTime","checkAudio","dataArray","maxIndex","maxValue","value","success","frequencyDisplay","newState","oldState","type"],"mappings":"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"}