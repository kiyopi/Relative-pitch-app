{"version":3,"file":"utils.js","sources":["../src/utils/FrequencyUtils.ts","../src/utils/MusicTheory.ts"],"sourcesContent":["/**\n * FrequencyUtils - Frequency conversion and analysis utilities\n * \n * Provides utilities for converting between frequencies, notes, cents, and MIDI values\n * Includes musical interval calculations and frequency analysis functions\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\n\nexport class FrequencyUtils {\n  // Standard reference frequency (A4 = 440 Hz)\n  static readonly A4_FREQUENCY = 440;\n  static readonly A4_MIDI_NUMBER = 69;\n  \n  // Note names and chromatic scale\n  static readonly NOTE_NAMES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  static readonly FLAT_NOTE_NAMES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\n  \n  // Common musical intervals (in semitones)\n  static readonly INTERVALS = {\n    unison: 0,\n    minorSecond: 1,\n    majorSecond: 2,\n    minorThird: 3,\n    majorThird: 4,\n    perfectFourth: 5,\n    tritone: 6,\n    perfectFifth: 7,\n    minorSixth: 8,\n    majorSixth: 9,\n    minorSeventh: 10,\n    majorSeventh: 11,\n    octave: 12\n  };\n\n  /**\n   * Convert frequency to MIDI note number\n   */\n  static frequencyToMidi(frequency: number): number {\n    if (frequency <= 0) return 0;\n    return Math.round(12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER);\n  }\n\n  /**\n   * Convert MIDI note number to frequency\n   */\n  static midiToFrequency(midiNumber: number): number {\n    return FrequencyUtils.A4_FREQUENCY * Math.pow(2, (midiNumber - FrequencyUtils.A4_MIDI_NUMBER) / 12);\n  }\n\n  /**\n   * Convert frequency to note name with octave\n   */\n  static frequencyToNote(frequency: number, useFlats = false): MusicalNote {\n    if (frequency <= 0) {\n      return {\n        name: '--',\n        octave: 0,\n        midi: 0,\n        frequency: 0\n      };\n    }\n\n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    const noteNames = useFlats ? FrequencyUtils.FLAT_NOTE_NAMES : FrequencyUtils.NOTE_NAMES;\n    \n    const noteIndex = (midiNumber - 12) % 12; // C0 = MIDI 12\n    const octave = Math.floor((midiNumber - 12) / 12);\n    const noteName = noteNames[noteIndex];\n    \n    return {\n      name: noteName + octave,\n      octave,\n      midi: midiNumber,\n      frequency: FrequencyUtils.midiToFrequency(midiNumber)\n    };\n  }\n\n  /**\n   * Convert frequency to cents deviation from nearest semitone\n   */\n  static frequencyToCents(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = 12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER;\n    const nearestMidi = Math.round(midiNumber);\n    const centsDeviation = (midiNumber - nearestMidi) * 100;\n    \n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Convert cents to frequency ratio\n   */\n  static centsToRatio(cents: number): number {\n    return Math.pow(2, cents / 1200);\n  }\n\n  /**\n   * Convert frequency ratio to cents\n   */\n  static ratioToCents(ratio: number): number {\n    if (ratio <= 0) return 0;\n    return Math.round(1200 * Math.log2(ratio));\n  }\n\n  /**\n   * Get the closest note frequency to a given frequency\n   */\n  static getClosestNoteFrequency(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Calculate the interval between two frequencies in semitones\n   */\n  static getInterval(frequency1: number, frequency2: number): number {\n    if (frequency1 <= 0 || frequency2 <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(frequency1);\n    const midi2 = FrequencyUtils.frequencyToMidi(frequency2);\n    \n    return Math.abs(midi2 - midi1);\n  }\n\n  /**\n   * Calculate the interval between two frequencies with direction\n   */\n  static getSignedInterval(fromFrequency: number, toFrequency: number): number {\n    if (fromFrequency <= 0 || toFrequency <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(fromFrequency);\n    const midi2 = FrequencyUtils.frequencyToMidi(toFrequency);\n    \n    return midi2 - midi1;\n  }\n\n  /**\n   * Get musical interval information\n   */\n  static getIntervalInfo(semitones: number): MusicalInterval {\n    const intervalNames = {\n      0: 'Perfect Unison',\n      1: 'Minor Second',\n      2: 'Major Second',\n      3: 'Minor Third',\n      4: 'Major Third',\n      5: 'Perfect Fourth',\n      6: 'Tritone',\n      7: 'Perfect Fifth',\n      8: 'Minor Sixth',\n      9: 'Major Sixth',\n      10: 'Minor Seventh',\n      11: 'Major Seventh',\n      12: 'Perfect Octave'\n    };\n\n    const normalizedSemitones = ((semitones % 12) + 12) % 12;\n    const octaves = Math.floor(semitones / 12);\n    \n    const baseName = intervalNames[normalizedSemitones as keyof typeof intervalNames] || 'Unknown';\n    const name = octaves > 0 ? `${baseName} + ${octaves} octave(s)` : baseName;\n    \n    return {\n      name,\n      semitones,\n      cents: semitones * 100,\n      ratio: Math.pow(2, semitones / 12)\n    };\n  }\n\n  /**\n   * Check if frequency is within human vocal range\n   */\n  static isInVocalRange(frequency: number): boolean {\n    // Human vocal range roughly 80Hz to 1100Hz\n    return frequency >= 80 && frequency <= 1100;\n  }\n\n  /**\n   * Check if frequency is in piano range\n   */\n  static isInPianoRange(frequency: number): boolean {\n    // Piano range A0 (27.5Hz) to C8 (4186Hz)\n    return frequency >= 27.5 && frequency <= 4186;\n  }\n\n  /**\n   * Get frequency range for a specific instrument\n   */\n  static getInstrumentRange(instrument: string): { min: number; max: number } | null {\n    const ranges = {\n      piano: { min: 27.5, max: 4186 },\n      guitar: { min: 82.4, max: 1397 }, // E2 to F6\n      violin: { min: 196, max: 3520 },  // G3 to A7\n      cello: { min: 65.4, max: 1397 },  // C2 to F6\n      voice_bass: { min: 87.3, max: 349 }, // F2 to F4\n      voice_tenor: { min: 131, max: 523 }, // C3 to C5\n      voice_alto: { min: 175, max: 698 },  // F3 to F5\n      voice_soprano: { min: 262, max: 1047 } // C4 to C6\n    };\n\n    return ranges[instrument as keyof typeof ranges] || null;\n  }\n\n  /**\n   * Generate a chromatic scale starting from a base frequency\n   */\n  static generateChromaticScale(baseFrequency: number, octaves = 1): number[] {\n    const frequencies: number[] = [];\n    \n    for (let i = 0; i < 12 * octaves; i++) {\n      const frequency = baseFrequency * Math.pow(2, i / 12);\n      frequencies.push(frequency);\n    }\n    \n    return frequencies;\n  }\n\n  /**\n   * Generate a major scale starting from a base frequency\n   */\n  static generateMajorScale(baseFrequency: number): number[] {\n    // Major scale pattern: W-W-H-W-W-W-H (W=whole step=2 semitones, H=half step=1 semitone)\n    const pattern = [0, 2, 4, 5, 7, 9, 11, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Generate a minor scale starting from a base frequency\n   */\n  static generateMinorScale(baseFrequency: number): number[] {\n    // Natural minor scale pattern: W-H-W-W-H-W-W\n    const pattern = [0, 2, 3, 5, 7, 8, 10, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Find harmonics of a fundamental frequency\n   */\n  static findHarmonics(fundamental: number, maxHarmonic = 8): number[] {\n    const harmonics: number[] = [];\n    \n    for (let i = 1; i <= maxHarmonic; i++) {\n      harmonics.push(fundamental * i);\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Check if a frequency could be a harmonic of a fundamental\n   */\n  static isHarmonic(frequency: number, fundamental: number, tolerance = 0.05): {\n    isHarmonic: boolean;\n    harmonicNumber: number | null;\n    exactFrequency: number | null;\n  } {\n    if (fundamental <= 0 || frequency <= 0) {\n      return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n    }\n\n    const ratio = frequency / fundamental;\n    const nearestInteger = Math.round(ratio);\n    \n    // Check if the ratio is close to an integer (within tolerance)\n    if (nearestInteger >= 1 && Math.abs(ratio - nearestInteger) <= tolerance) {\n      return {\n        isHarmonic: true,\n        harmonicNumber: nearestInteger,\n        exactFrequency: fundamental * nearestInteger\n      };\n    }\n\n    return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n  }\n\n  /**\n   * Calculate the fundamental frequency from a suspected harmonic\n   */\n  static calculateFundamental(harmonicFrequency: number, harmonicNumber: number): number {\n    if (harmonicNumber <= 0 || harmonicFrequency <= 0) return 0;\n    return harmonicFrequency / harmonicNumber;\n  }\n\n  /**\n   * Convert frequency to scientific pitch notation\n   */\n  static frequencyToScientificPitch(frequency: number): string {\n    const note = FrequencyUtils.frequencyToNote(frequency);\n    return note.name;\n  }\n\n  /**\n   * Convert scientific pitch notation to frequency\n   */\n  static scientificPitchToFrequency(scientificPitch: string): number {\n    const match = scientificPitch.match(/^([A-G][#b]?)(-?\\d+)$/);\n    if (!match) return 0;\n\n    const [, noteName, octaveStr] = match;\n    const octave = parseInt(octaveStr, 10);\n    \n    // Convert note name to semitone offset from C\n    let semitoneOffset = 0;\n    const baseNote = noteName[0];\n    const accidental = noteName.slice(1);\n    \n    const baseOffsets: { [key: string]: number } = {\n      'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11\n    };\n    \n    semitoneOffset = baseOffsets[baseNote] || 0;\n    \n    if (accidental === '#') {\n      semitoneOffset += 1;\n    } else if (accidental === 'b') {\n      semitoneOffset -= 1;\n    }\n    \n    // Calculate MIDI number (C4 = MIDI 60)\n    const midiNumber = (octave + 1) * 12 + semitoneOffset;\n    \n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Format frequency display with appropriate precision\n   */\n  static formatFrequency(frequency: number, decimalPlaces = 1): string {\n    if (frequency === 0) return '0 Hz';\n    if (frequency < 0.1) return '<0.1 Hz';\n    if (frequency >= 10000) return `${Math.round(frequency / 1000)}k Hz`;\n    \n    return `${frequency.toFixed(decimalPlaces)} Hz`;\n  }\n\n  /**\n   * Format cents display with sign\n   */\n  static formatCents(cents: number): string {\n    if (cents === 0) return '0¢';\n    const sign = cents > 0 ? '+' : '';\n    return `${sign}${cents}¢`;\n  }\n}","/**\n * MusicTheory - Musical theory utilities and calculations\n * \n * Provides utilities for scales, chords, intervals, and musical analysis\n * Supports various temperaments and tuning systems\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\nimport { FrequencyUtils } from './FrequencyUtils';\n\nexport class MusicTheory {\n  // Scale patterns (in semitones from root)\n  static readonly SCALE_PATTERNS = {\n    major: [0, 2, 4, 5, 7, 9, 11],\n    naturalMinor: [0, 2, 3, 5, 7, 8, 10],\n    harmonicMinor: [0, 2, 3, 5, 7, 8, 11],\n    melodicMinor: [0, 2, 3, 5, 7, 9, 11],\n    dorian: [0, 2, 3, 5, 7, 9, 10],\n    phrygian: [0, 1, 3, 5, 7, 8, 10],\n    lydian: [0, 2, 4, 6, 7, 9, 11],\n    mixolydian: [0, 2, 4, 5, 7, 9, 10],\n    locrian: [0, 1, 3, 5, 6, 8, 10],\n    pentatonicMajor: [0, 2, 4, 7, 9],\n    pentatonicMinor: [0, 3, 5, 7, 10],\n    blues: [0, 3, 5, 6, 7, 10],\n    chromatic: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  };\n\n  // Chord patterns (in semitones from root)\n  static readonly CHORD_PATTERNS = {\n    major: [0, 4, 7],\n    minor: [0, 3, 7],\n    diminished: [0, 3, 6],\n    augmented: [0, 4, 8],\n    sus2: [0, 2, 7],\n    sus4: [0, 5, 7],\n    major7: [0, 4, 7, 11],\n    minor7: [0, 3, 7, 10],\n    dominant7: [0, 4, 7, 10],\n    majorMaj7: [0, 4, 7, 11],\n    halfDiminished7: [0, 3, 6, 10],\n    diminished7: [0, 3, 6, 9],\n    add9: [0, 4, 7, 14], // 14 = 2 + 12 (octave)\n    major9: [0, 4, 7, 11, 14],\n    minor9: [0, 3, 7, 10, 14]\n  };\n\n  // Circle of fifths\n  static readonly CIRCLE_OF_FIFTHS = [\n    'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'Ab', 'Eb', 'Bb', 'F'\n  ];\n\n  // Interval names\n  static readonly INTERVAL_NAMES = {\n    0: 'Perfect Unison',\n    1: 'Minor Second',\n    2: 'Major Second',\n    3: 'Minor Third',\n    4: 'Major Third',\n    5: 'Perfect Fourth',\n    6: 'Tritone',\n    7: 'Perfect Fifth',\n    8: 'Minor Sixth',\n    9: 'Major Sixth',\n    10: 'Minor Seventh',\n    11: 'Major Seventh',\n    12: 'Perfect Octave'\n  };\n\n  /**\n   * Generate scale from root note\n   */\n  static generateScale(\n    rootFrequency: number, \n    scaleType: keyof typeof MusicTheory.SCALE_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.SCALE_PATTERNS[scaleType];\n    if (!pattern) {\n      throw new Error(`Unknown scale type: ${scaleType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Generate chord from root note\n   */\n  static generateChord(\n    rootFrequency: number,\n    chordType: keyof typeof MusicTheory.CHORD_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.CHORD_PATTERNS[chordType];\n    if (!pattern) {\n      throw new Error(`Unknown chord type: ${chordType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Identify scale from a set of frequencies\n   */\n  static identifyScale(frequencies: number[]): Array<{\n    scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n  }> {\n    if (frequencies.length < 3) {\n      return [];\n    }\n\n    // Convert frequencies to note numbers relative to the lowest note\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const baseFreq = sortedFreqs[0];\n    const intervals = sortedFreqs.map(freq => \n      Math.round(12 * Math.log2(freq / baseFreq))\n    );\n\n    const results: Array<{\n      scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n    }> = [];\n\n    // Test each scale pattern\n    Object.entries(MusicTheory.SCALE_PATTERNS).forEach(([scaleName, pattern]) => {\n      // Test each possible root\n      for (let rootOffset = 0; rootOffset < 12; rootOffset++) {\n        const adjustedPattern = pattern.map(interval => (interval + rootOffset) % 12).sort((a, b) => a - b);\n        const normalizedIntervals = intervals.map(interval => interval % 12).sort((a, b) => a - b);\n        \n        // Calculate confidence based on pattern matching\n        let matches = 0;\n        normalizedIntervals.forEach(interval => {\n          if (adjustedPattern.includes(interval)) {\n            matches++;\n          }\n        });\n\n        const confidence = matches / Math.max(normalizedIntervals.length, adjustedPattern.length);\n        \n        if (confidence > 0.5) { // Only include reasonable matches\n          const rootFreq = baseFreq * Math.pow(2, -rootOffset / 12);\n          results.push({\n            scale: scaleName as keyof typeof MusicTheory.SCALE_PATTERNS,\n            confidence,\n            root: FrequencyUtils.frequencyToNote(rootFreq)\n          });\n        }\n      }\n    });\n\n    // Sort by confidence and return top matches\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 5);\n  }\n\n  /**\n   * Identify chord from frequencies\n   */\n  static identifyChord(frequencies: number[]): Array<{\n    chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n    inversion?: number;\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const results: Array<{\n      chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n      inversion?: number;\n    }> = [];\n\n    // Test each chord pattern\n    Object.entries(MusicTheory.CHORD_PATTERNS).forEach(([chordName, pattern]) => {\n      // Test different inversions\n      for (let inversion = 0; inversion < pattern.length; inversion++) {\n        // Create inverted pattern\n        const invertedPattern = [\n          ...pattern.slice(inversion),\n          ...pattern.slice(0, inversion).map(interval => interval + 12)\n        ];\n\n        // Test each possible bass note as root\n        sortedFreqs.forEach((bassFreq, _bassIndex) => {\n          const intervals = sortedFreqs.map(freq => \n            Math.round(12 * Math.log2(freq / bassFreq))\n          );\n\n          // Calculate confidence\n          let matches = 0;\n          const patternSet = new Set(invertedPattern);\n          intervals.forEach(interval => {\n            const normalizedInterval = interval % 12;\n            if (patternSet.has(normalizedInterval) || patternSet.has(normalizedInterval + 12)) {\n              matches++;\n            }\n          });\n\n          const confidence = matches / Math.max(intervals.length, pattern.length);\n          \n          if (confidence > 0.6) {\n            const rootFreq = inversion === 0 ? bassFreq : \n              bassFreq * Math.pow(2, -pattern[inversion] / 12);\n            \n            results.push({\n              chord: chordName as keyof typeof MusicTheory.CHORD_PATTERNS,\n              confidence,\n              root: FrequencyUtils.frequencyToNote(rootFreq),\n              inversion: inversion > 0 ? inversion : undefined\n            });\n          }\n        });\n      }\n    });\n\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 3);\n  }\n\n  /**\n   * Get the key signature for a given key\n   */\n  static getKeySignature(key: string, mode: 'major' | 'minor' = 'major'): {\n    sharps: string[];\n    flats: string[];\n    accidentalCount: number;\n  } {\n    // Order of sharps: F# C# G# D# A# E# B#\n    const sharpOrder = ['F', 'C', 'G', 'D', 'A', 'E', 'B'];\n    // Order of flats: Bb Eb Ab Db Gb Cb Fb\n    const flatOrder = ['B', 'E', 'A', 'D', 'G', 'C', 'F'];\n    \n    // Major key signatures\n    const majorKeys = {\n      'C': { sharps: 0, flats: 0 },\n      'G': { sharps: 1, flats: 0 },\n      'D': { sharps: 2, flats: 0 },\n      'A': { sharps: 3, flats: 0 },\n      'E': { sharps: 4, flats: 0 },\n      'B': { sharps: 5, flats: 0 },\n      'F#': { sharps: 6, flats: 0 },\n      'C#': { sharps: 7, flats: 0 },\n      'F': { sharps: 0, flats: 1 },\n      'Bb': { sharps: 0, flats: 2 },\n      'Eb': { sharps: 0, flats: 3 },\n      'Ab': { sharps: 0, flats: 4 },\n      'Db': { sharps: 0, flats: 5 },\n      'Gb': { sharps: 0, flats: 6 },\n      'Cb': { sharps: 0, flats: 7 }\n    };\n\n    // Adjust for minor keys (relative minor is 3 semitones below major)\n    let keySignature = majorKeys[key as keyof typeof majorKeys];\n    \n    if (!keySignature && mode === 'minor') {\n      // Find relative major\n      const minorToMajor = {\n        'A': 'C', 'E': 'G', 'B': 'D', 'F#': 'A', 'C#': 'E', 'G#': 'B', 'D#': 'F#', 'A#': 'C#',\n        'D': 'F', 'G': 'Bb', 'C': 'Eb', 'F': 'Ab', 'Bb': 'Db', 'Eb': 'Gb', 'Ab': 'Cb'\n      };\n      \n      const relativeMajor = minorToMajor[key as keyof typeof minorToMajor];\n      if (relativeMajor) {\n        keySignature = majorKeys[relativeMajor as keyof typeof majorKeys];\n      }\n    }\n\n    if (!keySignature) {\n      return { sharps: [], flats: [], accidentalCount: 0 };\n    }\n\n    const sharps = sharpOrder.slice(0, keySignature.sharps).map(note => note + '#');\n    const flats = flatOrder.slice(0, keySignature.flats).map(note => note + 'b');\n    \n    return {\n      sharps,\n      flats,\n      accidentalCount: keySignature.sharps || keySignature.flats\n    };\n  }\n\n  /**\n   * Calculate the harmonic series for a fundamental frequency\n   */\n  static getHarmonicSeries(fundamental: number, harmonicCount: number = 16): MusicalNote[] {\n    const harmonics: MusicalNote[] = [];\n    \n    for (let i = 1; i <= harmonicCount; i++) {\n      const frequency = fundamental * i;\n      harmonics.push(FrequencyUtils.frequencyToNote(frequency));\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Calculate just intonation ratios for common intervals\n   */\n  static getJustIntonationRatios(): { [key: string]: { ratio: number; cents: number } } {\n    return {\n      'unison': { ratio: 1/1, cents: 0 },\n      'minorSecond': { ratio: 16/15, cents: 112 },\n      'majorSecond': { ratio: 9/8, cents: 204 },\n      'minorThird': { ratio: 6/5, cents: 316 },\n      'majorThird': { ratio: 5/4, cents: 386 },\n      'perfectFourth': { ratio: 4/3, cents: 498 },\n      'tritone': { ratio: 45/32, cents: 590 },\n      'perfectFifth': { ratio: 3/2, cents: 702 },\n      'minorSixth': { ratio: 8/5, cents: 814 },\n      'majorSixth': { ratio: 5/3, cents: 884 },\n      'minorSeventh': { ratio: 16/9, cents: 996 },\n      'majorSeventh': { ratio: 15/8, cents: 1088 },\n      'octave': { ratio: 2/1, cents: 1200 }\n    };\n  }\n\n  /**\n   * Convert equal temperament interval to just intonation\n   */\n  static equalTemperamentToJustIntonation(semitones: number): {\n    ratio: number;\n    cents: number;\n    closestJustInterval?: string;\n    centsDeviation?: number;\n  } {\n    const equalTempCents = semitones * 100;\n    const justRatios = MusicTheory.getJustIntonationRatios();\n    \n    // Find closest just intonation interval\n    let closestInterval: string | undefined;\n    let smallestDeviation = Infinity;\n    \n    Object.entries(justRatios).forEach(([intervalName, { cents }]) => {\n      const deviation = Math.abs(equalTempCents - cents);\n      if (deviation < smallestDeviation) {\n        smallestDeviation = deviation;\n        closestInterval = intervalName;\n      }\n    });\n    \n    const ratio = Math.pow(2, semitones / 12);\n    \n    return {\n      ratio,\n      cents: equalTempCents,\n      closestJustInterval: closestInterval,\n      centsDeviation: closestInterval ? smallestDeviation : undefined\n    };\n  }\n\n  /**\n   * Analyze melodic intervals in a sequence of notes\n   */\n  static analyzeMelody(frequencies: number[]): Array<{\n    fromNote: MusicalNote;\n    toNote: MusicalNote;\n    interval: MusicalInterval;\n    direction: 'up' | 'down' | 'same';\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const analysis: Array<{\n      fromNote: MusicalNote;\n      toNote: MusicalNote;\n      interval: MusicalInterval;\n      direction: 'up' | 'down' | 'same';\n    }> = [];\n\n    for (let i = 1; i < frequencies.length; i++) {\n      const fromFreq = frequencies[i - 1];\n      const toFreq = frequencies[i];\n      \n      const fromNote = FrequencyUtils.frequencyToNote(fromFreq);\n      const toNote = FrequencyUtils.frequencyToNote(toFreq);\n      \n      const semitones = FrequencyUtils.getSignedInterval(fromFreq, toFreq);\n      const interval = FrequencyUtils.getIntervalInfo(Math.abs(semitones));\n      \n      const direction = semitones > 0 ? 'up' : semitones < 0 ? 'down' : 'same';\n      \n      analysis.push({\n        fromNote,\n        toNote,\n        interval,\n        direction\n      });\n    }\n\n    return analysis;\n  }\n\n  /**\n   * Generate chord progressions in a given key\n   */\n  static generateChordProgression(\n    key: string, \n    mode: 'major' | 'minor' = 'major',\n    progression: number[] = [1, 4, 5, 1] // Roman numerals as scale degrees\n  ): MusicalNote[][] {\n    const rootFreq = FrequencyUtils.scientificPitchToFrequency(key + '4');\n    if (rootFreq === 0) {\n      throw new Error(`Invalid key: ${key}`);\n    }\n\n    const scale = MusicTheory.generateScale(rootFreq, mode === 'minor' ? 'naturalMinor' : 'major');\n    const chords: MusicalNote[][] = [];\n\n    progression.forEach(degree => {\n      const chordRoot = scale[(degree - 1) % scale.length];\n      const chordType = mode === 'major' \n        ? MusicTheory.getMajorScaleChordType(degree)\n        : MusicTheory.getMinorScaleChordType(degree);\n      \n      const chord = MusicTheory.generateChord(chordRoot.frequency, chordType);\n      chords.push(chord);\n    });\n\n    return chords;\n  }\n\n  /**\n   * Get chord type for scale degree in major scale\n   */\n  private static getMajorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['major', 'minor', 'minor', 'major', 'major', 'minor', 'diminished'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n\n  /**\n   * Get chord type for scale degree in minor scale\n   */\n  private static getMinorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['minor', 'diminished', 'major', 'minor', 'minor', 'major', 'major'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n}"],"names":["_FrequencyUtils","frequency","midiNumber","useFlats","noteNames","noteIndex","octave","nearestMidi","centsDeviation","cents","ratio","frequency1","frequency2","midi1","midi2","fromFrequency","toFrequency","semitones","intervalNames","normalizedSemitones","octaves","baseName","instrument","baseFrequency","frequencies","i","fundamental","maxHarmonic","harmonics","tolerance","nearestInteger","harmonicFrequency","harmonicNumber","scientificPitch","match","noteName","octaveStr","semitoneOffset","baseNote","accidental","decimalPlaces","FrequencyUtils","_MusicTheory","rootFrequency","scaleType","pattern","chordType","sortedFreqs","b","baseFreq","intervals","freq","results","scaleName","rootOffset","adjustedPattern","interval","a","normalizedIntervals","matches","confidence","rootFreq","chordName","inversion","invertedPattern","bassFreq","_bassIndex","patternSet","normalizedInterval","key","mode","sharpOrder","flatOrder","majorKeys","keySignature","relativeMajor","sharps","note","flats","harmonicCount","equalTempCents","justRatios","closestInterval","smallestDeviation","intervalName","deviation","analysis","fromFreq","toFreq","fromNote","toNote","direction","progression","scale","chords","degree","chordRoot","chord","MusicTheory"],"mappings":"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"}