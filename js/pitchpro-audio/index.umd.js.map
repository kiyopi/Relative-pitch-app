{"version":3,"file":"index.umd.js","sources":["../src/utils/Logger.ts","../src/core/AudioManager.ts","../node_modules/fft.js/lib/fft.js","../node_modules/pitchy/index.js","../src/core/PitchDetector.ts","../src/core/NoiseFilter.ts","../src/core/MicrophoneLifecycleManager.ts","../src/core/ErrorNotificationSystem.ts","../src/core/MicrophoneController.ts","../src/advanced/HarmonicCorrection.ts","../src/types/index.ts","../src/advanced/VoiceAnalyzer.ts","../src/utils/DeviceDetection.ts","../src/advanced/CalibrationSystem.ts","../src/utils/FrequencyUtils.ts","../src/utils/MusicTheory.ts","../src/index.ts"],"sourcesContent":["/**\n * Logger - Global logging control for pitchpro-audio\n * \n * Central logging control to prevent console spam in production\n */\n\nexport class Logger {\n  private static DEBUG_ENABLED = false;\n  private static CONSOLE_ENABLED = false;\n\n  static log(...args: any[]): void {\n    if (Logger.CONSOLE_ENABLED) {\n      console.log(...args);\n    }\n  }\n\n  static warn(...args: any[]): void {\n    console.warn(...args); // Always show warnings\n  }\n\n  static error(...args: any[]): void {\n    console.error(...args); // Always show errors\n  }\n\n  static debug(...args: any[]): void {\n    if (Logger.DEBUG_ENABLED) {\n      console.log('[DEBUG]', ...args);\n    }\n  }\n\n  static setDebugEnabled(enabled: boolean): void {\n    Logger.DEBUG_ENABLED = enabled;\n  }\n\n  static setConsoleEnabled(enabled: boolean): void {\n    Logger.CONSOLE_ENABLED = enabled;\n  }\n\n  static getStatus(): { debug: boolean; console: boolean } {\n    return {\n      debug: Logger.DEBUG_ENABLED,\n      console: Logger.CONSOLE_ENABLED\n    };\n  }\n}","import { Logger } from '../utils/Logger';\n/**\n * AudioManager - Framework-agnostic Global Audio Resource Management System\n * \n * Purpose: Solve multiple AudioContext issues\n * - Share single AudioContext across entire application\n * - Reuse single MediaStream across all components\n * - Safe resource management and cleanup\n */\n\nimport type { \n  AudioManagerConfig, \n  MediaStreamResources, \n  HealthStatus, \n  TrackState,\n  DeviceSpecs\n} from '../types';\n\nexport class AudioManager {\n  // Global shared resources\n  private audioContext: AudioContext | null = null;\n  private mediaStream: MediaStream | null = null;\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\n  private gainNode: GainNode | null = null; // For microphone sensitivity adjustment\n  \n  // Analyser management\n  private analysers = new Map<string, AnalyserNode>();\n  private filters = new Map<string, { highpass: BiquadFilterNode; lowpass: BiquadFilterNode; notch: BiquadFilterNode }>();\n  \n  // Reference counting (for safe cleanup)\n  private refCount = 0;\n  private initPromise: Promise<MediaStreamResources> | null = null; // Prevent duplicate initialization\n  \n  // State management\n  private isInitialized = false;\n  private lastError: Error | null = null;\n  \n  // Sensitivity settings (iPad compatibility)\n  private currentSensitivity: number; // Device-dependent default sensitivity\n  \n  // Configuration\n  private config: AudioManagerConfig;\n\n  constructor(config: AudioManagerConfig = {}) {\n    this.config = {\n      sampleRate: 44100,\n      channelCount: 1,\n      echoCancellation: false,\n      noiseSuppression: false,\n      autoGainControl: false,\n      latency: 0.1,\n      ...config\n    };\n    \n    this.currentSensitivity = this._getDefaultSensitivity();\n  }\n\n  /**\n   * Get device-dependent default sensitivity\n   */\n  private _getDefaultSensitivity(): number {\n    const deviceSpecs = this.getPlatformSpecs();\n    \n    switch (deviceSpecs.deviceType) {\n      case 'iPad':\n        Logger.log('🔧 [AudioManager] iPad detected - setting default sensitivity 7.0x');\n        return 7.0;\n      case 'iPhone':\n        Logger.log('🔧 [AudioManager] iPhone detected - setting default sensitivity 3.0x');\n        return 3.0;\n      default:\n        Logger.log('🔧 [AudioManager] PC detected - setting default sensitivity 1.0x');\n        return 1.0;\n    }\n  }\n\n  /**\n   * Initialize audio resources\n   * Safe to call multiple times (singleton-like behavior)\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    // If already initializing, wait for completion\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    // If already initialized - perform MediaStream health check\n    if (this.isInitialized && this.audioContext && this.mediaStream) {\n      const healthCheck = this.checkMediaStreamHealth();\n      \n      if (healthCheck.healthy) {\n        this.refCount++;\n        return {\n          audioContext: this.audioContext,\n          mediaStream: this.mediaStream,\n          sourceNode: this.sourceNode!\n        };\n      } else {\n        // Force re-initialization if MediaStream is unhealthy\n        console.warn('⚠️ [AudioManager] Unhealthy MediaStream detected - force re-initialization:', healthCheck);\n        Logger.log('🔄 [AudioManager] Unhealthy MediaStream details:', {\n          mediaStreamActive: this.mediaStream?.active,\n          trackCount: this.mediaStream?.getTracks().length,\n          trackStates: this.mediaStream?.getTracks().map(t => ({\n            kind: t.kind,\n            readyState: t.readyState,\n            enabled: t.enabled,\n            muted: t.muted\n          }))\n        });\n        \n        // Perform safe cleanup\n        this._cleanup();\n        this.isInitialized = false;\n        this.refCount = 0;\n        \n        // Short wait to ensure resource release\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        Logger.log('🔄 [AudioManager] Cleanup complete - starting re-initialization');\n        // Continue to next block for re-initialization\n      }\n    }\n\n    // Execute initialization\n    this.initPromise = this._doInitialize();\n    \n    try {\n      const result = await this.initPromise;\n      this.initPromise = null;\n      return result;\n    } catch (error) {\n      this.initPromise = null;\n      throw error;\n    }\n  }\n\n  /**\n   * Actual initialization process\n   */\n  private async _doInitialize(): Promise<MediaStreamResources> {\n    try {\n      Logger.log('🎤 [AudioManager] Starting initialization');\n\n      // Create AudioContext (single instance)\n      if (!this.audioContext) {\n        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n        Logger.log('✅ [AudioManager] AudioContext creation complete');\n      }\n\n      // Resume AudioContext if suspended\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n        Logger.log('✅ [AudioManager] AudioContext resume complete');\n      }\n\n      // Get MediaStream (single instance)\n      if (!this.mediaStream) {\n        const deviceSpecs = this.getPlatformSpecs();\n        \n        Logger.log(`🔍 [AudioManager] Device detection: ${deviceSpecs.deviceType}`, navigator.userAgent);\n        Logger.log(`🔍 [AudioManager] Touch support: ${'ontouchend' in document}`);\n        \n        // Safari WebKit compatibility: Maximum compatibility audio settings\n        const audioConstraints: MediaStreamConstraints = {\n          audio: {\n            // Basic settings: Safari WebKit stability focused\n            echoCancellation: this.config.echoCancellation,\n            noiseSuppression: this.config.noiseSuppression,\n            autoGainControl: this.config.autoGainControl,\n            \n            // iOS specific: Ultra high sensitivity settings\n            ...(deviceSpecs.isIOS && {\n              googAutoGainControl: false,     // Google AGC complete disable\n              googNoiseSuppression: false,    // Google noise suppression disable\n              googEchoCancellation: false,    // Google echo cancellation disable\n              googHighpassFilter: false,      // Google highpass filter disable\n              googTypingNoiseDetection: false, // Typing noise detection disable\n              googBeamforming: false,         // Beamforming disable\n              mozAutoGainControl: false,      // Mozilla AGC disable\n              mozNoiseSuppression: false,     // Mozilla noise suppression disable\n            } as any),\n            \n            // Safari compatibility: Explicit quality settings\n            sampleRate: this.config.sampleRate,\n            channelCount: this.config.channelCount,\n            sampleSize: 16,\n            \n            // Safari WebKit additional stabilization settings\n            latency: this.config.latency,  // 100ms latency tolerance\n            volume: 1.0,   // Volume normalization\n            \n            // Flexible device selection (Safari compatibility)\n            deviceId: { ideal: 'default' }\n          }\n        };\n        \n        Logger.log('🎤 [AudioManager] Getting MediaStream with Safari-compatible settings:', audioConstraints);\n        this.mediaStream = await navigator.mediaDevices.getUserMedia(audioConstraints);\n        Logger.log('✅ [AudioManager] MediaStream acquisition complete');\n      }\n\n      // Create SourceNode (single instance)\n      if (!this.sourceNode) {\n        this.sourceNode = this.audioContext.createMediaStreamSource(this.mediaStream);\n        Logger.log('✅ [AudioManager] SourceNode creation complete');\n        \n        // MediaStream state check\n        const tracks = this.mediaStream.getTracks();\n        Logger.log('🎤 [AudioManager] MediaStream tracks:', tracks.map(t => ({\n          kind: t.kind,\n          label: t.label,\n          enabled: t.enabled,\n          readyState: t.readyState,\n          muted: t.muted\n        })));\n      }\n\n      // Create GainNode (for microphone sensitivity adjustment)\n      if (!this.gainNode) {\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.gain.value = this.currentSensitivity;\n        \n        // Connect SourceNode -> GainNode\n        this.sourceNode.connect(this.gainNode);\n        Logger.log(`✅ [AudioManager] GainNode creation complete (sensitivity: ${this.currentSensitivity}x)`);\n      }\n\n      this.isInitialized = true;\n      this.refCount++;\n      this.lastError = null;\n\n      Logger.log(`🎤 [AudioManager] Initialization complete (refCount: ${this.refCount})`);\n\n      return {\n        audioContext: this.audioContext,\n        mediaStream: this.mediaStream,\n        sourceNode: this.sourceNode\n      };\n\n    } catch (error) {\n      console.error('❌ [AudioManager] Initialization error:', error);\n      this.lastError = error as Error;\n      this.isInitialized = false;\n      \n      // Cleanup on error\n      this._cleanup();\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Create dedicated AnalyserNode\n   * @param id - Analyser identifier\n   * @param options - Option settings\n   */\n  createAnalyser(id: string, options: {\n    fftSize?: number;\n    smoothingTimeConstant?: number;\n    minDecibels?: number;\n    maxDecibels?: number;\n    useFilters?: boolean;\n  } = {}): AnalyserNode {\n    if (!this.isInitialized || !this.audioContext || !this.sourceNode) {\n      throw new Error('AudioManager not initialized. Call initialize() first.');\n    }\n\n    // Remove existing analyser if present\n    this.removeAnalyser(id);\n\n    const {\n      fftSize = 2048,\n      smoothingTimeConstant = 0.8,\n      minDecibels = -90,\n      maxDecibels = -10,\n      useFilters = true\n    } = options;\n\n    // Create Analyser (Safari WebKit optimized)\n    const analyser = this.audioContext.createAnalyser();\n    \n    // Safari load reduction settings\n    analyser.fftSize = Math.min(fftSize, 2048); // Safari upper limit restriction\n    analyser.smoothingTimeConstant = Math.max(smoothingTimeConstant, 0.7); // Safari stabilization\n    analyser.minDecibels = Math.max(minDecibels, -80); // Safari range optimization\n    analyser.maxDecibels = Math.min(maxDecibels, -10);\n\n    let finalNode: AudioNode = this.gainNode || this.sourceNode;\n\n    // Create filter chain (optional)\n    if (useFilters) {\n      const filterChain = this._createFilterChain();\n      this.filters.set(id, filterChain);\n      \n      // Connect filter chain (starting from GainNode)\n      finalNode.connect(filterChain.highpass);\n      filterChain.highpass.connect(filterChain.lowpass);\n      filterChain.lowpass.connect(filterChain.notch);\n      filterChain.notch.connect(analyser);\n      \n      Logger.log(`🔧 [AudioManager] Filtered Analyser created: ${id}`);\n    } else {\n      // Direct connection (signal from GainNode)\n      finalNode.connect(analyser);\n      Logger.log(`🔧 [AudioManager] Raw signal Analyser created: ${id}`);\n    }\n    \n    // Important: Analyser only passes audio through, don't connect to destination\n    // (prevents microphone feedback)\n\n    this.analysers.set(id, analyser);\n    return analyser;\n  }\n\n  /**\n   * Create 3-stage noise reduction filter chain\n   */\n  private _createFilterChain() {\n    if (!this.audioContext) {\n      throw new Error('AudioContext not available');\n    }\n\n    // 1. Highpass filter (remove low frequency noise: cut below 80Hz)\n    const highpass = this.audioContext.createBiquadFilter();\n    highpass.type = 'highpass';\n    highpass.frequency.setValueAtTime(80, this.audioContext.currentTime);\n    highpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n    const lowpass = this.audioContext.createBiquadFilter();\n    lowpass.type = 'lowpass';\n    lowpass.frequency.setValueAtTime(800, this.audioContext.currentTime);\n    lowpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 3. Notch filter (remove power noise: 60Hz)\n    const notch = this.audioContext.createBiquadFilter();\n    notch.type = 'notch';\n    notch.frequency.setValueAtTime(60, this.audioContext.currentTime);\n    notch.Q.setValueAtTime(10, this.audioContext.currentTime);\n\n    return { highpass, lowpass, notch };\n  }\n\n  /**\n   * Remove specific analyser\n   */\n  removeAnalyser(id: string): void {\n    if (this.analysers.has(id)) {\n      const analyser = this.analysers.get(id)!;\n      analyser.disconnect();\n      this.analysers.delete(id);\n      Logger.log(`🗑️ [AudioManager] Analyser removed: ${id}`);\n    }\n\n    if (this.filters.has(id)) {\n      const filterChain = this.filters.get(id)!;\n      filterChain.highpass.disconnect();\n      filterChain.lowpass.disconnect();\n      filterChain.notch.disconnect();\n      this.filters.delete(id);\n      Logger.log(`🗑️ [AudioManager] Filter chain removed: ${id}`);\n    }\n  }\n\n  /**\n   * Adjust microphone sensitivity\n   * @param sensitivity - Sensitivity multiplier (0.1 ~ 10.0)\n   */\n  setSensitivity(sensitivity: number): void {\n    // Range limit (extended to 10.0x for iPad real device support)\n    const clampedSensitivity = Math.max(0.1, Math.min(10.0, sensitivity));\n    \n    if (this.gainNode) {\n      this.gainNode.gain.value = clampedSensitivity;\n      this.currentSensitivity = clampedSensitivity;\n      Logger.log(`🎤 [AudioManager] Microphone sensitivity updated: ${clampedSensitivity.toFixed(1)}x`);\n    } else {\n      // If GainNode not initialized, save setting only\n      this.currentSensitivity = clampedSensitivity;\n      Logger.log(`🎤 [AudioManager] Microphone sensitivity set (awaiting initialization): ${clampedSensitivity.toFixed(1)}x`);\n    }\n  }\n\n  /**\n   * Get current microphone sensitivity\n   */\n  getSensitivity(): number {\n    return this.currentSensitivity;\n  }\n\n  /**\n   * Get platform-specific settings according to specification\n   * Complies with MICROPHONE_PLATFORM_SPECIFICATIONS.md\n   */\n  getPlatformSpecs(): DeviceSpecs {\n    // Device detection (unified version)\n    const isIPhone = /iPhone/.test(navigator.userAgent);\n    const isIPad = /iPad/.test(navigator.userAgent);\n    const isIPadOS = /Macintosh/.test(navigator.userAgent) && 'ontouchend' in document;\n    const isIOS = isIPhone || isIPad || isIPadOS;\n    \n    // Specification-compliant parameters\n    const deviceType = (isIPad || isIPadOS) ? 'iPad' : isIPhone ? 'iPhone' : 'PC';\n    \n    return {\n      deviceType,\n      isIOS,\n      \n      // Volume calculation divisor (important: this value determines sensitivity)\n      divisor: isIOS ? 4.0 : 6.0,           // iPhone/iPad: 4.0, PC: 6.0\n      \n      // Volume correction (iPhone/iPad low frequency cut response)  \n      gainCompensation: isIOS ? 1.5 : 1.0,  // iPhone/iPad: 1.5, PC: 1.0\n      \n      // Noise threshold (basis for 0% display during silence)\n      noiseThreshold: isIOS ? 12 : 15,      // iPhone/iPad: 12, PC: 15\n      \n      // Smoothing (minimal)\n      smoothingFactor: 0.2,                 // Common to both platforms\n      \n      // Additional device-specific settings\n      sensitivity: this.currentSensitivity,\n      noiseGate: isIOS ? 0.01 : 0.02\n    };\n  }\n\n  /**\n   * Decrement reference count and cleanup\n   */\n  release(analyserIds: string[] = []): void {\n    // Remove specified analysers\n    analyserIds.forEach(id => this.removeAnalyser(id));\n\n    this.refCount = Math.max(0, this.refCount - 1);\n    Logger.log(`📉 [AudioManager] Reference count decremented: ${this.refCount}`);\n\n    // Full cleanup only when no one is using it\n    if (this.refCount <= 0) {\n      Logger.log('🧹 [AudioManager] Starting full resource cleanup');\n      this._cleanup();\n    }\n  }\n\n  /**\n   * Force cleanup (for emergency use)\n   */\n  forceCleanup(): void {\n    Logger.log('🚨 [AudioManager] Force cleanup executed');\n    this._cleanup();\n  }\n\n  /**\n   * Internal cleanup process\n   */\n  private _cleanup(): void {\n    Logger.log('🧹 [AudioManager] Starting cleanup');\n    \n    // Remove all analysers\n    for (const id of this.analysers.keys()) {\n      this.removeAnalyser(id);\n    }\n\n    // Stop MediaStream (health check compatible)\n    if (this.mediaStream) {\n      const tracks = this.mediaStream.getTracks();\n      Logger.log(`🛑 [AudioManager] Stopping MediaStream: ${tracks.length} tracks`);\n      \n      tracks.forEach((track, index) => {\n        try {\n          if (track.readyState !== 'ended') {\n            track.stop();\n            Logger.log(`🛑 [AudioManager] Track ${index} stop complete`);\n          } else {\n            Logger.log(`⚠️ [AudioManager] Track ${index} already ended`);\n          }\n        } catch (error) {\n          console.warn(`⚠️ [AudioManager] Track ${index} stop error:`, error);\n        }\n      });\n      \n      this.mediaStream = null;\n    }\n\n    // Close AudioContext\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      try {\n        this.audioContext.close();\n        Logger.log('🛑 [AudioManager] AudioContext close complete');\n      } catch (error) {\n        console.warn('⚠️ [AudioManager] AudioContext close error:', error);\n      }\n      this.audioContext = null;\n    }\n\n    // Remove GainNode\n    if (this.gainNode) {\n      this.gainNode.disconnect();\n      this.gainNode = null;\n    }\n\n    // Remove SourceNode\n    if (this.sourceNode) {\n      this.sourceNode.disconnect();\n      this.sourceNode = null;\n    }\n\n    // Reset state\n    this.isInitialized = false;\n    this.refCount = 0;\n    this.initPromise = null;\n    this.currentSensitivity = this._getDefaultSensitivity(); // Reset to device-dependent default sensitivity\n\n    Logger.log('✅ [AudioManager] Cleanup complete');\n  }\n\n  /**\n   * Get current status (for debugging)\n   */\n  getStatus() {\n    return {\n      isInitialized: this.isInitialized,\n      refCount: this.refCount,\n      audioContextState: this.audioContext?.state || 'none',\n      mediaStreamActive: this.mediaStream?.active || false,\n      activeAnalysers: Array.from(this.analysers.keys()),\n      activeFilters: Array.from(this.filters.keys()),\n      lastError: this.lastError,\n      currentSensitivity: this.currentSensitivity\n    };\n  }\n\n  /**\n   * MediaStream health status check\n   */\n  checkMediaStreamHealth(): HealthStatus {\n    if (!this.mediaStream) {\n      return { \n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    // MediaStream state check (Safari compatibility enhanced)\n    if (!this.mediaStream.active) {\n      return {\n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const tracks = this.mediaStream.getTracks();\n    if (tracks.length === 0) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const audioTrack = tracks.find(track => track.kind === 'audio');\n    if (!audioTrack) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: tracks.map(track => ({\n          kind: track.kind,\n          enabled: track.enabled,\n          readyState: track.readyState,\n          muted: track.muted\n        })),\n        healthy: false\n      };\n    }\n\n    const trackStates: TrackState[] = tracks.map(track => ({\n      kind: track.kind,\n      enabled: track.enabled,\n      readyState: track.readyState,\n      muted: track.muted\n    }));\n\n    // AudioTrack detailed state check (Safari WebKit compatibility)\n    if (audioTrack.readyState === 'ended') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    if (!audioTrack.enabled) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // Safari-specific muted state check\n    if (audioTrack.muted) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // Additional check: MediaStream and Track consistency verification\n    if (this.mediaStream.active && audioTrack.readyState !== 'live') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    return {\n      mediaStreamActive: this.mediaStream.active,\n      audioContextState: this.audioContext?.state || 'none',\n      trackStates,\n      healthy: true,\n      refCount: this.refCount\n    };\n  }\n}","'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n","import FFT from \"fft.js\";\n\n/**\n * @typedef {Float32Array | Float64Array | number[]} Buffer One of the supported\n * buffer types. Other numeric array types may not work correctly.\n */\n\n/**\n * A class that can perform autocorrelation on input arrays of a given size.\n *\n * The class holds internal buffers so that no additional allocations are\n * necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use. While inputs to the\n * autocorrelation process can be any array-like type, the output buffer\n * (whether provided explicitly or using a fresh buffer) is always of this type.\n */\nexport class Autocorrelator {\n  /** @private @readonly @type {number} */\n  _inputLength;\n  /** @private @type {FFT} */\n  _fft;\n  /** @private @type {(size: number) => T} */\n  _bufferSupplier;\n  /** @private @type {T} */\n  _paddedInputBuffer;\n  /** @private @type {T} */\n  _transformBuffer;\n  /** @private @type {T} */\n  _inverseBuffer;\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float32Array(length),\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float64Array(length),\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using `number[]`\n   * buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new Autocorrelator(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link Autocorrelator} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `Autocorrelator` will only support operation on arrays of this length.\n   * @param bufferSupplier {(length: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    if (inputLength < 1) {\n      throw new Error(`Input length must be at least one`);\n    }\n    this._inputLength = inputLength;\n    // We need to double the input length to get correct results, and the FFT\n    // algorithm we use requires a length that's a power of 2\n    this._fft = new FFT(ceilPow2(2 * inputLength));\n    this._bufferSupplier = bufferSupplier;\n    this._paddedInputBuffer = this._bufferSupplier(this._fft.size);\n    this._transformBuffer = this._bufferSupplier(2 * this._fft.size);\n    this._inverseBuffer = this._bufferSupplier(2 * this._fft.size);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._inputLength;\n  }\n\n  /**\n   * Autocorrelates the given input data.\n   *\n   * @param input {ArrayLike<number>} the input data to autocorrelate\n   * @param output {T} the output buffer into which to write the autocorrelated\n   * data. If not provided, a new buffer will be created.\n   * @returns {T} `output`\n   */\n  autocorrelate(input, output = this._bufferSupplier(input.length)) {\n    if (input.length !== this._inputLength) {\n      throw new Error(\n        `Input must have length ${this._inputLength} but had length ${input.length}`,\n      );\n    }\n    // Step 0: pad the input array with zeros\n    for (let i = 0; i < input.length; i++) {\n      this._paddedInputBuffer[i] = input[i];\n    }\n    for (let i = input.length; i < this._paddedInputBuffer.length; i++) {\n      this._paddedInputBuffer[i] = 0;\n    }\n\n    // Step 1: get the DFT of the input array\n    this._fft.realTransform(this._transformBuffer, this._paddedInputBuffer);\n    // We need to fill in the right half of the array too\n    this._fft.completeSpectrum(this._transformBuffer);\n    // Step 2: multiply each entry by its conjugate\n    const tb = this._transformBuffer;\n    for (let i = 0; i < tb.length; i += 2) {\n      tb[i] = tb[i] * tb[i] + tb[i + 1] * tb[i + 1];\n      tb[i + 1] = 0;\n    }\n    // Step 3: perform the inverse transform\n    this._fft.inverseTransform(this._inverseBuffer, this._transformBuffer);\n\n    // This last result (the inverse transform) contains the autocorrelation\n    // data, which is completely real\n    for (let i = 0; i < input.length; i++) {\n      output[i] = this._inverseBuffer[2 * i];\n    }\n    return output;\n  }\n}\n\n/**\n * Returns an array of all the key maximum positions in the given input array.\n *\n * In McLeod's paper, a key maximum is the highest maximum between a positively\n * sloped zero crossing and a negatively sloped one.\n *\n * TODO: it may be more efficient not to construct a new output array each time,\n * but that would also make the code more complicated (more so than the changes\n * that were needed to remove the other allocations).\n *\n * @param input {ArrayLike<number>}\n * @returns {number[]}\n */\nfunction getKeyMaximumIndices(input) {\n  // The indices of the key maxima\n  /** @type {number[]} */ const keyIndices = [];\n  // Whether the last zero crossing found was positively sloped; equivalently,\n  // whether we're looking for a key maximum\n  let lookingForMaximum = false;\n  // The largest local maximum found so far\n  let max = -Infinity;\n  // The index of the largest local maximum so far\n  let maxIndex = -1;\n\n  for (let i = 1; i < input.length - 1; i++) {\n    if (input[i - 1] <= 0 && input[i] > 0) {\n      // Positively sloped zero crossing\n      lookingForMaximum = true;\n      maxIndex = i;\n      max = input[i];\n    } else if (input[i - 1] > 0 && input[i] <= 0) {\n      // Negatively sloped zero crossing\n      lookingForMaximum = false;\n      if (maxIndex !== -1) {\n        keyIndices.push(maxIndex);\n      }\n    } else if (lookingForMaximum && input[i] > max) {\n      max = input[i];\n      maxIndex = i;\n    }\n  }\n\n  return keyIndices;\n}\n\n/**\n * Refines the chosen key maximum index chosen from the given data by\n * interpolating a parabola using the key maximum index and its two neighbors\n * and finding the position of that parabola's maximum value.\n *\n * This is described in section 5 of the MPM paper as a way to refine the\n * position of the maximum.\n *\n * @param index {number} the chosen key maximum index. This must be between `1`\n * and `data.length - 2`, inclusive, since it and its two neighbors need to be\n * valid indexes of `data`.\n * @param data {ArrayLike<number>} the input array from which `index` was chosen\n * @returns {[number, number]} a pair consisting of the refined key maximum index and the\n * interpolated value of `data` at that index (the latter of which is used as a\n * measure of clarity)\n */\nfunction refineResultIndex(index, data) {\n  const [x0, x1, x2] = [index - 1, index, index + 1];\n  const [y0, y1, y2] = [data[x0], data[x1], data[x2]];\n\n  // The parabola going through the three data points can be written as\n  // y = y0(x - x1)(x - x2)/(x0 - x1)(x0 - x2)\n  //   + y1(x - x0)(x - x2)/(x1 - x0)(x1 - x2)\n  //   + y2(x - x0)(x - x1)/(x2 - x0)(x2 - x1)\n  // Given the definitions of x0, x1, and x2, we can simplify the denominators:\n  // y = y0(x - x1)(x - x2)/2\n  //   - y1(x - x0)(x - x2)\n  //   + y2(x - x0)(x - x1)/2\n  // We can expand this out and get the coefficients in standard form:\n  // a = y0/2 - y1 + y2/2\n  // b = -(y0/2)(x1 + x2) + y1(x0 + x2) - (y2/2)(x0 + x1)\n  // c = y0x1x2/2 - y1x0x2 + y2x0x1/2\n  // The index of the maximum is -b / 2a (by solving for x where the derivative\n  // is 0).\n\n  const a = y0 / 2 - y1 + y2 / 2;\n  const b = -(y0 / 2) * (x1 + x2) + y1 * (x0 + x2) - (y2 / 2) * (x0 + x1);\n  const c = (y0 * x1 * x2) / 2 - y1 * x0 * x2 + (y2 * x0 * x1) / 2;\n\n  const xMax = -b / (2 * a);\n  const yMax = a * xMax * xMax + b * xMax + c;\n  return [xMax, yMax];\n}\n\n/**\n * A class that can detect the pitch of a note from a time-domain input array.\n *\n * This class uses the McLeod pitch method (MPM) to detect pitches. MPM is\n * described in the paper 'A Smarter Way to Find Pitch' by Philip McLeod and\n * Geoff Wyvill\n * (http://miracle.otago.ac.nz/tartini/papers/A_Smarter_Way_to_Find_Pitch.pdf).\n *\n * The class holds internal buffers so that a minimal number of additional\n * allocations are necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use internally. Inputs to the\n * pitch-detection process can be any numeric array type.\n */\nexport class PitchDetector {\n  /** @private @type {Autocorrelator<T>} */\n  _autocorrelator;\n  /** @private @type {T} */\n  _nsdfBuffer;\n  /** @private @type {number} */\n  _clarityThreshold = 0.9;\n  /** @private @type {number} */\n  _minVolumeAbsolute = 0.0;\n  /** @private @type {number} */\n  _maxInputAmplitude = 1.0;\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float32Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float64Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using `number[]` buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new PitchDetector(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link PitchDetector} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `PitchDetector` will only support operation on arrays of this length.\n   * @param bufferSupplier {(inputLength: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    this._autocorrelator = new Autocorrelator(inputLength, bufferSupplier);\n    this._nsdfBuffer = bufferSupplier(inputLength);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._autocorrelator.inputLength;\n  }\n\n  /**\n   * Sets the clarity threshold used when identifying the correct pitch (the constant\n   * `k` from the MPM paper). The value must be between 0 (exclusive) and 1\n   * (inclusive), with the most suitable range being between 0.8 and 1.\n   *\n   * @param threshold {number} the clarity threshold\n   */\n  set clarityThreshold(threshold) {\n    if (!Number.isFinite(threshold) || threshold <= 0 || threshold > 1) {\n      throw new Error(\"clarityThreshold must be a number in the range (0, 1]\");\n    }\n    this._clarityThreshold = threshold;\n  }\n\n  /**\n   * Sets the minimum detectable volume, as an absolute number between 0 and\n   * `maxInputAmplitude`, inclusive, to consider in a sample when detecting the\n   * pitch. If a sample fails to meet this minimum volume, `findPitch` will\n   * return a clarity of 0.\n   *\n   * Volume is calculated as the RMS (root mean square) of the input samples.\n   *\n   * @param volume {number} the minimum volume as an absolute amplitude value\n   */\n  set minVolumeAbsolute(volume) {\n    if (\n      !Number.isFinite(volume) ||\n      volume < 0 ||\n      volume > this._maxInputAmplitude\n    ) {\n      throw new Error(\n        `minVolumeAbsolute must be a number in the range [0, ${this._maxInputAmplitude}]`,\n      );\n    }\n    this._minVolumeAbsolute = volume;\n  }\n\n  /**\n   * Sets the minimum volume using a decibel measurement. Must be less than or\n   * equal to 0: 0 indicates the loudest possible sound (see\n   * `maxInputAmplitude`), -10 is a sound with a tenth of the volume of the\n   * loudest possible sound, etc.\n   *\n   * Volume is calculated as the RMS (root mean square) of the input samples.\n   *\n   * @param db {number} the minimum volume in decibels, with 0 being the loudest\n   * sound\n   */\n  set minVolumeDecibels(db) {\n    if (!Number.isFinite(db) || db > 0) {\n      throw new Error(\"minVolumeDecibels must be a number <= 0\");\n    }\n    this._minVolumeAbsolute = this._maxInputAmplitude * 10 ** (db / 10);\n  }\n\n  /**\n   * Sets the maximum amplitude of an input reading. Must be greater than 0.\n   *\n   * @param amplitude {number} the maximum amplitude (absolute value) of an input reading\n   */\n  set maxInputAmplitude(amplitude) {\n    if (!Number.isFinite(amplitude) || amplitude <= 0) {\n      throw new Error(\"maxInputAmplitude must be a number > 0\");\n    }\n    this._maxInputAmplitude = amplitude;\n  }\n\n  /**\n   * Returns the pitch detected using McLeod Pitch Method (MPM) along with a\n   * measure of its clarity.\n   *\n   * The clarity is a value between 0 and 1 (potentially inclusive) that\n   * represents how \"clear\" the pitch was. A clarity value of 1 indicates that\n   * the pitch was very distinct, while lower clarity values indicate less\n   * definite pitches.\n   *\n   * @param input {ArrayLike<number>} the time-domain input data\n   * @param sampleRate {number} the sample rate at which the input data was\n   * collected\n   * @returns {[number, number]} the detected pitch, in Hz, followed by the\n   * clarity. If a pitch cannot be determined from the input, such as if the\n   * volume is too low (see `minVolumeAbsolute` and `minVolumeDecibels`), this\n   * will be `[0, 0]`.\n   */\n  findPitch(input, sampleRate) {\n    // If the highest key maximum is less than the minimum volume, we don't need\n    // to bother detecting the pitch, as the sample is too quiet.\n    if (this._belowMinimumVolume(input)) return [0, 0];\n    this._nsdf(input);\n    const keyMaximumIndices = getKeyMaximumIndices(this._nsdfBuffer);\n    if (keyMaximumIndices.length === 0) {\n      // No key maxima means that we either don't have enough data to analyze or\n      // that the data was flawed (such as an input array of zeroes)\n      return [0, 0];\n    }\n    // The highest key maximum\n    const nMax = Math.max(...keyMaximumIndices.map((i) => this._nsdfBuffer[i]));\n    // Following the paper, we return the pitch corresponding to the first key\n    // maximum higher than K * nMax. This is guaranteed not to be undefined, since\n    // we know of at least one key maximum satisfying this condition (whichever\n    // key maximum gave us nMax).\n    const resultIndex = keyMaximumIndices.find(\n      (i) => this._nsdfBuffer[i] >= this._clarityThreshold * nMax,\n    );\n    const [refinedResultIndex, clarity] = refineResultIndex(\n      // @ts-expect-error resultIndex is guaranteed to be defined\n      resultIndex,\n      this._nsdfBuffer,\n    );\n\n    // Due to floating point errors, the clarity may occasionally come out to be\n    // slightly over 1.0. We can avoid incorrect results by clamping the value.\n    return [sampleRate / refinedResultIndex, Math.min(clarity, 1.0)];\n  }\n\n  /**\n   * Returns whether the input audio data is below the minimum volume allowed by\n   * the pitch detector.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   * @returns {boolean}\n   */\n  _belowMinimumVolume(input) {\n    if (this._minVolumeAbsolute === 0) return false;\n    let squareSum = 0;\n    for (let i = 0; i < input.length; i++) {\n      squareSum += input[i] ** 2;\n    }\n    return Math.sqrt(squareSum / input.length) < this._minVolumeAbsolute;\n  }\n\n  /**\n   * Computes the NSDF of the input and stores it in the internal buffer. This\n   * is equation (9) in the McLeod pitch method paper.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   */\n  _nsdf(input) {\n    // The function r'(tau) is the autocorrelation\n    this._autocorrelator.autocorrelate(input, this._nsdfBuffer);\n    // The function m'(tau) (defined in equation (6)) can be computed starting\n    // with m'(0), which is equal to 2r'(0), and then iteratively modified to\n    // get m'(1), m'(2), etc. For example, to get m'(1), we take m'(0) and\n    // subtract x_0^2 and x_{W-1}^2. Then, to get m'(2), we take m'(1) and\n    // subtract x_1^2 and x_{W-2}^2, and further values are similar (see the\n    // note at the end of section 6 in the MPM paper).\n    //\n    // The resulting array values are 2 * r'(tau) / m'(tau). We use m below as\n    // the incremental value of m'.\n    let m = 2 * this._nsdfBuffer[0];\n    /** @type {number} */ let i;\n    // As pointed out by issuefiler on GitHub, we can take advantage of the fact\n    // that m will never increase to avoid division by zero by ending this loop\n    // once m === 0. The rest of the array values after m becomes 0 will just be\n    // set to 0 themselves. We actually check for m > 0 rather than m === 0\n    // because there may be small floating-point errors that cause m to become\n    // negative rather than exactly 0.\n    for (i = 0; i < this._nsdfBuffer.length && m > 0; i++) {\n      this._nsdfBuffer[i] = (2 * this._nsdfBuffer[i]) / m;\n      m -= input[i] ** 2 + input[input.length - i - 1] ** 2;\n    }\n    // If there are any array values remaining, it means m === 0 for those\n    // values of tau, so we can just set them to 0\n    for (; i < this._nsdfBuffer.length; i++) {\n      this._nsdfBuffer[i] = 0;\n    }\n  }\n}\n\n/**\n * Rounds up the input to the next power of 2.\n *\n * @param {number} v\n * @returns {number} the next power of 2 at least as large as `v`\n */\nfunction ceilPow2(v) {\n  // https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n","import { Logger } from '../utils/Logger';\n/**\n * PitchDetector - Framework-agnostic High-precision Pitch Detection\n * \n * Based on Pitchy library with McLeod Pitch Method\n * Includes harmonic correction, noise filtering, and device-specific optimization\n */\n\nimport { PitchDetector as PitchyDetector } from 'pitchy';\nimport type { \n  PitchDetectorConfig, \n  PitchDetectionResult, \n  PitchCallback,\n  ErrorCallback,\n  StateChangeCallback,\n  DeviceSpecs\n} from '../types';\nimport { AudioManager } from './AudioManager';\n\nexport class PitchDetector {\n  private static DEBUG_MODE = false; // デバッグログ制御\n  \n  // Core components\n  private audioManager: AudioManager;\n  private pitchDetector: PitchyDetector<Float32Array> | null = null;\n  private analyser: AnalyserNode | null = null;\n  private rawAnalyser: AnalyserNode | null = null;\n  private animationFrame: number | null = null;\n  \n  // State management\n  private componentState: 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'error' = 'uninitialized';\n  private isInitialized = false;\n  private isDetecting = false;\n  private lastError: Error | null = null;\n  \n  // Analyser management\n  private analyserIds: string[] = [];\n  \n  // Detection data\n  private currentVolume = 0;\n  private rawVolume = 0;\n  private currentFrequency = 0;\n  private detectedNote = '--';\n  private pitchClarity = 0;\n  \n  // Stabilization buffers\n  private volumeHistory: number[] = [];\n  private stableVolume = 0;\n  \n  // Harmonic correction\n  private previousFrequency = 0;\n  private harmonicHistory: Array<{frequency: number, confidence: number, timestamp: number}> = [];\n  \n  // Pitch-training安定版統合: 無音検出とリセット機能（初期安定化改良版）\n  private frequencyHistory: number[] = [];\n  private stableFrequency: number | null = null;\n  private noSoundCounter = 0;\n  private maxHistoryLength = 8; // 履歴長を短縮（10→8）\n  private initialStabilizationFrames = 3; // 初期安定化フレーム数（5→3）\n  \n  // Configuration\n  private config: Required<PitchDetectorConfig>;\n  private disableHarmonicCorrection = false;\n  \n  // Callbacks\n  private callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  } = {};\n  \n  // Device specifications\n  private deviceSpecs: DeviceSpecs;\n\n  constructor(audioManager: AudioManager, config: PitchDetectorConfig = {}) {\n    this.audioManager = audioManager;\n    this.config = {\n      fftSize: 4096,\n      smoothing: 0.1,\n      clarityThreshold: 0.6, // 0.8 → 0.6 初期検出を早める\n      minVolumeAbsolute: 0.01,\n      ...config\n    };\n    \n    this.deviceSpecs = this.audioManager.getPlatformSpecs();\n  }\n\n  /**\n   * Set callback functions\n   */\n  setCallbacks(callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Initialize pitch detector with external AudioContext\n   */\n  async initialize(): Promise<void> {\n    try {\n      this.componentState = 'initializing';\n      this.lastError = null;\n      \n      if (PitchDetector.DEBUG_MODE) Logger.log('🎙️ [PitchDetector] Starting initialization via AudioManager');\n      \n      // Get shared resources from AudioManager\n      await this.audioManager.initialize();\n      \n      if (PitchDetector.DEBUG_MODE) Logger.log('✅ [PitchDetector] AudioManager resources acquired');\n      \n      // Create dedicated Analyser (with filters)\n      const filteredAnalyserId = `pitch-detector-filtered-${Date.now()}`;\n      this.analyser = this.audioManager.createAnalyser(filteredAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: true\n      });\n      this.analyserIds.push(filteredAnalyserId);\n      \n      // Create raw signal Analyser (for comparison)\n      const rawAnalyserId = `pitch-detector-raw-${Date.now()}`;\n      this.rawAnalyser = this.audioManager.createAnalyser(rawAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: false\n      });\n      this.analyserIds.push(rawAnalyserId);\n      \n      if (PitchDetector.DEBUG_MODE) Logger.log('✅ [PitchDetector] Analysers created:', this.analyserIds);\n      \n      // Initialize PitchDetector\n      this.pitchDetector = PitchyDetector.forFloat32Array(this.analyser.fftSize);\n      \n      // Initialization complete\n      this.componentState = 'ready';\n      this.isInitialized = true;\n      \n      // Notify state change\n      this.callbacks.onStateChange?.(this.componentState);\n      \n      if (PitchDetector.DEBUG_MODE) Logger.log('✅ [PitchDetector] Initialization complete');\n      \n    } catch (error) {\n      console.error('❌ [PitchDetector] Initialization error:', error);\n      this.componentState = 'error';\n      this.lastError = error as Error;\n      this.isInitialized = false;\n      \n      // Notify error\n      this.callbacks.onError?.(error as Error);\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Start pitch detection\n   */\n  startDetection(): boolean {\n    if (this.componentState !== 'ready') {\n      const error = new Error(`Cannot start detection: component state is ${this.componentState}`);\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    if (!this.analyser || !this.pitchDetector) {\n      const error = new Error('Required components not available');\n      this.componentState = 'error';\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    this.componentState = 'detecting';\n    this.isDetecting = true;\n    this.callbacks.onStateChange?.(this.componentState);\n    this.detectPitch();\n    return true;\n  }\n\n  /**\n   * Stop pitch detection\n   */\n  stopDetection(): void {\n    this.isDetecting = false;\n    if (this.animationFrame) {\n      cancelAnimationFrame(this.animationFrame);\n      this.animationFrame = null;\n    }\n    \n    // Return state to ready (if initialized)\n    if (this.componentState === 'detecting' && this.isInitialized) {\n      this.componentState = 'ready';\n      this.callbacks.onStateChange?.(this.componentState);\n    }\n  }\n\n  /**\n   * Real-time pitch detection loop\n   */\n  private detectPitch(): void {\n    if (!this.isDetecting || !this.analyser || !this.rawAnalyser || !this.pitchDetector) return;\n    \n    const bufferLength = this.analyser.fftSize;\n    const buffer = new Float32Array(bufferLength);\n    const rawBuffer = new Float32Array(this.rawAnalyser.fftSize);\n    \n    this.analyser.getFloatTimeDomainData(buffer);\n    this.rawAnalyser.getFloatTimeDomainData(rawBuffer);\n    \n    // Volume calculation (filtered)\n    let sum = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      sum += Math.abs(buffer[i]);\n    }\n    const rms = Math.sqrt(sum / bufferLength);\n    \n    // Platform-specific volume calculation\n    const platformSpecs = this.deviceSpecs;\n    const adjustedRms = rms * platformSpecs.gainCompensation;\n    const volumePercent = Math.max(0, Math.min(100, \n      (adjustedRms * 100) / platformSpecs.divisor * 6 - platformSpecs.noiseThreshold\n    ));\n    \n    // Raw volume calculation (pre-filter)\n    let rawSum = 0;\n    for (let i = 0; i < rawBuffer.length; i++) {\n      rawSum += Math.abs(rawBuffer[i]);\n    }\n    const rawRms = Math.sqrt(rawSum / rawBuffer.length);\n    const rawVolumePercent = Math.max(0, Math.min(100, \n      (rawRms * platformSpecs.gainCompensation * 100) / platformSpecs.divisor * 6 - platformSpecs.noiseThreshold\n    ));\n    \n    // Volume stabilization (5-frame moving average)\n    this.volumeHistory.push(volumePercent);\n    if (this.volumeHistory.length > 5) {\n      this.volumeHistory.shift();\n    }\n    this.stableVolume = this.volumeHistory.reduce((sum, v) => sum + v, 0) / this.volumeHistory.length;\n    this.currentVolume = this.stableVolume;\n    this.rawVolume = rawVolumePercent;\n    \n    // Pitch detection (using PitchDetector)\n    const audioContext = this.audioManager.getStatus().audioContextState;\n    const sampleRate = audioContext === 'running' ? 44100 : 44100; // Default fallback\n    const [pitch, clarity] = this.pitchDetector.findPitch(buffer, sampleRate);\n    \n    // Human vocal range filtering (practical adjustment)\n    // Optimized for actual human voice range:\n    // - Low range: 65Hz and above (C2 and above, considering male lowest vocal range)  \n    // - High range: 1200Hz and below (practical singing range)\n    // - Exclude extreme low frequency noise (G-1, etc.) reliably\n    const isValidVocalRange = pitch >= 65 && pitch <= 1200;\n    \n    // 🔧 音量閾値をさらに緩和（3% → 1.5%）- 初期検出を早める\n    if (pitch && clarity > this.config.clarityThreshold && this.currentVolume > 1.5 && isValidVocalRange) {\n      let finalFreq = pitch;\n      \n      // Harmonic correction control (for 230Hz stuck issue debugging)\n      if (!this.disableHarmonicCorrection) {\n        // Apply unified harmonic correction system (pass volume information)\n        const normalizedVolume = Math.min(this.currentVolume / 100, 1.0); // Normalize to 0-1\n        finalFreq = this.correctHarmonic(pitch, normalizedVolume);\n      }\n      \n      // 🎯 pitch-training安定版の周波数安定化ロジック統合\n      const roundedFreq = Math.round(finalFreq * 10) / 10;\n      \n      // 周波数履歴に追加\n      this.frequencyHistory.push(roundedFreq);\n      if (this.frequencyHistory.length > this.maxHistoryLength) {\n        this.frequencyHistory.shift();\n      }\n      \n      // 🚀 初期安定化改良: 3フレームから開始（5→3）\n      if (this.frequencyHistory.length >= this.initialStabilizationFrames) {\n        const historyCount = Math.min(this.frequencyHistory.length, 5);\n        const avgFreq = this.frequencyHistory.slice(-historyCount).reduce((sum, f) => sum + f, 0) / historyCount;\n        \n        // 初回検出の場合、より早く安定化\n        if (this.stableFrequency === null) {\n          this.stableFrequency = roundedFreq;\n          finalFreq = roundedFreq;\n          console.log(`🎯 [PitchDetector] 初期周波数確定: ${finalFreq}Hz (${historyCount}フレーム後)`);\n        } else {\n          // 急激な変化を抑制（±20%以内）\n          if (Math.abs(roundedFreq - avgFreq) / avgFreq > 0.2) {\n            finalFreq = avgFreq + (roundedFreq - avgFreq) * 0.3;\n            finalFreq = Math.round(finalFreq * 10) / 10;\n          } else {\n            // オクターブジャンプ検出\n            const octaveRatio = roundedFreq / this.stableFrequency;\n            if (octaveRatio > 1.8 || octaveRatio < 0.55) {\n              // オクターブジャンプを無視\n              finalFreq = this.stableFrequency;\n            } else {\n              // 正常な変化\n              this.stableFrequency = roundedFreq;\n              finalFreq = roundedFreq;\n            }\n          }\n        }\n      } else {\n        // 🚀 履歴不足の場合も即座に表示（10秒待機の回避）\n        finalFreq = roundedFreq;\n        console.log(`⏳ [PitchDetector] 履歴構築中: ${finalFreq}Hz (${this.frequencyHistory.length}/${this.initialStabilizationFrames})`);\n      }\n      \n      // Update frequency display\n      this.currentFrequency = Math.round(finalFreq);\n      this.detectedNote = this.frequencyToNote(this.currentFrequency);\n      this.pitchClarity = clarity;\n      \n      // 🔄 無音カウンターリセット\n      this.noSoundCounter = 0;\n      \n    } else {\n      // 🎯 pitch-training安定版の無音検出・リセット機能\n      this.noSoundCounter++;\n      \n      // 15フレーム以上無音が続いた場合、履歴クリア\n      if (this.noSoundCounter > 15) {\n        this.frequencyHistory = [];\n        this.stableFrequency = null;\n        this.resetHarmonicHistory();\n      }\n      \n      // Clear frequency display\n      this.currentFrequency = 0;\n      this.detectedNote = '--';\n      this.pitchClarity = 0;\n    }\n    \n    // Set VolumeBar to 0 when no pitch is detected (counter extreme low frequency noise)\n    const displayVolume = this.currentFrequency > 0 ? this.rawVolume : 0;\n    \n    // Send data to callback\n    const result: PitchDetectionResult = {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      clarity: this.pitchClarity,\n      volume: displayVolume,\n      cents: this.currentFrequency > 0 ? this.frequencyToCents(this.currentFrequency) : undefined\n    };\n    \n    this.callbacks.onPitchUpdate?.(result);\n    \n    this.animationFrame = requestAnimationFrame(() => this.detectPitch());\n  }\n\n  /**\n   * Harmonic correction system\n   */\n  private correctHarmonic(frequency: number, volume: number): number {\n    const now = Date.now();\n    const confidenceThreshold = 0.7;\n    const historyWindow = 1000; // 1 second\n    \n    // Clean old history\n    this.harmonicHistory = this.harmonicHistory.filter(h => now - h.timestamp < historyWindow);\n    \n    // Calculate confidence based on volume and stability\n    const volumeConfidence = Math.min(volume * 1.5, 1.0);\n    const stabilityConfidence = this.previousFrequency > 0 ? \n      Math.max(0, 1 - Math.abs(frequency - this.previousFrequency) / this.previousFrequency) : 0.5;\n    const confidence = (volumeConfidence + stabilityConfidence) / 2;\n    \n    // Add to history\n    this.harmonicHistory.push({ frequency, confidence, timestamp: now });\n    \n    // Check for harmonic patterns\n    if (this.harmonicHistory.length >= 3) {\n      const recentHistory = this.harmonicHistory.slice(-5);\n      const avgFrequency = recentHistory.reduce((sum, h) => sum + h.frequency, 0) / recentHistory.length;\n      const avgConfidence = recentHistory.reduce((sum, h) => sum + h.confidence, 0) / recentHistory.length;\n      \n      // Check for 2x harmonic (octave up error)\n      const halfFrequency = frequency / 2;\n      if (Math.abs(halfFrequency - avgFrequency) / avgFrequency < 0.1 && avgConfidence > confidenceThreshold) {\n        Logger.log(`🔧 [PitchDetector] Octave correction: ${frequency}Hz → ${halfFrequency}Hz`);\n        this.previousFrequency = halfFrequency;\n        return halfFrequency;\n      }\n      \n      // Check for 1/2x harmonic (octave down error)\n      const doubleFrequency = frequency * 2;\n      if (Math.abs(doubleFrequency - avgFrequency) / avgFrequency < 0.1 && avgConfidence > confidenceThreshold) {\n        Logger.log(`🔧 [PitchDetector] Octave up correction: ${frequency}Hz → ${doubleFrequency}Hz`);\n        this.previousFrequency = doubleFrequency;\n        return doubleFrequency;\n      }\n    }\n    \n    this.previousFrequency = frequency;\n    return frequency;\n  }\n\n  /**\n   * Reset harmonic correction history\n   */\n  private resetHarmonicHistory(): void {\n    this.harmonicHistory = [];\n    this.previousFrequency = 0;\n  }\n\n  /**\n   * Convert frequency to note name\n   */\n  private frequencyToNote(frequency: number): string {\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const A4 = 440;\n    \n    if (frequency <= 0) return '--';\n    \n    const semitonesFromA4 = Math.round(12 * Math.log2(frequency / A4));\n    const noteIndex = (semitonesFromA4 + 9 + 120) % 12;\n    const octave = Math.floor((semitonesFromA4 + 9) / 12) + 4;\n    \n    return noteNames[noteIndex] + octave;\n  }\n\n  /**\n   * Convert frequency to cents deviation from nearest note\n   */\n  private frequencyToCents(frequency: number): number {\n    const A4 = 440;\n    const semitonesFromA4 = 12 * Math.log2(frequency / A4);\n    const nearestSemitone = Math.round(semitonesFromA4);\n    const centsDeviation = (semitonesFromA4 - nearestSemitone) * 100;\n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Reset display state\n   */\n  resetDisplayState(): void {\n    this.currentVolume = 0;\n    this.rawVolume = 0;\n    this.currentFrequency = 0;\n    this.detectedNote = '--';\n    this.pitchClarity = 0;\n    this.stableVolume = 0;\n    \n    // Clear buffers\n    this.volumeHistory = [];\n    \n    // 🎯 pitch-training安定版のリセット機能統合\n    this.frequencyHistory = [];\n    this.stableFrequency = null;\n    this.noSoundCounter = 0;\n    \n    // Reset harmonic correction\n    this.resetHarmonicHistory();\n    \n    Logger.log('🔄 [PitchDetector] Display state reset');\n  }\n\n  /**\n   * Enable/disable harmonic correction\n   */\n  setHarmonicCorrectionEnabled(enabled: boolean): void {\n    this.disableHarmonicCorrection = !enabled;\n    if (!enabled) {\n      this.resetHarmonicHistory();\n    }\n  }\n\n  /**\n   * Get initialization status\n   */\n  getIsInitialized(): boolean {\n    return this.isInitialized && this.componentState === 'ready';\n  }\n\n  /**\n   * Get current state\n   */\n  getState() {\n    return {\n      componentState: this.componentState,\n      isInitialized: this.isInitialized,\n      isDetecting: this.isDetecting,\n      lastError: this.lastError,\n      hasRequiredComponents: !!(this.analyser && this.pitchDetector)\n    };\n  }\n\n  /**\n   * Get current detection result\n   */\n  getCurrentResult(): PitchDetectionResult {\n    return {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      clarity: this.pitchClarity,\n      volume: this.currentFrequency > 0 ? this.rawVolume : 0\n    };\n  }\n\n  /**\n   * Reinitialize detector\n   */\n  async reinitialize(): Promise<void> {\n    Logger.log('🔄 [PitchDetector] Starting reinitialization');\n    \n    // Cleanup current state\n    this.cleanup();\n    \n    // Short wait to ensure resource release\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    // Execute reinitialization\n    await this.initialize();\n    \n    Logger.log('✅ [PitchDetector] Reinitialization complete');\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    Logger.log('🧹 [PitchDetector] Starting cleanup');\n    \n    this.stopDetection();\n    \n    // Notify AudioManager to release created Analysers\n    if (this.analyserIds.length > 0) {\n      this.audioManager.release(this.analyserIds);\n      Logger.log('📤 [PitchDetector] Notified AudioManager of Analyser release:', this.analyserIds);\n      this.analyserIds = [];\n    }\n    \n    // Reset state\n    this.componentState = 'uninitialized';\n    this.isInitialized = false;\n    this.lastError = null;\n    \n    // Clear references (actual resources managed by AudioManager)\n    this.analyser = null;\n    this.rawAnalyser = null;\n    this.pitchDetector = null;\n    \n    // Clear history\n    this.volumeHistory = [];\n    this.resetHarmonicHistory();\n    \n    // 🎯 pitch-training安定版のクリーンアップ統合\n    this.frequencyHistory = [];\n    this.stableFrequency = null;\n    this.noSoundCounter = 0;\n    \n    Logger.log('✅ [PitchDetector] Cleanup complete');\n  }\n}","import { Logger } from \"../utils/Logger\";\n/**\n * NoiseFilter - 3-stage Noise Reduction Filter Chain\n * \n * Implements sophisticated noise filtering for voice detection:\n * 1. Highpass filter - Remove low frequency noise (below 80Hz)\n * 2. Lowpass filter - Remove high frequency noise (above 800Hz) \n * 3. Notch filter - Remove power line noise (60Hz)\n */\n\nimport type { NoiseFilterConfig } from '../types';\n\nexport class NoiseFilter {\n  private audioContext: AudioContext;\n  private config: Required<NoiseFilterConfig>;\n  \n  // Filter nodes\n  private highpassFilter: BiquadFilterNode | null = null;\n  private lowpassFilter: BiquadFilterNode | null = null;\n  private notchFilter: BiquadFilterNode | null = null;\n  \n  // Chain state\n  private isConnected = false;\n  private inputNode: AudioNode | null = null;\n  private outputNode: AudioNode | null = null;\n\n  constructor(audioContext: AudioContext, config: NoiseFilterConfig = {}) {\n    this.audioContext = audioContext;\n    this.config = {\n      highpassFreq: 80,\n      lowpassFreq: 800,\n      notchFreq: 60,\n      highpassQ: 0.7,\n      lowpassQ: 0.7,\n      notchQ: 10.0,\n      useFilters: true,\n      ...config\n    };\n    \n    this.createFilterChain();\n  }\n\n  /**\n   * Create the 3-stage filter chain\n   */\n  private createFilterChain(): void {\n    if (!this.config.useFilters) {\n      Logger.log('🔇 [NoiseFilter] Filters disabled - bypassing filter chain');\n      return;\n    }\n\n    try {\n      // 1. Highpass filter (remove low frequency noise: cut below 80Hz)\n      this.highpassFilter = this.audioContext.createBiquadFilter();\n      this.highpassFilter.type = 'highpass';\n      this.highpassFilter.frequency.setValueAtTime(this.config.highpassFreq, this.audioContext.currentTime);\n      this.highpassFilter.Q.setValueAtTime(this.config.highpassQ, this.audioContext.currentTime);\n\n      // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n      this.lowpassFilter = this.audioContext.createBiquadFilter();\n      this.lowpassFilter.type = 'lowpass';\n      this.lowpassFilter.frequency.setValueAtTime(this.config.lowpassFreq, this.audioContext.currentTime);\n      this.lowpassFilter.Q.setValueAtTime(this.config.lowpassQ, this.audioContext.currentTime);\n\n      // 3. Notch filter (remove power line noise: 60Hz)\n      this.notchFilter = this.audioContext.createBiquadFilter();\n      this.notchFilter.type = 'notch';\n      this.notchFilter.frequency.setValueAtTime(this.config.notchFreq, this.audioContext.currentTime);\n      this.notchFilter.Q.setValueAtTime(this.config.notchQ, this.audioContext.currentTime);\n\n      Logger.log('✅ [NoiseFilter] 3-stage filter chain created', {\n        highpass: `${this.config.highpassFreq}Hz (Q=${this.config.highpassQ})`,\n        lowpass: `${this.config.lowpassFreq}Hz (Q=${this.config.lowpassQ})`,\n        notch: `${this.config.notchFreq}Hz (Q=${this.config.notchQ})`\n      });\n\n    } catch (error) {\n      console.error('❌ [NoiseFilter] Failed to create filter chain:', error);\n      throw new Error(`NoiseFilter initialization failed: ${error}`);\n    }\n  }\n\n  /**\n   * Connect the filter chain between input and output nodes\n   */\n  connect(inputNode: AudioNode, outputNode?: AudioNode): AudioNode {\n    if (!this.config.useFilters) {\n      // Bypass filtering - direct connection\n      if (outputNode) {\n        inputNode.connect(outputNode);\n      }\n      return inputNode;\n    }\n\n    if (!this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      throw new Error('NoiseFilter not properly initialized');\n    }\n\n    try {\n      // Disconnect any existing connections\n      this.disconnect();\n\n      // Store references\n      this.inputNode = inputNode;\n      this.outputNode = outputNode || null;\n\n      // Create filter chain: input → highpass → lowpass → notch → output\n      inputNode.connect(this.highpassFilter);\n      this.highpassFilter.connect(this.lowpassFilter);\n      this.lowpassFilter.connect(this.notchFilter);\n      \n      if (outputNode) {\n        this.notchFilter.connect(outputNode);\n      }\n\n      this.isConnected = true;\n\n      Logger.log('🔗 [NoiseFilter] Filter chain connected');\n      \n      // Return the final node in the chain (notch filter) for further connections\n      return this.notchFilter!;\n\n    } catch (error) {\n      console.error('❌ [NoiseFilter] Connection failed:', error);\n      throw new Error(`NoiseFilter connection failed: ${error}`);\n    }\n  }\n\n  /**\n   * Disconnect the filter chain\n   */\n  disconnect(): void {\n    try {\n      if (this.highpassFilter) {\n        this.highpassFilter.disconnect();\n      }\n      if (this.lowpassFilter) {\n        this.lowpassFilter.disconnect();\n      }\n      if (this.notchFilter) {\n        this.notchFilter.disconnect();\n      }\n      \n      this.isConnected = false;\n      this.inputNode = null;\n      this.outputNode = null;\n\n      Logger.log('🔌 [NoiseFilter] Filter chain disconnected');\n\n    } catch (error) {\n      console.warn('⚠️ [NoiseFilter] Disconnect warning:', error);\n    }\n  }\n\n  /**\n   * Update filter parameters dynamically\n   */\n  updateFrequencies(params: {\n    highpassFreq?: number;\n    lowpassFreq?: number;\n    notchFreq?: number;\n    highpassQ?: number;\n    lowpassQ?: number;\n    notchQ?: number;\n  }): void {\n    const currentTime = this.audioContext.currentTime;\n\n    try {\n      if (params.highpassFreq !== undefined && this.highpassFilter) {\n        this.highpassFilter.frequency.setValueAtTime(params.highpassFreq, currentTime);\n        this.config.highpassFreq = params.highpassFreq;\n      }\n\n      if (params.lowpassFreq !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.frequency.setValueAtTime(params.lowpassFreq, currentTime);\n        this.config.lowpassFreq = params.lowpassFreq;\n      }\n\n      if (params.notchFreq !== undefined && this.notchFilter) {\n        this.notchFilter.frequency.setValueAtTime(params.notchFreq, currentTime);\n        this.config.notchFreq = params.notchFreq;\n      }\n\n      if (params.highpassQ !== undefined && this.highpassFilter) {\n        this.highpassFilter.Q.setValueAtTime(params.highpassQ, currentTime);\n        this.config.highpassQ = params.highpassQ;\n      }\n\n      if (params.lowpassQ !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.Q.setValueAtTime(params.lowpassQ, currentTime);\n        this.config.lowpassQ = params.lowpassQ;\n      }\n\n      if (params.notchQ !== undefined && this.notchFilter) {\n        this.notchFilter.Q.setValueAtTime(params.notchQ, currentTime);\n        this.config.notchQ = params.notchQ;\n      }\n\n      Logger.log('🔧 [NoiseFilter] Filter parameters updated:', params);\n\n    } catch (error) {\n      console.error('❌ [NoiseFilter] Parameter update failed:', error);\n      throw new Error(`NoiseFilter parameter update failed: ${error}`);\n    }\n  }\n\n  /**\n   * Enable or disable the entire filter chain\n   */\n  setEnabled(enabled: boolean): void {\n    if (enabled === this.config.useFilters) {\n      return; // No change needed\n    }\n\n    this.config.useFilters = enabled;\n\n    if (this.isConnected && this.inputNode) {\n      // Reconnect with new settings\n      const savedOutputNode = this.outputNode;\n      this.disconnect();\n      \n      if (enabled) {\n        // Recreate filters if they were destroyed\n        if (!this.highpassFilter) {\n          this.createFilterChain();\n        }\n      }\n      \n      this.connect(this.inputNode, savedOutputNode || undefined);\n    }\n\n    Logger.log(`🔘 [NoiseFilter] Filters ${enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  /**\n   * Get filter response at specific frequency (for visualization)\n   */\n  getFilterResponse(frequency: number): { magnitude: number; phase: number } {\n    if (!this.config.useFilters || !this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n\n    try {\n      // Create frequency array for single frequency\n      const frequencyArray = new Float32Array([frequency]);\n      const magnitudeArray = new Float32Array(1);\n      const phaseArray = new Float32Array(1);\n\n      // Calculate combined response (simplified - in practice you'd need to chain the calculations)\n      this.highpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const highpassMagnitude = magnitudeArray[0];\n      \n      this.lowpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const lowpassMagnitude = magnitudeArray[0];\n      \n      this.notchFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const notchMagnitude = magnitudeArray[0];\n\n      // Combined magnitude (multiply individual filter responses)\n      const combinedMagnitude = highpassMagnitude * lowpassMagnitude * notchMagnitude;\n      \n      return { \n        magnitude: combinedMagnitude, \n        phase: phaseArray[0] \n      };\n\n    } catch (error) {\n      console.warn('⚠️ [NoiseFilter] Filter response calculation failed:', error);\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n  }\n\n  /**\n   * Get current filter configuration\n   */\n  getConfig(): Required<NoiseFilterConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Get filter chain status\n   */\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      useFilters: this.config.useFilters,\n      hasFilters: !!(this.highpassFilter && this.lowpassFilter && this.notchFilter),\n      filterTypes: this.config.useFilters ? ['highpass', 'lowpass', 'notch'] : [],\n      frequencies: {\n        highpass: this.config.highpassFreq,\n        lowpass: this.config.lowpassFreq,\n        notch: this.config.notchFreq\n      },\n      qFactors: {\n        highpass: this.config.highpassQ,\n        lowpass: this.config.lowpassQ,\n        notch: this.config.notchQ\n      }\n    };\n  }\n\n  /**\n   * Get the final output node (for chaining)\n   */\n  getOutputNode(): AudioNode | null {\n    if (!this.config.useFilters || !this.notchFilter) {\n      return this.inputNode || null; // Bypass mode\n    }\n    return this.notchFilter;\n  }\n\n  /**\n   * Cleanup and destroy filter nodes\n   */\n  destroy(): void {\n    Logger.log('🗑️ [NoiseFilter] Destroying filter chain');\n    \n    this.disconnect();\n    \n    // Note: Filter nodes are automatically garbage collected\n    // when disconnected and no longer referenced\n    this.highpassFilter = null;\n    this.lowpassFilter = null;\n    this.notchFilter = null;\n    \n    Logger.log('✅ [NoiseFilter] Cleanup complete');\n  }\n\n  /**\n   * Create a preset configuration for different scenarios\n   */\n  static getPresetConfig(preset: 'voice' | 'instrument' | 'wide' | 'minimal'): NoiseFilterConfig {\n    switch (preset) {\n      case 'voice':\n        return {\n          highpassFreq: 80,   // Remove breath noise\n          lowpassFreq: 800,   // Focus on vocal fundamentals\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.7,\n          lowpassQ: 0.7,\n          notchQ: 10.0,\n          useFilters: true\n        };\n        \n      case 'instrument':\n        return {\n          highpassFreq: 40,   // Preserve low fundamentals\n          lowpassFreq: 2000,  // Allow more harmonics\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.5,\n          lowpassQ: 0.5,\n          notchQ: 8.0,\n          useFilters: true\n        };\n        \n      case 'wide':\n        return {\n          highpassFreq: 20,   // Minimal low cut\n          lowpassFreq: 5000,  // Minimal high cut\n          notchFreq: 60,      // Only power line filtering\n          highpassQ: 0.3,\n          lowpassQ: 0.3,\n          notchQ: 5.0,\n          useFilters: true\n        };\n        \n      case 'minimal':\n        return {\n          highpassFreq: 60,   // Just power line region\n          lowpassFreq: 8000,  // Very high cutoff\n          notchFreq: 60,      // Power line only\n          highpassQ: 0.1,\n          lowpassQ: 0.1,\n          notchQ: 3.0,\n          useFilters: true\n        };\n        \n      default:\n        return {\n          useFilters: false\n        };\n    }\n  }\n}","import { Logger } from \"../utils/Logger\";\n/**\n * MicrophoneLifecycleManager - Page transition and idle detection microphone control\n * \n * Manages microphone lifecycle across page transitions, idle periods, and redirects\n * Implements reference counting for safe resource management\n * Handles SSR compatibility and automatic recovery\n */\n\nimport type { \n  MediaStreamResources, \n  HealthStatus,\n  LifecycleEvents,\n  StateChangeCallback,\n  ErrorCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\n\nexport class MicrophoneLifecycleManager {\n  private audioManager: AudioManager;\n  private refCount = 0;\n  private isActive = false;\n  private lastHealthCheck: HealthStatus | null = null;\n  \n  // Monitoring intervals\n  private healthCheckInterval: number | null = null;\n  private idleCheckInterval: number | null = null;\n  private visibilityCheckInterval: number | null = null;\n  \n  // State tracking\n  private lastActivityTime = Date.now();\n  private isPageVisible = true;\n  private isUserActive = true;\n  private autoRecoveryAttempts = 0;\n  private maxAutoRecoveryAttempts = 3;\n  private lastRecoveryTime = 0;\n  private recoveryResetInterval = 30000; // 30秒後にリカバリー回数をリセット\n  \n  // Event listeners storage for cleanup\n  private eventListeners = new Map<string, EventListener>();\n  \n  // Configuration\n  private config = {\n    healthCheckIntervalMs: 5000,     // 5 seconds\n    idleTimeoutMs: 300000,           // 5 minutes\n    autoRecoveryDelayMs: 2000,       // 2 seconds\n    maxIdleTimeBeforeRelease: 600000 // 10 minutes\n  };\n  \n  // Callbacks\n  private callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  } = {};\n\n  constructor(audioManager: AudioManager, config: Partial<typeof MicrophoneLifecycleManager.prototype.config> = {}) {\n    this.audioManager = audioManager;\n    this.config = { ...this.config, ...config };\n    \n    // SSR compatibility check\n    if (typeof window === 'undefined') {\n      Logger.log('🔇 [MicrophoneLifecycleManager] SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.setupEventListeners();\n  }\n\n  /**\n   * Set callback functions\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Acquire microphone resources (with reference counting)\n   */\n  async acquire(): Promise<MediaStreamResources> {\n    this.refCount++;\n    \n    Logger.log(`🎤 [MicrophoneLifecycleManager] Acquiring resources (refCount: ${this.refCount})`);\n    \n    try {\n      // Initialize AudioManager if not already active\n      if (!this.isActive) {\n        const resources = await this.audioManager.initialize();\n        this.isActive = true;\n        this.lastActivityTime = Date.now();\n        this.autoRecoveryAttempts = 0;\n        \n        // Start monitoring\n        this.startHealthMonitoring();\n        this.startIdleMonitoring();\n        this.startVisibilityMonitoring();\n        \n        this.callbacks.onStateChange?.('active');\n        \n        Logger.log('🟢 [MicrophoneLifecycleManager] Microphone activated');\n        return resources;\n      }\n      \n      // Already active - just update activity and return existing resources\n      this.updateActivity();\n      const resources = await this.audioManager.initialize();\n      return resources;\n      \n    } catch (error) {\n      console.error('❌ [MicrophoneLifecycleManager] Failed to acquire resources:', error);\n      this.refCount = Math.max(0, this.refCount - 1);\n      this.callbacks.onError?.(error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Release microphone resources (with reference counting)\n   */\n  release(): void {\n    this.refCount = Math.max(0, this.refCount - 1);\n    \n    Logger.log(`📉 [MicrophoneLifecycleManager] Releasing resources (refCount: ${this.refCount})`);\n    \n    // Only stop monitoring and cleanup when no references remain\n    if (this.refCount <= 0) {\n      this.stopAllMonitoring();\n      this.audioManager.release();\n      this.isActive = false;\n      \n      this.callbacks.onStateChange?.('inactive');\n      \n      Logger.log('🔴 [MicrophoneLifecycleManager] Microphone deactivated');\n    }\n  }\n\n  /**\n   * Force release all resources (emergency cleanup)\n   */\n  forceRelease(): void {\n    Logger.log('🚨 [MicrophoneLifecycleManager] Force release - cleaning up all resources');\n    \n    this.refCount = 0;\n    this.stopAllMonitoring();\n    this.audioManager.forceCleanup();\n    this.isActive = false;\n    \n    this.callbacks.onStateChange?.('inactive');\n  }\n\n  /**\n   * Setup page lifecycle event listeners\n   */\n  private setupEventListeners(): void {\n    // Page visibility change\n    const visibilityChangeHandler = () => {\n      this.isPageVisible = !document.hidden;\n      this.handleVisibilityChange();\n    };\n    \n    // User activity tracking\n    const activityHandler = () => {\n      this.updateActivity();\n    };\n    \n    // Page unload / beforeunload\n    const unloadHandler = () => {\n      this.forceRelease();\n    };\n    \n    // Page focus / blur\n    const focusHandler = () => {\n      this.isPageVisible = true;\n      this.handleVisibilityChange();\n    };\n    \n    const blurHandler = () => {\n      this.isPageVisible = false;\n      this.handleVisibilityChange();\n    };\n    \n    // Add event listeners\n    document.addEventListener('visibilitychange', visibilityChangeHandler);\n    document.addEventListener('mousemove', activityHandler);\n    document.addEventListener('keydown', activityHandler);\n    document.addEventListener('click', activityHandler);\n    document.addEventListener('scroll', activityHandler);\n    document.addEventListener('touchstart', activityHandler);\n    window.addEventListener('beforeunload', unloadHandler);\n    window.addEventListener('unload', unloadHandler);\n    window.addEventListener('focus', focusHandler);\n    window.addEventListener('blur', blurHandler);\n    \n    // Store references for cleanup\n    this.eventListeners.set('visibilitychange', visibilityChangeHandler);\n    this.eventListeners.set('mousemove', activityHandler);\n    this.eventListeners.set('keydown', activityHandler);\n    this.eventListeners.set('click', activityHandler);\n    this.eventListeners.set('scroll', activityHandler);\n    this.eventListeners.set('touchstart', activityHandler);\n    this.eventListeners.set('beforeunload', unloadHandler);\n    this.eventListeners.set('unload', unloadHandler);\n    this.eventListeners.set('focus', focusHandler);\n    this.eventListeners.set('blur', blurHandler);\n    \n    Logger.log('👂 [MicrophoneLifecycleManager] Event listeners setup complete');\n  }\n\n  /**\n   * Handle page visibility changes\n   */\n  private handleVisibilityChange(): void {\n    if (!this.isActive) return;\n    \n    if (this.isPageVisible) {\n      Logger.log('👁️ [MicrophoneLifecycleManager] Page became visible - resuming monitoring');\n      this.updateActivity();\n      \n      // Check microphone health after page becomes visible\n      setTimeout(() => {\n        this.performHealthCheck();\n      }, 1000);\n      \n    } else {\n      Logger.log('🙈 [MicrophoneLifecycleManager] Page became hidden - reducing monitoring frequency');\n      \n      // Consider releasing resources if page stays hidden for too long\n      setTimeout(() => {\n        if (!this.isPageVisible && this.isActive) {\n          const timeSinceActivity = Date.now() - this.lastActivityTime;\n          if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n            Logger.log('⏰ [MicrophoneLifecycleManager] Long inactivity detected - releasing resources');\n            this.forceRelease();\n          }\n        }\n      }, this.config.maxIdleTimeBeforeRelease);\n    }\n  }\n\n  /**\n   * Update user activity timestamp\n   */\n  private updateActivity(): void {\n    this.lastActivityTime = Date.now();\n    this.isUserActive = true;\n  }\n\n  /**\n   * Start health monitoring\n   */\n  private startHealthMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n    \n    this.healthCheckInterval = window.setInterval(() => {\n      this.performHealthCheck();\n    }, this.config.healthCheckIntervalMs);\n    \n    Logger.log(`💓 [MicrophoneLifecycleManager] Health monitoring started (${this.config.healthCheckIntervalMs}ms interval)`);\n  }\n\n  /**\n   * Start idle monitoring\n   */\n  private startIdleMonitoring(): void {\n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n    }\n    \n    this.idleCheckInterval = window.setInterval(() => {\n      this.checkIdleTimeout();\n    }, 30000); // Check every 30 seconds\n    \n    Logger.log('😴 [MicrophoneLifecycleManager] Idle monitoring started');\n  }\n\n  /**\n   * Start visibility monitoring\n   */\n  private startVisibilityMonitoring(): void {\n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n    }\n    \n    this.visibilityCheckInterval = window.setInterval(() => {\n      // Additional visibility-based health checks\n      if (this.isPageVisible && this.isActive) {\n        this.performHealthCheck();\n      }\n    }, 10000); // Check every 10 seconds when visible\n    \n    Logger.log('👁️ [MicrophoneLifecycleManager] Visibility monitoring started');\n  }\n\n  /**\n   * Perform comprehensive health check\n   */\n  private async performHealthCheck(): Promise<void> {\n    if (!this.isActive) return;\n    \n    try {\n      const healthStatus = this.audioManager.checkMediaStreamHealth();\n      this.lastHealthCheck = healthStatus;\n      \n      if (!healthStatus.healthy) {\n        console.warn('⚠️ [MicrophoneLifecycleManager] Unhealthy microphone state detected:', healthStatus);\n        \n        // 🚨 自動リカバリー頻度制限: 30秒間隔でリセット\n        const currentTime = Date.now();\n        if (currentTime - this.lastRecoveryTime > this.recoveryResetInterval) {\n          this.autoRecoveryAttempts = 0; // リセット\n          console.log('🔄 [MicrophoneLifecycleManager] リカバリー回数をリセット');\n        }\n        \n        // Attempt automatic recovery\n        if (this.autoRecoveryAttempts < this.maxAutoRecoveryAttempts) {\n          this.autoRecoveryAttempts++;\n          this.lastRecoveryTime = currentTime;\n          \n          Logger.log(`🔧 [MicrophoneLifecycleManager] Attempting automatic recovery (${this.autoRecoveryAttempts}/${this.maxAutoRecoveryAttempts})`);\n          \n          setTimeout(async () => {\n            try {\n              await this.audioManager.initialize(); // This will trigger re-initialization if needed\n              Logger.log('✅ [MicrophoneLifecycleManager] Automatic recovery successful');\n              \n              // Dispatch success event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoverySuccess', {});\n              \n            } catch (error) {\n              console.error('❌ [MicrophoneLifecycleManager] Automatic recovery failed:', error);\n              // 🚨 エラーコールバック呼び出しを制限（既にMicrophoneControllerで制限済み）\n              this.callbacks.onError?.(error as Error);\n              \n              // Dispatch failure event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoveryFailed', { error });\n            }\n          }, this.config.autoRecoveryDelayMs);\n          \n        } else {\n          console.error('❌ [MicrophoneLifecycleManager] Maximum recovery attempts reached - manual intervention required');\n          // 🚨 最大試行回数到達時のエラー表示も制限\n          const maxAttemptsError = new Error('Microphone health check failed - maximum recovery attempts exceeded');\n          this.callbacks.onError?.(maxAttemptsError);\n        }\n      }\n      \n    } catch (error) {\n      console.error('❌ [MicrophoneLifecycleManager] Health check failed:', error);\n      this.callbacks.onError?.(error as Error);\n    }\n  }\n\n  /**\n   * Check for idle timeout\n   */\n  private checkIdleTimeout(): void {\n    if (!this.isActive) return;\n    \n    const timeSinceActivity = Date.now() - this.lastActivityTime;\n    const isIdle = timeSinceActivity > this.config.idleTimeoutMs;\n    \n    if (isIdle && this.isUserActive) {\n      Logger.log('😴 [MicrophoneLifecycleManager] User idle detected');\n      this.isUserActive = false;\n      \n      // Optionally reduce monitoring frequency during idle\n      // But don't automatically release - let the application decide\n    }\n    \n    // Check for extreme idle (auto-release)\n    if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n      Logger.log('⏰ [MicrophoneLifecycleManager] Extreme idle detected - auto-releasing resources');\n      this.forceRelease();\n    }\n  }\n\n  /**\n   * Stop all monitoring intervals\n   */\n  private stopAllMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n    }\n    \n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n      this.idleCheckInterval = null;\n    }\n    \n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n      this.visibilityCheckInterval = null;\n    }\n    \n    Logger.log('⏹️ [MicrophoneLifecycleManager] All monitoring stopped');\n  }\n\n  /**\n   * Dispatch custom event\n   */\n  private dispatchCustomEvent(eventName: keyof LifecycleEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Get current status\n   */\n  getStatus() {\n    return {\n      refCount: this.refCount,\n      isActive: this.isActive,\n      isPageVisible: this.isPageVisible,\n      isUserActive: this.isUserActive,\n      lastActivityTime: this.lastActivityTime,\n      timeSinceActivity: Date.now() - this.lastActivityTime,\n      autoRecoveryAttempts: this.autoRecoveryAttempts,\n      lastHealthCheck: this.lastHealthCheck,\n      audioManagerStatus: this.audioManager.getStatus()\n    };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Restart monitoring with new intervals if active\n    if (this.isActive) {\n      this.stopAllMonitoring();\n      this.startHealthMonitoring();\n      this.startIdleMonitoring();\n      this.startVisibilityMonitoring();\n    }\n    \n    Logger.log('🔧 [MicrophoneLifecycleManager] Configuration updated:', newConfig);\n  }\n\n  /**\n   * Cleanup and destroy\n   */\n  destroy(): void {\n    Logger.log('🗑️ [MicrophoneLifecycleManager] Destroying lifecycle manager');\n    \n    // Stop all monitoring\n    this.stopAllMonitoring();\n    \n    // Force release resources\n    this.forceRelease();\n    \n    // Remove event listeners\n    this.eventListeners.forEach((listener, eventName) => {\n      if (eventName.includes('window:')) {\n        window.removeEventListener(eventName.replace('window:', ''), listener);\n      } else {\n        document.removeEventListener(eventName, listener);\n      }\n    });\n    this.eventListeners.clear();\n    \n    Logger.log('✅ [MicrophoneLifecycleManager] Cleanup complete');\n  }\n}","import { Logger } from '../utils/Logger';\n/**\n * ErrorNotificationSystem - Framework-agnostic Error Display and Notification\n * \n * Provides error messaging functionality that can be displayed on any page\n * Includes different notification types, auto-hide functionality, and priority management\n * Framework-agnostic implementation using vanilla DOM manipulation\n */\n\nimport type { NotificationConfig, NotificationElement } from '../types';\n\nexport class ErrorNotificationSystem {\n  private container: HTMLElement | null = null;\n  private notifications = new Map<string, NotificationElement>();\n  private notificationCounter = 0;\n  private defaultDuration = 5000; // 5秒自動非表示\n  private maxNotifications = 3; // 最大3個まで表示\n  \n  // CSS classes for styling\n  private cssClasses = {\n    container: 'pitchpro-notifications',\n    notification: 'pitchpro-notification',\n    title: 'pitchpro-notification-title',\n    message: 'pitchpro-notification-message',\n    details: 'pitchpro-notification-details',\n    solution: 'pitchpro-notification-solution',\n    closeButton: 'pitchpro-notification-close',\n    error: 'pitchpro-notification-error',\n    warning: 'pitchpro-notification-warning',\n    success: 'pitchpro-notification-success',\n    info: 'pitchpro-notification-info',\n    high: 'pitchpro-notification-priority-high',\n    medium: 'pitchpro-notification-priority-medium',\n    low: 'pitchpro-notification-priority-low'\n  };\n\n  constructor() {\n    // SSR compatibility\n    if (typeof window === 'undefined') {\n      Logger.log('🔇 [ErrorNotificationSystem] SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.initializeContainer();\n    this.injectCSS();\n  }\n\n  /**\n   * Create and inject the notification container into the DOM\n   */\n  private initializeContainer(): void {\n    // Check if container already exists\n    let existingContainer = document.querySelector(`.${this.cssClasses.container}`);\n    \n    if (!existingContainer) {\n      this.container = document.createElement('div');\n      this.container.className = this.cssClasses.container;\n      this.container.setAttribute('role', 'alert');\n      this.container.setAttribute('aria-live', 'polite');\n      \n      // Add to document body\n      document.body.appendChild(this.container);\n      \n      Logger.log('📋 [ErrorNotificationSystem] Notification container created');\n    } else {\n      this.container = existingContainer as HTMLElement;\n      Logger.log('📋 [ErrorNotificationSystem] Using existing notification container');\n    }\n  }\n\n  /**\n   * Inject default CSS styles\n   */\n  private injectCSS(): void {\n    // Check if styles already exist\n    if (document.querySelector('#pitchpro-notifications-styles')) {\n      return;\n    }\n\n    const css = `\n      .${this.cssClasses.container} {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 10000;\n        max-width: 400px;\n        pointer-events: none;\n      }\n\n      .${this.cssClasses.notification} {\n        background: white;\n        border: 1px solid #e2e8f0;\n        border-radius: 8px;\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n        margin-bottom: 12px;\n        padding: 16px;\n        pointer-events: auto;\n        position: relative;\n        animation: slideIn 0.3s ease-out;\n        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;\n      }\n\n      .${this.cssClasses.notification}.removing {\n        opacity: 0;\n        transform: translateX(100%);\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateX(100%);\n        }\n        to {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.error} {\n        border-left: 4px solid #ef4444;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.warning} {\n        border-left: 4px solid #f59e0b;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.success} {\n        border-left: 4px solid #10b981;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.info} {\n        border-left: 4px solid #3b82f6;\n      }\n\n      .${this.cssClasses.title} {\n        font-weight: 600;\n        font-size: 14px;\n        color: #1f2937;\n        margin-bottom: 4px;\n        padding-right: 24px;\n      }\n\n      .${this.cssClasses.message} {\n        font-size: 13px;\n        color: #4b5563;\n        margin-bottom: 8px;\n        line-height: 1.4;\n      }\n\n      .${this.cssClasses.details} {\n        font-size: 12px;\n        color: #6b7280;\n        margin-bottom: 8px;\n        padding-left: 12px;\n        border-left: 2px solid #e5e7eb;\n      }\n\n      .${this.cssClasses.details} li {\n        margin-bottom: 2px;\n      }\n\n      .${this.cssClasses.solution} {\n        font-size: 12px;\n        color: #059669;\n        background: #ecfdf5;\n        border: 1px solid #a7f3d0;\n        border-radius: 4px;\n        padding: 8px;\n        margin-top: 8px;\n      }\n\n      .${this.cssClasses.closeButton} {\n        position: absolute;\n        top: 12px;\n        right: 12px;\n        background: none;\n        border: none;\n        font-size: 18px;\n        color: #9ca3af;\n        cursor: pointer;\n        padding: 0;\n        width: 20px;\n        height: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .${this.cssClasses.closeButton}:hover {\n        color: #6b7280;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.high} {\n        border-width: 2px;\n        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      }\n\n      @media (max-width: 640px) {\n        .${this.cssClasses.container} {\n          top: 10px;\n          left: 10px;\n          right: 10px;\n          max-width: none;\n        }\n      }\n    `;\n\n    const style = document.createElement('style');\n    style.id = 'pitchpro-notifications-styles';\n    style.textContent = css;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Show a notification\n   */\n  show(config: NotificationConfig): string {\n    if (!this.container) {\n      console.warn('⚠️ [ErrorNotificationSystem] Container not available - cannot show notification');\n      return '';\n    }\n\n    // Generate unique ID\n    const id = `notification-${++this.notificationCounter}`;\n\n    // Create notification element\n    const notification = this.createNotificationElement(id, config);\n\n    // Remove oldest notification if we're at the limit\n    if (this.notifications.size >= this.maxNotifications) {\n      const oldestId = Array.from(this.notifications.keys())[0];\n      this.remove(oldestId);\n    }\n\n    // Add to container and tracking\n    this.container.appendChild(notification);\n    this.notifications.set(id, notification);\n\n    // Auto-hide if configured\n    if (config.autoHide !== false) {\n      const duration = config.duration || this.defaultDuration;\n      setTimeout(() => {\n        this.remove(id);\n      }, duration);\n    }\n\n    Logger.log(`📢 [ErrorNotificationSystem] Notification shown: ${config.type} - ${config.title}`);\n    \n    return id;\n  }\n\n  /**\n   * Create notification DOM element\n   */\n  private createNotificationElement(id: string, config: NotificationConfig): NotificationElement {\n    const notification = document.createElement('div') as unknown as NotificationElement;\n    notification.className = [\n      this.cssClasses.notification,\n      this.cssClasses[config.type],\n      config.priority ? this.cssClasses[config.priority] : ''\n    ].filter(Boolean).join(' ');\n    notification['data-notification-id'] = id;\n\n    // Title\n    const title = document.createElement('div');\n    title.className = this.cssClasses.title;\n    title.textContent = config.title;\n    notification.appendChild(title);\n\n    // Message\n    const message = document.createElement('div');\n    message.className = this.cssClasses.message;\n    message.textContent = config.message;\n    notification.appendChild(message);\n\n    // Details (if provided)\n    if (config.details && config.details.length > 0) {\n      const details = document.createElement('div');\n      details.className = this.cssClasses.details;\n      \n      const list = document.createElement('ul');\n      list.style.margin = '0';\n      list.style.paddingLeft = '16px';\n      \n      config.details.forEach(detail => {\n        const item = document.createElement('li');\n        item.textContent = detail;\n        list.appendChild(item);\n      });\n      \n      details.appendChild(list);\n      notification.appendChild(details);\n    }\n\n    // Solution (if provided)\n    if (config.solution) {\n      const solution = document.createElement('div');\n      solution.className = this.cssClasses.solution;\n      solution.textContent = config.solution;\n      notification.appendChild(solution);\n    }\n\n    // Close button\n    const closeButton = document.createElement('button');\n    closeButton.className = this.cssClasses.closeButton;\n    closeButton.innerHTML = '×';\n    closeButton.setAttribute('aria-label', 'Close notification');\n    closeButton.addEventListener('click', () => {\n      this.remove(id);\n    });\n    notification.appendChild(closeButton);\n\n    return notification;\n  }\n\n  /**\n   * Remove a specific notification\n   */\n  remove(id: string): void {\n    const notification = this.notifications.get(id);\n    if (!notification) {\n      return;\n    }\n\n    // Add removing class for exit animation\n    notification.classList.add('removing');\n\n    // Remove from DOM after animation\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification);\n      }\n      this.notifications.delete(id);\n    }, 300);\n\n    Logger.log(`🗑️ [ErrorNotificationSystem] Notification removed: ${id}`);\n  }\n\n  /**\n   * Clear all notifications\n   */\n  clearAll(): void {\n    const ids = Array.from(this.notifications.keys());\n    ids.forEach(id => this.remove(id));\n    \n    Logger.log('🧹 [ErrorNotificationSystem] All notifications cleared');\n  }\n\n  /**\n   * Show error notification (convenience method)\n   */\n  showError(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'error',\n      title,\n      message,\n      priority: 'high',\n      autoHide: false, // Errors should be manually dismissed\n      ...options\n    });\n  }\n\n  /**\n   * Show warning notification (convenience method)\n   */\n  showWarning(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'warning',\n      title,\n      message,\n      priority: 'medium',\n      duration: 8000, // Longer duration for warnings\n      ...options\n    });\n  }\n\n  /**\n   * Show success notification (convenience method)\n   */\n  showSuccess(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'success',\n      title,\n      message,\n      priority: 'low',\n      duration: 3000, // Shorter duration for success messages\n      ...options\n    });\n  }\n\n  /**\n   * Show info notification (convenience method)\n   */\n  showInfo(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'info',\n      title,\n      message,\n      priority: 'low',\n      ...options\n    });\n  }\n\n  /**\n   * Show microphone error with common solutions\n   */\n  showMicrophoneError(error: Error, context?: string): string {\n    // Common solutions for microphone errors\n    // const commonSolutions = [\n    //   'ブラウザにマイクアクセスを許可してください',\n    //   'マイクが他のアプリケーションで使用されていないか確認してください',\n    //   'ブラウザを再起動して再度お試しください',\n    //   'デバイスの設定でマイクが有効になっていることを確認してください'\n    // ];\n\n    return this.showError(\n      'マイクロフォンエラー',\n      `マイクの初期化に失敗しました: ${error.message}`,\n      {\n        details: context ? [`発生箇所: ${context}`, `エラー詳細: ${error.name}`] : [`エラー詳細: ${error.name}`],\n        solution: 'マイクの設定を確認し、ブラウザにマイクアクセスを許可してください。',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show audio context error\n   */\n  showAudioContextError(error: Error): string {\n    return this.showError(\n      'オーディオシステムエラー',\n      `音声処理システムの初期化に失敗しました: ${error.message}`,\n      {\n        details: [\n          'ブラウザがWeb Audio APIに対応していない可能性があります',\n          'または、音声デバイスに問題が発生しています'\n        ],\n        solution: 'ブラウザを最新版に更新するか、別のブラウザで試してください。',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show network/loading error\n   */\n  showLoadingError(resource: string, error: Error): string {\n    return this.showError(\n      '読み込みエラー',\n      `${resource}の読み込みに失敗しました: ${error.message}`,\n      {\n        details: [\n          'ネットワーク接続を確認してください',\n          'ブラウザのキャッシュをクリアしてみてください'\n        ],\n        solution: 'ページを再読み込みするか、しばらく待ってから再度お試しください。',\n        priority: 'medium'\n      }\n    );\n  }\n\n  /**\n   * Get current notification count\n   */\n  getNotificationCount(): number {\n    return this.notifications.size;\n  }\n\n  /**\n   * Get all notification IDs\n   */\n  getNotificationIds(): string[] {\n    return Array.from(this.notifications.keys());\n  }\n\n  /**\n   * Check if a specific notification exists\n   */\n  hasNotification(id: string): boolean {\n    return this.notifications.has(id);\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: {\n    defaultDuration?: number;\n    maxNotifications?: number;\n  }): void {\n    if (config.defaultDuration !== undefined) {\n      this.defaultDuration = config.defaultDuration;\n    }\n    if (config.maxNotifications !== undefined) {\n      this.maxNotifications = config.maxNotifications;\n    }\n    \n    Logger.log('🔧 [ErrorNotificationSystem] Configuration updated:', config);\n  }\n\n  /**\n   * Destroy the notification system\n   */\n  destroy(): void {\n    Logger.log('🗑️ [ErrorNotificationSystem] Destroying notification system');\n    \n    this.clearAll();\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    // Remove injected CSS\n    const styleElement = document.querySelector('#pitchpro-notifications-styles');\n    if (styleElement && styleElement.parentNode) {\n      styleElement.parentNode.removeChild(styleElement);\n    }\n    \n    this.container = null;\n    this.notifications.clear();\n    \n    Logger.log('✅ [ErrorNotificationSystem] Cleanup complete');\n  }\n}","import { Logger } from \"../utils/Logger\";\n/**\n * MicrophoneController - High-level Microphone Management Interface\n * \n * Combines AudioManager, LifecycleManager, and ErrorNotificationSystem\n * Provides a simple, unified API for microphone control with error handling\n * Includes device detection, sensitivity management, and automatic recovery\n */\n\nimport type { \n  DeviceSpecs,\n  MediaStreamResources,\n  MicrophoneControllerEvents,\n  ErrorCallback,\n  StateChangeCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\nimport { MicrophoneLifecycleManager } from './MicrophoneLifecycleManager';\nimport { ErrorNotificationSystem } from './ErrorNotificationSystem';\n\nexport class MicrophoneController {\n  private audioManager: AudioManager;\n  private lifecycleManager: MicrophoneLifecycleManager;\n  private errorSystem: ErrorNotificationSystem;\n  \n  // State management\n  private currentState: 'uninitialized' | 'initializing' | 'ready' | 'active' | 'error' = 'uninitialized';\n  private isPermissionGranted = false;\n  private lastError: Error | null = null;\n  \n  // Event handling\n  private eventCallbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  } = {};\n  \n  // Device specifications\n  private deviceSpecs: DeviceSpecs | null = null;\n\n  constructor(\n    audioManagerConfig = {},\n    lifecycleConfig = {},\n    showErrorNotifications = true\n  ) {\n    this.audioManager = new AudioManager(audioManagerConfig);\n    this.lifecycleManager = new MicrophoneLifecycleManager(this.audioManager, lifecycleConfig);\n    this.errorSystem = showErrorNotifications ? new ErrorNotificationSystem() : null as any;\n    \n    this.setupEventHandlers();\n    this.detectDevice();\n  }\n\n  /**\n   * Set callback functions for events\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  }): void {\n    this.eventCallbacks = { ...this.eventCallbacks, ...callbacks };\n  }\n\n  /**\n   * Setup internal event handlers\n   */\n  private setupEventHandlers(): void {\n    // Lifecycle manager callbacks\n    this.lifecycleManager.setCallbacks({\n      onStateChange: (state) => {\n        this.updateState(state === 'active' ? 'active' : 'ready');\n      },\n      onError: (error) => {\n        this.handleError(error, 'lifecycle');\n      }\n    });\n  }\n\n  /**\n   * Detect device specifications\n   */\n  private detectDevice(): void {\n    this.deviceSpecs = this.audioManager.getPlatformSpecs();\n    Logger.log('📱 [MicrophoneController] Device detected:', this.deviceSpecs);\n    \n    // Notify callback\n    this.eventCallbacks.onDeviceChange?.(this.deviceSpecs);\n    \n    // Dispatch custom event\n    this.dispatchCustomEvent('pitchpro:deviceDetected', { specs: this.deviceSpecs });\n  }\n\n  /**\n   * Initialize microphone access and permissions\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    try {\n      this.updateState('initializing');\n      Logger.log('🎤 [MicrophoneController] Starting initialization');\n\n      // Acquire resources through lifecycle manager\n      const resources = await this.lifecycleManager.acquire();\n      \n      // Update state and permissions\n      this.isPermissionGranted = true;\n      this.updateState('ready');\n      this.lastError = null;\n\n      // Notify permission change\n      this.eventCallbacks.onPermissionChange?.(true);\n      this.dispatchCustomEvent('pitchpro:microphoneGranted', { stream: resources.mediaStream });\n\n      Logger.log('✅ [MicrophoneController] Initialization complete');\n      return resources;\n\n    } catch (error) {\n      console.error('❌ [MicrophoneController] Initialization failed:', error);\n      \n      this.isPermissionGranted = false;\n      this.handleError(error as Error, 'initialization');\n      \n      // Notify permission denial\n      this.eventCallbacks.onPermissionChange?.(false);\n      this.dispatchCustomEvent('pitchpro:microphoneDenied', { error: error as Error });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Request microphone permission (alias for initialize)\n   */\n  async requestPermission(): Promise<boolean> {\n    try {\n      await this.initialize();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Check if microphone permission is granted\n   */\n  async checkPermissionStatus(): Promise<'granted' | 'denied' | 'prompt'> {\n    if (typeof navigator === 'undefined' || !navigator.mediaDevices) {\n      return 'denied';\n    }\n\n    try {\n      const result = await navigator.permissions.query({ name: 'microphone' as PermissionName });\n      return result.state as 'granted' | 'denied' | 'prompt';\n    } catch {\n      // Fallback: try to access microphone with minimal constraints\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: { \n            echoCancellation: false,\n            noiseSuppression: false,\n            autoGainControl: false\n          } \n        });\n        stream.getTracks().forEach(track => track.stop());\n        return 'granted';\n      } catch {\n        return 'denied';\n      }\n    }\n  }\n\n  /**\n   * Stop microphone and release resources\n   */\n  stop(): void {\n    Logger.log('🛑 [MicrophoneController] Stopping microphone');\n    \n    this.lifecycleManager.release();\n    this.updateState('ready');\n    \n    // Dispatch stop event\n    this.dispatchCustomEvent('pitchpro:microphoneStopped', {});\n    \n    Logger.log('✅ [MicrophoneController] Microphone stopped');\n  }\n\n  /**\n   * Force stop with complete cleanup\n   */\n  forceStop(): void {\n    Logger.log('🚨 [MicrophoneController] Force stopping microphone');\n    \n    this.lifecycleManager.forceRelease();\n    this.updateState('uninitialized');\n    this.isPermissionGranted = false;\n    \n    Logger.log('✅ [MicrophoneController] Force stop complete');\n  }\n\n  /**\n   * Set microphone sensitivity\n   */\n  setSensitivity(sensitivity: number): void {\n    const oldSensitivity = this.audioManager.getSensitivity();\n    this.audioManager.setSensitivity(sensitivity);\n    const newSensitivity = this.audioManager.getSensitivity();\n    \n    if (oldSensitivity !== newSensitivity) {\n      Logger.log(`🔧 [MicrophoneController] Sensitivity changed: ${oldSensitivity}x → ${newSensitivity}x`);\n      \n      // Notify callbacks\n      this.eventCallbacks.onSensitivityChange?.(newSensitivity);\n      this.dispatchCustomEvent('pitchpro:sensitivityChanged', { sensitivity: newSensitivity });\n    }\n  }\n\n  /**\n   * Get current microphone sensitivity\n   */\n  getSensitivity(): number {\n    return this.audioManager.getSensitivity();\n  }\n\n  /**\n   * Get device specifications\n   */\n  getDeviceSpecs(): DeviceSpecs | null {\n    return this.deviceSpecs;\n  }\n\n  /**\n   * Get current state\n   */\n  getState(): string {\n    return this.currentState;\n  }\n\n  /**\n   * Check if microphone is active\n   */\n  isActive(): boolean {\n    return this.currentState === 'active';\n  }\n\n  /**\n   * Check if microphone is ready (initialized but not active)\n   */\n  isReady(): boolean {\n    return this.currentState === 'ready';\n  }\n\n  /**\n   * Check if permission is granted\n   */\n  hasPermission(): boolean {\n    return this.isPermissionGranted;\n  }\n\n  /**\n   * Get comprehensive status\n   */\n  getStatus() {\n    return {\n      state: this.currentState,\n      isPermissionGranted: this.isPermissionGranted,\n      isActive: this.isActive(),\n      isReady: this.isReady(),\n      sensitivity: this.getSensitivity(),\n      deviceSpecs: this.deviceSpecs,\n      lastError: this.lastError,\n      audioManagerStatus: this.audioManager.getStatus(),\n      lifecycleStatus: this.lifecycleManager.getStatus()\n    };\n  }\n\n  /**\n   * Perform health check\n   */\n  checkHealth() {\n    return this.audioManager.checkMediaStreamHealth();\n  }\n\n  /**\n   * Test microphone functionality\n   */\n  async testMicrophone(durationMs = 2000): Promise<{\n    success: boolean;\n    volume: number;\n    frequency: number | null;\n    duration: number;\n    error?: Error;\n  }> {\n    const startTime = Date.now();\n    \n    try {\n      // Ensure we have resources\n      if (!this.isReady() && !this.isActive()) {\n        await this.initialize();\n      }\n      \n      // Create temporary analyser for testing\n      const analyser = this.audioManager.createAnalyser('microphone-test', {\n        fftSize: 1024,\n        smoothingTimeConstant: 0.8\n      });\n      \n      // Collect audio data for specified duration\n      let maxVolume = 0;\n      let detectedFrequency: number | null = null as number | null;\n      const endTime = startTime + durationMs;\n      \n      await new Promise<void>((resolve) => {\n        const checkAudio = () => {\n          if (Date.now() >= endTime) {\n            resolve();\n            return;\n          }\n          \n          // Analyze current audio\n          const bufferLength = analyser.fftSize;\n          const dataArray = new Float32Array(bufferLength);\n          analyser.getFloatTimeDomainData(dataArray);\n          \n          // Calculate RMS volume\n          let sum = 0;\n          for (let i = 0; i < bufferLength; i++) {\n            sum += Math.abs(dataArray[i]);\n          }\n          const rms = Math.sqrt(sum / bufferLength);\n          const volume = rms * 100;\n          \n          if (volume > maxVolume) {\n            maxVolume = volume;\n          }\n          \n          // Simple peak detection for frequency\n          if (volume > 5) { // Only check frequency if there's significant volume\n            let maxIndex = 0;\n            let maxValue = 0;\n            for (let i = 1; i < bufferLength / 2; i++) {\n              const value = Math.abs(dataArray[i]);\n              if (value > maxValue) {\n                maxValue = value;\n                maxIndex = i;\n              }\n            }\n            if (maxIndex > 0) {\n              detectedFrequency = (maxIndex * 44100) / bufferLength;\n            }\n          }\n          \n          requestAnimationFrame(checkAudio);\n        };\n        \n        checkAudio();\n      });\n      \n      // Cleanup test analyser\n      this.audioManager.removeAnalyser('microphone-test');\n      \n      const duration = Date.now() - startTime;\n      const success = maxVolume > 1; // Consider success if we detected some audio\n      \n      const frequencyDisplay = detectedFrequency ? detectedFrequency.toFixed(0) : 'none';\n      Logger.log(`🧪 [MicrophoneController] Microphone test complete: volume=${maxVolume.toFixed(2)}, frequency=${frequencyDisplay}, duration=${duration}ms`);\n      \n      return {\n        success,\n        volume: maxVolume,\n        frequency: detectedFrequency,\n        duration\n      };\n      \n    } catch (error) {\n      const duration = Date.now() - startTime;\n      console.error('❌ [MicrophoneController] Microphone test failed:', error);\n      \n      return {\n        success: false,\n        volume: 0,\n        frequency: null,\n        duration,\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * Update internal state and notify\n   */\n  private updateState(newState: typeof this.currentState): void {\n    if (this.currentState !== newState) {\n      const oldState = this.currentState;\n      this.currentState = newState;\n      \n      Logger.log(`🔄 [MicrophoneController] State changed: ${oldState} → ${newState}`);\n      \n      // Notify callback\n      this.eventCallbacks.onStateChange?.(newState);\n    }\n  }\n\n  // エラー表示防止用: 同一エラーの連続表示を防ぐ\n  private lastErrorId: string | null = null;\n  private errorCooldownTime = 3000; // 3秒間同一エラーの再表示を防ぐ\n  private lastErrorTime = 0;\n\n  /**\n   * Handle errors with notification system (ループ防止改良版)\n   */\n  private handleError(error: Error, context: string): void {\n    console.error(`❌ [MicrophoneController] Error in ${context}:`, error);\n    \n    this.lastError = error;\n    this.updateState('error');\n    \n    // 🚨 エラーループ防止: 同一エラーの連続表示を制限\n    const currentTime = Date.now();\n    const errorId = `${context}:${error.message}`;\n    const isSameError = this.lastErrorId === errorId;\n    const isInCooldown = currentTime - this.lastErrorTime < this.errorCooldownTime;\n    \n    if (isSameError && isInCooldown) {\n      console.warn(`🔄 [MicrophoneController] エラー表示をスキップ（クールダウン中）: ${errorId}`);\n      // コールバックのみ実行（UI表示なし）\n      this.eventCallbacks.onError?.(error);\n      return;\n    }\n    \n    // エラー表示許可: 新しいエラーまたはクールダウン期間終了\n    this.lastErrorId = errorId;\n    this.lastErrorTime = currentTime;\n    \n    // Show error notification if system is available\n    if (this.errorSystem) {\n      if (context === 'initialization' || context === 'lifecycle') {\n        console.log(`📢 [MicrophoneController] マイクエラー表示: ${context} - ${error.message}`);\n        this.errorSystem.showMicrophoneError(error, context);\n      } else {\n        console.log(`📢 [MicrophoneController] 一般エラー表示: ${context} - ${error.message}`);\n        this.errorSystem.showError(\n          'マイクエラー',\n          `${context}でエラーが発生しました: ${error.message}`,\n          { priority: 'medium' }\n        );\n      }\n    }\n    \n    // Notify error callback\n    this.eventCallbacks.onError?.(error);\n  }\n\n  /**\n   * Dispatch custom DOM event\n   */\n  private dispatchCustomEvent(eventName: keyof MicrophoneControllerEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Add event listener for microphone events\n   */\n  addEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.addEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Remove event listener for microphone events\n   */\n  removeEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.removeEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Cleanup and destroy all resources\n   */\n  destroy(): void {\n    Logger.log('🗑️ [MicrophoneController] Destroying controller');\n    \n    // Force stop to ensure cleanup\n    this.forceStop();\n    \n    // Destroy managed components\n    this.lifecycleManager.destroy();\n    this.errorSystem?.destroy();\n    \n    // Clear callbacks\n    this.eventCallbacks = {};\n    \n    // Reset state\n    this.currentState = 'uninitialized';\n    this.isPermissionGranted = false;\n    this.lastError = null;\n    this.deviceSpecs = null;\n    \n    Logger.log('✅ [MicrophoneController] Cleanup complete');\n  }\n}","/**\n * HarmonicCorrection - Advanced harmonic detection and correction\n * \n * Provides sophisticated harmonic analysis and correction algorithms\n * Handles complex harmonic patterns, subharmonics, and frequency drift\n */\n\nimport type { HarmonicCorrectionResult } from '../types';\n\nexport class HarmonicCorrection {\n  private historyBuffer: Array<{\n    frequency: number;\n    confidence: number;\n    timestamp: number;\n    volume: number;\n  }> = [];\n  \n  private config = {\n    historyWindowMs: 2000,\n    minConfidenceThreshold: 0.6,\n    harmonicToleranceCents: 30,\n    maxHarmonicNumber: 8,\n    stabilityWeight: 0.7,\n    volumeWeight: 0.3\n  };\n\n  constructor(config: Partial<typeof HarmonicCorrection.prototype.config> = {}) {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Apply harmonic correction to detected frequency\n   */\n  correctFrequency(frequency: number, volume: number = 1.0): HarmonicCorrectionResult {\n    const now = Date.now();\n    \n    // Clean old history\n    this.cleanHistory(now);\n    \n    // Add current detection to history\n    this.addToHistory(frequency, volume, now);\n    \n    // Analyze for harmonic patterns\n    const analysis = this.analyzeHarmonics(frequency);\n    \n    // Apply correction if confidence is high enough\n    if (analysis.confidence >= this.config.minConfidenceThreshold) {\n      return {\n        correctedFreq: analysis.correctedFrequency,\n        confidence: analysis.confidence,\n        correctionApplied: Math.abs(analysis.correctedFrequency - frequency) > 1.0\n      };\n    }\n    \n    return {\n      correctedFreq: frequency,\n      confidence: analysis.confidence,\n      correctionApplied: false\n    };\n  }\n\n  /**\n   * Analyze frequency for harmonic patterns\n   */\n  private analyzeHarmonics(frequency: number): {\n    correctedFrequency: number;\n    confidence: number;\n    harmonicNumber?: number;\n    fundamentalCandidate?: number;\n  } {\n    if (this.historyBuffer.length < 3) {\n      return {\n        correctedFrequency: frequency,\n        confidence: 0.1\n      };\n    }\n\n    // Get recent stable frequencies\n    const recentFrequencies = this.historyBuffer\n      .slice(-10)\n      .map(entry => entry.frequency);\n\n    // Look for fundamental candidates\n    const fundamentalCandidates = this.findFundamentalCandidates(frequency);\n    \n    let bestCandidate = {\n      frequency,\n      confidence: 0.1,\n      harmonicNumber: 1\n    };\n\n    // Test each fundamental candidate\n    for (const candidate of fundamentalCandidates) {\n      const confidence = this.calculateHarmonicConfidence(\n        candidate.fundamental,\n        candidate.harmonicNumber,\n        recentFrequencies\n      );\n      \n      if (confidence > bestCandidate.confidence) {\n        bestCandidate = {\n          frequency: candidate.fundamental,\n          confidence,\n          harmonicNumber: candidate.harmonicNumber\n        };\n      }\n    }\n\n    // If we found a likely harmonic, correct to fundamental\n    if (bestCandidate.harmonicNumber > 1 && bestCandidate.confidence > this.config.minConfidenceThreshold) {\n      return {\n        correctedFrequency: bestCandidate.frequency,\n        confidence: bestCandidate.confidence,\n        harmonicNumber: bestCandidate.harmonicNumber,\n        fundamentalCandidate: bestCandidate.frequency\n      };\n    }\n\n    return {\n      correctedFrequency: frequency,\n      confidence: bestCandidate.confidence\n    };\n  }\n\n  /**\n   * Find potential fundamental frequencies for a given detected frequency\n   */\n  private findFundamentalCandidates(frequency: number): Array<{\n    fundamental: number;\n    harmonicNumber: number;\n    likelihood: number;\n  }> {\n    const candidates: Array<{\n      fundamental: number;\n      harmonicNumber: number;\n      likelihood: number;\n    }> = [];\n\n    // Check if this could be a harmonic of a lower fundamental\n    for (let harmonicNum = 2; harmonicNum <= this.config.maxHarmonicNumber; harmonicNum++) {\n      const fundamental = frequency / harmonicNum;\n      \n      // Skip if fundamental is too low for human voice\n      if (fundamental < 60) continue;\n      \n      // Calculate likelihood based on how close it is to exact harmonic ratio\n      const exactHarmonic = fundamental * harmonicNum;\n      const centDeviation = Math.abs(1200 * Math.log2(frequency / exactHarmonic));\n      \n      if (centDeviation <= this.config.harmonicToleranceCents) {\n        const likelihood = 1.0 - (centDeviation / this.config.harmonicToleranceCents);\n        candidates.push({\n          fundamental,\n          harmonicNumber: harmonicNum,\n          likelihood\n        });\n      }\n    }\n\n    // Also consider the frequency itself as fundamental (no correction)\n    candidates.push({\n      fundamental: frequency,\n      harmonicNumber: 1,\n      likelihood: 0.5\n    });\n\n    return candidates.sort((a, b) => b.likelihood - a.likelihood);\n  }\n\n  /**\n   * Calculate confidence that a frequency pattern represents a harmonic series\n   */\n  private calculateHarmonicConfidence(\n    fundamental: number,\n    _harmonicNumber: number,\n    recentFrequencies: number[]\n  ): number {\n    if (recentFrequencies.length < 3) return 0.1;\n\n    let totalConfidence = 0;\n    let validMeasurements = 0;\n\n    // Check how well recent frequencies fit the harmonic pattern\n    for (const freq of recentFrequencies) {\n      // Find the closest harmonic to this frequency\n      let closestHarmonicNum = Math.round(freq / fundamental);\n      if (closestHarmonicNum < 1) closestHarmonicNum = 1;\n      \n      const expectedFreq = fundamental * closestHarmonicNum;\n      const centDeviation = Math.abs(1200 * Math.log2(freq / expectedFreq));\n      \n      if (centDeviation <= this.config.harmonicToleranceCents * 2) {\n        const confidence = 1.0 - (centDeviation / (this.config.harmonicToleranceCents * 2));\n        totalConfidence += confidence;\n        validMeasurements++;\n      }\n    }\n\n    if (validMeasurements === 0) return 0.1;\n\n    // Average confidence, weighted by stability\n    const avgConfidence = totalConfidence / validMeasurements;\n    \n    // Add stability bonus if we have consistent measurements\n    const stabilityBonus = Math.min(validMeasurements / recentFrequencies.length, 1.0);\n    \n    return Math.min(avgConfidence * this.config.stabilityWeight + stabilityBonus * (1 - this.config.stabilityWeight), 1.0);\n  }\n\n  /**\n   * Add frequency detection to history\n   */\n  private addToHistory(frequency: number, volume: number, timestamp: number): void {\n    // Calculate confidence based on volume and stability\n    const volumeConfidence = Math.min(volume, 1.0);\n    let stabilityConfidence = 0.5;\n    \n    if (this.historyBuffer.length > 0) {\n      const lastFreq = this.historyBuffer[this.historyBuffer.length - 1].frequency;\n      const freqRatio = Math.max(frequency, lastFreq) / Math.min(frequency, lastFreq);\n      stabilityConfidence = Math.max(0, 1.0 - (freqRatio - 1.0) * 5); // Penalty for large jumps\n    }\n    \n    const confidence = volumeConfidence * this.config.volumeWeight + \n                      stabilityConfidence * (1 - this.config.volumeWeight);\n    \n    this.historyBuffer.push({\n      frequency,\n      confidence,\n      timestamp,\n      volume\n    });\n    \n    // Limit buffer size\n    if (this.historyBuffer.length > 50) {\n      this.historyBuffer.shift();\n    }\n  }\n\n  /**\n   * Clean old entries from history\n   */\n  private cleanHistory(currentTime: number): void {\n    const cutoffTime = currentTime - this.config.historyWindowMs;\n    this.historyBuffer = this.historyBuffer.filter(entry => entry.timestamp > cutoffTime);\n  }\n\n  /**\n   * Reset correction history\n   */\n  resetHistory(): void {\n    this.historyBuffer = [];\n  }\n\n  /**\n   * Get current analysis statistics\n   */\n  getAnalysisStats(): {\n    historyLength: number;\n    averageConfidence: number;\n    frequencyRange: { min: number; max: number } | null;\n    stabilityScore: number;\n  } {\n    if (this.historyBuffer.length === 0) {\n      return {\n        historyLength: 0,\n        averageConfidence: 0,\n        frequencyRange: null,\n        stabilityScore: 0\n      };\n    }\n\n    const frequencies = this.historyBuffer.map(entry => entry.frequency);\n    const confidences = this.historyBuffer.map(entry => entry.confidence);\n    \n    const avgConfidence = confidences.reduce((sum, conf) => sum + conf, 0) / confidences.length;\n    const minFreq = Math.min(...frequencies);\n    const maxFreq = Math.max(...frequencies);\n    \n    // Calculate stability as inverse of coefficient of variation\n    const mean = frequencies.reduce((sum, freq) => sum + freq, 0) / frequencies.length;\n    const variance = frequencies.reduce((sum, freq) => sum + Math.pow(freq - mean, 2), 0) / frequencies.length;\n    const coefficientOfVariation = Math.sqrt(variance) / mean;\n    const stabilityScore = Math.max(0, 1.0 - coefficientOfVariation);\n\n    return {\n      historyLength: this.historyBuffer.length,\n      averageConfidence: avgConfidence,\n      frequencyRange: { min: minFreq, max: maxFreq },\n      stabilityScore\n    };\n  }\n\n  /**\n   * Configure correction parameters\n   */\n  updateConfig(newConfig: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n}","/**\n * TypeScript type definitions for PitchPro Audio Processing\n */\n\n// AudioManager types\nexport interface AudioManagerConfig {\n  sampleRate?: number;\n  channelCount?: number;\n  echoCancellation?: boolean;\n  noiseSuppression?: boolean;\n  autoGainControl?: boolean;\n  latency?: number;\n}\n\n// PitchDetector types\nexport interface PitchDetectorConfig {\n  fftSize?: number;\n  smoothing?: number;\n  clarityThreshold?: number;\n  minVolumeAbsolute?: number;\n}\n\nexport interface PitchDetectionResult {\n  frequency: number;\n  note: string;\n  clarity: number;\n  volume: number;\n  cents?: number;\n}\n\n// NoiseFilter types\nexport interface NoiseFilterConfig {\n  highpassFreq?: number;\n  lowpassFreq?: number;\n  notchFreq?: number;\n  highpassQ?: number;\n  lowpassQ?: number;\n  notchQ?: number;\n  useFilters?: boolean;\n}\n\n// HarmonicCorrection types\nexport interface HarmonicCorrectionResult {\n  correctedFreq: number;\n  confidence: number;\n  correctionApplied: boolean;\n}\n\n// ErrorNotification types\nexport interface NotificationConfig {\n  type: 'error' | 'warning' | 'success' | 'info';\n  title: string;\n  message: string;\n  details?: string[];\n  solution?: string;\n  autoHide?: boolean;\n  duration?: number;\n  priority?: 'low' | 'medium' | 'high';\n}\n\nexport interface NotificationElement extends HTMLElement {\n  'data-notification-id': string;\n}\n\n// Music theory types\nexport interface MusicalNote {\n  name: string;\n  octave: number;\n  midi: number;\n  frequency: number;\n}\n\nexport interface MusicalInterval {\n  name: string;\n  semitones: number;\n  cents: number;\n  ratio: number;\n}\n\n// Voice analysis types\nexport interface VoiceAnalysis {\n  quality: VoiceQuality;\n  stability: number;\n  recommendations: string[];\n}\n\nexport const VoiceQuality = {\n  EXCELLENT: 'excellent' as const,\n  GOOD: 'good' as const,\n  FAIR: 'fair' as const,\n  POOR: 'poor' as const\n};\n\nexport type VoiceQuality = typeof VoiceQuality[keyof typeof VoiceQuality];\n\nexport const AccuracyLevel = {\n  PERFECT: 'perfect' as const,\n  EXCELLENT: 'excellent' as const,\n  GOOD: 'good' as const,\n  FAIR: 'fair' as const,\n  POOR: 'poor' as const\n};\n\nexport type AccuracyLevel = typeof AccuracyLevel[keyof typeof AccuracyLevel];\n\nexport interface AccuracyResult {\n  accuracy: AccuracyLevel;\n  centsOff: number;\n  score: number;\n}\n\n// Device detection types\nexport interface DeviceSpecs {\n  deviceType: 'iPhone' | 'iPad' | 'PC';\n  isIOS: boolean;\n  sensitivity: number;\n  noiseGate: number;\n  divisor: number;\n  gainCompensation: number;\n  noiseThreshold: number;\n  smoothingFactor: number;\n}\n\n// Lifecycle management types\nexport interface MediaStreamResources {\n  audioContext: AudioContext;\n  mediaStream: MediaStream;\n  sourceNode: MediaStreamAudioSourceNode;\n}\n\nexport interface HealthStatus {\n  mediaStreamActive: boolean;\n  audioContextState: string;\n  trackStates: TrackState[];\n  healthy: boolean;\n  refCount?: number;\n}\n\nexport interface TrackState {\n  kind: string;\n  enabled: boolean;\n  readyState: MediaStreamTrackState;\n  muted: boolean;\n}\n\n// Event types\nexport interface MicrophoneControllerEvents {\n  'pitchpro:microphoneGranted': CustomEvent<{ stream: MediaStream }>;\n  'pitchpro:microphoneDenied': CustomEvent<{ error: Error }>;\n  'pitchpro:microphoneStopped': CustomEvent;\n  'pitchpro:sensitivityChanged': CustomEvent<{ sensitivity: number }>;\n  'pitchpro:noiseGateChanged': CustomEvent<{ threshold: number }>;\n  'pitchpro:deviceDetected': CustomEvent<{ specs: DeviceSpecs }>;\n}\n\nexport interface LifecycleEvents {\n  'pitchpro:lifecycle:trackEnded': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:trackMuted': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:trackUnmuted': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:autoRecoverySuccess': CustomEvent;\n  'pitchpro:lifecycle:autoRecoveryFailed': CustomEvent<{ error: Error }>;\n}\n\n// Callback types\nexport type PitchCallback = (result: PitchDetectionResult) => void;\nexport type ErrorCallback = (error: Error) => void;\nexport type StateChangeCallback = (state: string) => void;","/**\n * VoiceAnalyzer - Advanced voice quality and analysis\n * \n * Analyzes voice characteristics, stability, and provides recommendations\n * Includes vibrato detection, breathiness analysis, and vocal health indicators\n */\n\nimport type { VoiceAnalysis } from '../types';\nimport { VoiceQuality } from '../types';\n\nexport class VoiceAnalyzer {\n  private analysisBuffer: Array<{\n    frequency: number;\n    volume: number;\n    clarity: number;\n    timestamp: number;\n  }> = [];\n  \n  private config = {\n    analysisWindowMs: 3000,\n    stabilityThresholdCents: 20,\n    vibratoMinRate: 4.5,\n    vibratoMaxRate: 7.5,\n    vibratoMinDepthCents: 50,\n    breathinessThreshold: 0.3,\n    minAnalysisTime: 1000\n  };\n\n  constructor(config: Partial<typeof VoiceAnalyzer.prototype.config> = {}) {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Analyze voice characteristics from audio data\n   */\n  analyzeVoice(\n    frequency: number, \n    volume: number, \n    clarity: number,\n    spectralData?: Float32Array\n  ): VoiceAnalysis {\n    const timestamp = Date.now();\n    \n    // Add to analysis buffer\n    this.addToBuffer(frequency, volume, clarity, timestamp);\n    \n    // Clean old data\n    this.cleanBuffer(timestamp);\n    \n    // Perform comprehensive analysis\n    const stability = this.calculateStability();\n    const vibrato = this.detectVibrato();\n    const breathiness = spectralData ? this.analyzeBreathiness(spectralData) : null;\n    const consistency = this.analyzeConsistency();\n    \n    // Calculate overall quality\n    const quality = this.calculateOverallQuality(stability, vibrato, breathiness, consistency);\n    \n    // Generate recommendations\n    const recommendations = this.generateRecommendations(\n      quality,\n      stability,\n      vibrato,\n      breathiness,\n      consistency\n    );\n\n    return {\n      quality,\n      stability,\n      recommendations\n    };\n  }\n\n  /**\n   * Calculate pitch stability\n   */\n  private calculateStability(): number {\n    if (this.analysisBuffer.length < 10) {\n      return 0.5; // Neutral stability for insufficient data\n    }\n\n    const frequencies = this.analysisBuffer.map(entry => entry.frequency);\n    const validFrequencies = frequencies.filter(freq => freq > 0);\n    \n    if (validFrequencies.length < 5) {\n      return 0.3; // Low stability for sparse data\n    }\n\n    // Calculate coefficient of variation\n    const mean = validFrequencies.reduce((sum, freq) => sum + freq, 0) / validFrequencies.length;\n    const variance = validFrequencies.reduce((sum, freq) => sum + Math.pow(freq - mean, 2), 0) / validFrequencies.length;\n    const standardDeviation = Math.sqrt(variance);\n    const coefficientOfVariation = standardDeviation / mean;\n    \n    // Convert to cents for musical relevance\n    const deviationCents = coefficientOfVariation * 1200;\n    \n    // Map to 0-1 stability score\n    return Math.max(0, Math.min(1, 1 - (deviationCents / 100)));\n  }\n\n  /**\n   * Detect vibrato characteristics\n   */\n  private detectVibrato(): {\n    detected: boolean;\n    rate: number | null;\n    depth: number | null;\n    regularity: number | null;\n  } {\n    if (this.analysisBuffer.length < 30) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    const frequencies = this.analysisBuffer.map(entry => entry.frequency).filter(f => f > 0);\n    if (frequencies.length < 20) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    // Smooth the frequency data\n    const smoothed = this.smoothFrequencies(frequencies, 3);\n    \n    // Find peaks and valleys\n    const extrema = this.findExtrema(smoothed);\n    \n    if (extrema.length < 4) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    // Calculate vibrato rate (cycles per second)\n    const timeSpan = (this.analysisBuffer[this.analysisBuffer.length - 1].timestamp - \n                     this.analysisBuffer[0].timestamp) / 1000;\n    const cycles = extrema.length / 2; // pairs of peaks and valleys\n    const rate = cycles / timeSpan;\n\n    // Calculate vibrato depth (in cents)\n    const depths = [];\n    for (let i = 0; i < extrema.length - 1; i++) {\n      const freq1 = smoothed[extrema[i].index];\n      const freq2 = smoothed[extrema[i + 1].index];\n      if (freq1 > 0 && freq2 > 0) {\n        const cents = Math.abs(1200 * Math.log2(freq1 / freq2));\n        depths.push(cents);\n      }\n    }\n\n    const averageDepth = depths.length > 0 ? \n      depths.reduce((sum, depth) => sum + depth, 0) / depths.length : 0;\n\n    // Calculate regularity (consistency of periods)\n    const periods = [];\n    for (let i = 0; i < extrema.length - 2; i += 2) {\n      const period = extrema[i + 2].index - extrema[i].index;\n      periods.push(period);\n    }\n\n    let regularity = 0;\n    if (periods.length > 2) {\n      const periodMean = periods.reduce((sum, p) => sum + p, 0) / periods.length;\n      const periodVariance = periods.reduce((sum, p) => sum + Math.pow(p - periodMean, 2), 0) / periods.length;\n      regularity = Math.max(0, 1 - (Math.sqrt(periodVariance) / periodMean));\n    }\n\n    // Determine if vibrato is detected\n    const detected = rate >= this.config.vibratoMinRate && \n                    rate <= this.config.vibratoMaxRate &&\n                    averageDepth >= this.config.vibratoMinDepthCents;\n\n    return {\n      detected,\n      rate: rate,\n      depth: averageDepth,\n      regularity\n    };\n  }\n\n  /**\n   * Analyze breathiness from spectral data\n   */\n  private analyzeBreathiness(spectralData: Float32Array): number {\n    // Analyze high-frequency noise content relative to fundamental\n    const fundamentalBin = Math.floor(spectralData.length * 0.1); // Rough estimate\n    const noiseBins = spectralData.slice(Math.floor(spectralData.length * 0.7)); // High frequency content\n    \n    const fundamentalEnergy = spectralData.slice(0, fundamentalBin * 2)\n      .reduce((sum, val) => sum + val * val, 0);\n    \n    const noiseEnergy = noiseBins.reduce((sum, val) => sum + val * val, 0);\n    \n    if (fundamentalEnergy === 0) return 1.0; // Maximum breathiness if no fundamental\n    \n    const noiseRatio = noiseEnergy / fundamentalEnergy;\n    return Math.min(1.0, noiseRatio);\n  }\n\n  /**\n   * Analyze consistency over time\n   */\n  private analyzeConsistency(): number {\n    if (this.analysisBuffer.length < 10) return 0.5;\n\n    const volumes = this.analysisBuffer.map(entry => entry.volume);\n    const clarities = this.analysisBuffer.map(entry => entry.clarity);\n    \n    // Calculate consistency metrics\n    const volumeConsistency = this.calculateConsistencyScore(volumes);\n    const clarityConsistency = this.calculateConsistencyScore(clarities);\n    \n    return (volumeConsistency + clarityConsistency) / 2;\n  }\n\n  /**\n   * Calculate consistency score for an array of values\n   */\n  private calculateConsistencyScore(values: number[]): number {\n    if (values.length < 3) return 0.5;\n\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n    const coefficientOfVariation = Math.sqrt(variance) / (mean || 1);\n    \n    return Math.max(0, Math.min(1, 1 - coefficientOfVariation));\n  }\n\n  /**\n   * Calculate overall voice quality\n   */\n  private calculateOverallQuality(\n    stability: number,\n    vibrato: any,\n    breathiness: number | null,\n    consistency: number\n  ): VoiceQuality {\n    // Weight factors for different aspects\n    const weights = {\n      stability: 0.4,\n      consistency: 0.3,\n      breathiness: 0.2,\n      vibrato: 0.1\n    };\n\n    let score = stability * weights.stability + consistency * weights.consistency;\n    \n    // Breathiness penalty (lower is better for breathiness)\n    if (breathiness !== null) {\n      score += (1 - Math.min(breathiness, 1)) * weights.breathiness;\n    } else {\n      score += 0.7 * weights.breathiness; // Neutral if no data\n    }\n    \n    // Vibrato bonus for controlled vibrato\n    if (vibrato.detected && vibrato.regularity > 0.7) {\n      score += 0.9 * weights.vibrato;\n    } else if (vibrato.detected) {\n      score += 0.6 * weights.vibrato;\n    } else {\n      score += 0.5 * weights.vibrato;\n    }\n\n    // Map score to quality levels\n    if (score >= 0.85) return VoiceQuality.EXCELLENT;\n    if (score >= 0.7) return VoiceQuality.GOOD;\n    if (score >= 0.5) return VoiceQuality.FAIR;\n    return VoiceQuality.POOR;\n  }\n\n  /**\n   * Generate recommendations based on analysis\n   */\n  private generateRecommendations(\n    quality: VoiceQuality,\n    stability: number,\n    vibrato: any,\n    breathiness: number | null,\n    consistency: number\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // Stability recommendations\n    if (stability < 0.5) {\n      recommendations.push('音程の安定性を向上させるため、ゆっくりとした発声練習を行ってください');\n      recommendations.push('腹式呼吸を意識して、息の流れを一定に保つ練習をしてください');\n    } else if (stability < 0.7) {\n      recommendations.push('音程の微調整練習で、より正確なピッチコントロールを目指しましょう');\n    }\n\n    // Consistency recommendations\n    if (consistency < 0.5) {\n      recommendations.push('音量と音質の一貫性を保つため、定期的な発声練習を継続してください');\n      recommendations.push('録音を聞き返して、自分の声の特徴を把握しましょう');\n    }\n\n    // Breathiness recommendations\n    if (breathiness !== null && breathiness > 0.6) {\n      recommendations.push('声の息漏れが気になります。発声時の喉の締まりを意識してください');\n      recommendations.push('ハミング練習で、クリアな声質を目指しましょう');\n    }\n\n    // Vibrato recommendations\n    if (vibrato.detected) {\n      if (vibrato.regularity < 0.5) {\n        recommendations.push('ビブラートの規則性を改善するため、メトロノームに合わせた練習をしてください');\n      } else if (vibrato.rate > 7.5) {\n        recommendations.push('ビブラートの速度が速すぎます。よりゆったりとしたビブラートを練習してください');\n      }\n    } else if (quality === VoiceQuality.GOOD || quality === VoiceQuality.EXCELLENT) {\n      recommendations.push('美しいビブラートの習得に挑戦してみましょう');\n    }\n\n    // General recommendations based on quality\n    if (quality === VoiceQuality.POOR) {\n      recommendations.push('基礎的な発声練習から始めることをお勧めします');\n      recommendations.push('専門的な指導を受けることを検討してください');\n    } else if (quality === VoiceQuality.EXCELLENT) {\n      recommendations.push('素晴らしい声質です。この状態を維持する練習を続けてください');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Smooth frequency data using moving average\n   */\n  private smoothFrequencies(frequencies: number[], windowSize: number): number[] {\n    const smoothed: number[] = [];\n    \n    for (let i = 0; i < frequencies.length; i++) {\n      let sum = 0;\n      let count = 0;\n      \n      const start = Math.max(0, i - Math.floor(windowSize / 2));\n      const end = Math.min(frequencies.length, i + Math.floor(windowSize / 2) + 1);\n      \n      for (let j = start; j < end; j++) {\n        sum += frequencies[j];\n        count++;\n      }\n      \n      smoothed.push(sum / count);\n    }\n    \n    return smoothed;\n  }\n\n  /**\n   * Find local extrema (peaks and valleys) in frequency data\n   */\n  private findExtrema(data: number[]): Array<{ index: number; value: number; type: 'peak' | 'valley' }> {\n    const extrema: Array<{ index: number; value: number; type: 'peak' | 'valley' }> = [];\n    \n    for (let i = 1; i < data.length - 1; i++) {\n      const prev = data[i - 1];\n      const curr = data[i];\n      const next = data[i + 1];\n      \n      if (curr > prev && curr > next) {\n        extrema.push({ index: i, value: curr, type: 'peak' });\n      } else if (curr < prev && curr < next) {\n        extrema.push({ index: i, value: curr, type: 'valley' });\n      }\n    }\n    \n    return extrema;\n  }\n\n  /**\n   * Add data to analysis buffer\n   */\n  private addToBuffer(frequency: number, volume: number, clarity: number, timestamp: number): void {\n    this.analysisBuffer.push({ frequency, volume, clarity, timestamp });\n    \n    // Limit buffer size\n    if (this.analysisBuffer.length > 200) {\n      this.analysisBuffer.shift();\n    }\n  }\n\n  /**\n   * Clean old data from buffer\n   */\n  private cleanBuffer(currentTime: number): void {\n    const cutoffTime = currentTime - this.config.analysisWindowMs;\n    this.analysisBuffer = this.analysisBuffer.filter(entry => entry.timestamp > cutoffTime);\n  }\n\n  /**\n   * Reset analysis buffer\n   */\n  reset(): void {\n    this.analysisBuffer = [];\n  }\n\n  /**\n   * Get current buffer statistics\n   */\n  getBufferStats(): {\n    entryCount: number;\n    timeSpanMs: number;\n    averageVolume: number;\n    averageClarity: number;\n  } {\n    if (this.analysisBuffer.length === 0) {\n      return { entryCount: 0, timeSpanMs: 0, averageVolume: 0, averageClarity: 0 };\n    }\n\n    const volumes = this.analysisBuffer.map(entry => entry.volume);\n    const clarities = this.analysisBuffer.map(entry => entry.clarity);\n    const timeSpan = this.analysisBuffer[this.analysisBuffer.length - 1].timestamp - this.analysisBuffer[0].timestamp;\n\n    return {\n      entryCount: this.analysisBuffer.length,\n      timeSpanMs: timeSpan,\n      averageVolume: volumes.reduce((sum, vol) => sum + vol, 0) / volumes.length,\n      averageClarity: clarities.reduce((sum, clarity) => sum + clarity, 0) / clarities.length\n    };\n  }\n}","import { Logger } from \"../utils/Logger\";\n/**\n * DeviceDetection - Cross-platform device detection and optimization\n * \n * Detects device types, capabilities, and provides optimized settings\n * Handles iPadOS 13+ detection issues and provides device-specific configurations\n */\n\nimport type { DeviceSpecs } from '../types';\n\nexport class DeviceDetection {\n  private static cachedSpecs: DeviceSpecs | null = null;\n\n  /**\n   * Detect current device and return optimized specifications\n   */\n  static getDeviceSpecs(): DeviceSpecs {\n    // Return cached result if available\n    if (DeviceDetection.cachedSpecs) {\n      return DeviceDetection.cachedSpecs;\n    }\n\n    // SSR compatibility\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return DeviceDetection.getDefaultSpecs();\n    }\n\n    const userAgent = navigator.userAgent;\n    const deviceSpecs = DeviceDetection.analyzeUserAgent(userAgent);\n    \n    // Cache the result\n    DeviceDetection.cachedSpecs = deviceSpecs;\n    \n    Logger.log('📱 [DeviceDetection] Device analysis:', {\n      userAgent: userAgent.substring(0, 100) + '...',\n      deviceType: deviceSpecs.deviceType,\n      isIOS: deviceSpecs.isIOS,\n      sensitivity: deviceSpecs.sensitivity,\n      divisor: deviceSpecs.divisor\n    });\n\n    return deviceSpecs;\n  }\n\n  /**\n   * Analyze user agent string and determine device specifications\n   */\n  private static analyzeUserAgent(userAgent: string): DeviceSpecs {\n    // iOS device detection (including iPadOS 13+ workaround)\n    const isIPhone = /iPhone/.test(userAgent);\n    const isIPad = /iPad/.test(userAgent);\n    \n    // iPadOS 13+ reports as \"Macintosh\" but has touch support\n    const isIPadOS = /Macintosh/.test(userAgent) && 'ontouchend' in document;\n    \n    // Additional iOS detection methods\n    const hasIOSNavigator = /iPad|iPhone|iPod/.test(userAgent);\n    const hasIOSPlatform = /iPad|iPhone|iPod/.test((navigator as any).platform || '');\n    \n    // Combined iOS detection\n    const isIOS = isIPhone || isIPad || isIPadOS || hasIOSNavigator || hasIOSPlatform;\n    \n    // More specific device type detection\n    let deviceType: 'iPhone' | 'iPad' | 'PC' = 'PC';\n    \n    if (isIPhone) {\n      deviceType = 'iPhone';\n    } else if (isIPad || isIPadOS) {\n      deviceType = 'iPad';\n    } else if (isIOS) {\n      // Fallback iOS device - could be iPhone or iPad\n      deviceType = DeviceDetection.detectIOSDeviceType();\n    }\n\n    // Get device-specific optimizations\n    const optimizations = DeviceDetection.getDeviceOptimizations(deviceType, isIOS);\n\n    return {\n      deviceType,\n      isIOS,\n      sensitivity: optimizations.sensitivity,\n      noiseGate: optimizations.noiseGate,\n      divisor: optimizations.divisor,\n      gainCompensation: optimizations.gainCompensation,\n      noiseThreshold: optimizations.noiseThreshold,\n      smoothingFactor: optimizations.smoothingFactor\n    };\n  }\n\n  /**\n   * Detect iOS device type when specific detection fails\n   */\n  private static detectIOSDeviceType(): 'iPhone' | 'iPad' {\n    // Use screen size as a heuristic\n    const screenWidth = window.screen.width;\n    const screenHeight = window.screen.height;\n    const maxDimension = Math.max(screenWidth, screenHeight);\n    const minDimension = Math.min(screenWidth, screenHeight);\n    \n    // iPad generally has larger screens\n    // iPhone 6 Plus and newer have screens around 414x736 or similar\n    // iPad screens are typically 768+ in at least one dimension\n    if (maxDimension >= 768 || (maxDimension >= 700 && minDimension >= 500)) {\n      return 'iPad';\n    }\n    \n    return 'iPhone';\n  }\n\n  /**\n   * Get device-specific optimization parameters\n   */\n  private static getDeviceOptimizations(deviceType: 'iPhone' | 'iPad' | 'PC', _isIOS: boolean) {\n    switch (deviceType) {\n      case 'iPad':\n        return {\n          sensitivity: 7.0,        // High sensitivity for iPad microphones\n          noiseGate: 0.01,         // Low noise gate\n          divisor: 4.0,            // Volume calculation divisor\n          gainCompensation: 1.5,   // Gain compensation for low-frequency cut\n          noiseThreshold: 12,      // Noise threshold for silence detection\n          smoothingFactor: 0.2     // Smoothing factor\n        };\n        \n      case 'iPhone':\n        return {\n          sensitivity: 3.0,        // Medium-high sensitivity for iPhone\n          noiseGate: 0.015,        // Medium noise gate\n          divisor: 4.0,            // Volume calculation divisor\n          gainCompensation: 1.5,   // Gain compensation\n          noiseThreshold: 12,      // Noise threshold\n          smoothingFactor: 0.2     // Smoothing factor\n        };\n        \n      case 'PC':\n      default:\n        return {\n          sensitivity: 1.0,        // Standard sensitivity for PC\n          noiseGate: 0.02,         // Higher noise gate for PC microphones\n          divisor: 6.0,            // Different volume calculation for PC\n          gainCompensation: 1.0,   // No additional gain compensation needed\n          noiseThreshold: 15,      // Higher noise threshold\n          smoothingFactor: 0.2     // Standard smoothing\n        };\n    }\n  }\n\n  /**\n   * Get default specifications for SSR or fallback\n   */\n  private static getDefaultSpecs(): DeviceSpecs {\n    return {\n      deviceType: 'PC',\n      isIOS: false,\n      sensitivity: 1.0,\n      noiseGate: 0.02,\n      divisor: 6.0,\n      gainCompensation: 1.0,\n      noiseThreshold: 15,\n      smoothingFactor: 0.2\n    };\n  }\n\n  /**\n   * Check if device supports Web Audio API\n   */\n  static supportsWebAudio(): boolean {\n    return typeof window !== 'undefined' && \n           (typeof window.AudioContext !== 'undefined' || typeof (window as any).webkitAudioContext !== 'undefined');\n  }\n\n  /**\n   * Check if device supports MediaDevices API\n   */\n  static supportsMediaDevices(): boolean {\n    return typeof navigator !== 'undefined' && \n           typeof navigator.mediaDevices !== 'undefined' && \n           typeof navigator.mediaDevices.getUserMedia !== 'undefined';\n  }\n\n  /**\n   * Check if device supports MediaRecorder API\n   */\n  static supportsMediaRecorder(): boolean {\n    return typeof window !== 'undefined' && typeof (window as any).MediaRecorder !== 'undefined';\n  }\n\n  /**\n   * Get comprehensive device capabilities\n   */\n  static getDeviceCapabilities() {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    return {\n      deviceSpecs: specs,\n      webAudioSupport: DeviceDetection.supportsWebAudio(),\n      mediaDevicesSupport: DeviceDetection.supportsMediaDevices(),\n      mediaRecorderSupport: DeviceDetection.supportsMediaRecorder(),\n      touchSupport: 'ontouchend' in document,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Unknown',\n      screenSize: typeof window !== 'undefined' ? {\n        width: window.screen.width,\n        height: window.screen.height,\n        pixelRatio: window.devicePixelRatio\n      } : null,\n      language: typeof navigator !== 'undefined' ? navigator.language : 'Unknown',\n      platform: typeof navigator !== 'undefined' ? (navigator as any).platform || 'Unknown' : 'Unknown'\n    };\n  }\n\n  /**\n   * Check if current device is mobile\n   */\n  static isMobile(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    return specs.isIOS || /Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator?.userAgent || '');\n  }\n\n  /**\n   * Check if current device is tablet\n   */\n  static isTablet(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    if (specs.deviceType === 'iPad') return true;\n    \n    // Android tablet detection\n    const userAgent = navigator?.userAgent || '';\n    return /Android/i.test(userAgent) && !/Mobile/i.test(userAgent);\n  }\n\n  /**\n   * Check if current device is desktop\n   */\n  static isDesktop(): boolean {\n    return !DeviceDetection.isMobile() && !DeviceDetection.isTablet();\n  }\n\n  /**\n   * Get recommended audio constraints for current device\n   */\n  static getOptimalAudioConstraints(): MediaStreamConstraints {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    const baseConstraints: MediaStreamConstraints = {\n      audio: {\n        echoCancellation: false,\n        noiseSuppression: false,\n        autoGainControl: false,\n        sampleRate: 44100,\n        channelCount: 1,\n        sampleSize: 16,\n        // latency: 0.1, // Not supported in MediaTrackConstraints\n        // volume: 1.0, // Not supported in MediaTrackConstraints\n        deviceId: { ideal: 'default' }\n      }\n    };\n\n    // Add iOS-specific optimizations\n    if (specs.isIOS && baseConstraints.audio && typeof baseConstraints.audio === 'object') {\n      (baseConstraints.audio as any) = {\n        ...baseConstraints.audio,\n        // Disable all browser-level processing for iOS\n        googAutoGainControl: false,\n        googNoiseSuppression: false,\n        googEchoCancellation: false,\n        googHighpassFilter: false,\n        googTypingNoiseDetection: false,\n        googBeamforming: false,\n        mozAutoGainControl: false,\n        mozNoiseSuppression: false\n      };\n    }\n\n    return baseConstraints;\n  }\n\n  /**\n   * Clear cached device specifications (for testing)\n   */\n  static clearCache(): void {\n    DeviceDetection.cachedSpecs = null;\n  }\n\n  /**\n   * Get device-specific debugging information\n   */\n  static getDebugInfo() {\n    const capabilities = DeviceDetection.getDeviceCapabilities();\n    \n    return {\n      ...capabilities,\n      detectionMethods: {\n        userAgentIPhone: /iPhone/.test(navigator?.userAgent || ''),\n        userAgentIPad: /iPad/.test(navigator?.userAgent || ''),\n        userAgentMacintosh: /Macintosh/.test(navigator?.userAgent || ''),\n        touchSupport: 'ontouchend' in document,\n        navigatorPlatform: (navigator as any)?.platform || 'Unknown',\n        screenAspectRatio: typeof window !== 'undefined' ? \n          (window.screen.width / window.screen.height).toFixed(2) : 'Unknown'\n      }\n    };\n  }\n}","import { Logger } from '../utils/Logger';\n/**\n * CalibrationSystem - Device-specific audio calibration and optimization\n * \n * Automatically calibrates audio processing parameters based on device capabilities\n * Handles microphone sensitivity, noise characteristics, and frequency response\n */\n\nimport type { DeviceSpecs } from '../types';\nimport { DeviceDetection } from '../utils/DeviceDetection';\n\nexport class CalibrationSystem {\n  private deviceSpecs: DeviceSpecs;\n  private calibrationData: {\n    volumeOffset: number;\n    frequencyResponse: { [frequency: number]: number };\n    noiseProfile: { [frequency: number]: number };\n    optimalSettings: {\n      sensitivity: number;\n      noiseGate: number;\n      filterSettings: any;\n    };\n  } | null = null;\n\n  private isCalibrated = false;\n  private calibrationInProgress = false;\n\n  constructor() {\n    this.deviceSpecs = DeviceDetection.getDeviceSpecs();\n  }\n\n  /**\n   * Perform automatic calibration\n   */\n  async calibrate(audioContext: AudioContext, mediaStream: MediaStream): Promise<{\n    success: boolean;\n    calibrationData: any;\n    recommendedSettings: any;\n    error?: Error;\n  }> {\n    if (this.calibrationInProgress) {\n      throw new Error('Calibration already in progress');\n    }\n\n    this.calibrationInProgress = true;\n\n    try {\n      Logger.log('🎛️ [CalibrationSystem] Starting device calibration');\n\n      // Step 1: Measure background noise\n      const noiseProfile = await this.measureBackgroundNoise(audioContext, mediaStream);\n\n      // Step 2: Calibrate volume levels\n      const volumeCalibration = await this.calibrateVolumeLevels(audioContext, mediaStream);\n\n      // Step 3: Measure frequency response (simplified)\n      const frequencyResponse = await this.measureFrequencyResponse(audioContext, mediaStream);\n\n      // Step 4: Determine optimal settings\n      const optimalSettings = this.calculateOptimalSettings(\n        noiseProfile,\n        volumeCalibration,\n        frequencyResponse\n      );\n\n      this.calibrationData = {\n        volumeOffset: volumeCalibration.offset,\n        frequencyResponse,\n        noiseProfile,\n        optimalSettings\n      };\n\n      this.isCalibrated = true;\n      this.calibrationInProgress = false;\n\n      Logger.log('✅ [CalibrationSystem] Calibration completed successfully');\n\n      return {\n        success: true,\n        calibrationData: this.calibrationData,\n        recommendedSettings: optimalSettings\n      };\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Calibration failed:', error);\n      this.calibrationInProgress = false;\n      \n      return {\n        success: false,\n        calibrationData: null,\n        recommendedSettings: this.getDefaultSettings(),\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * Measure background noise levels\n   */\n  private async measureBackgroundNoise(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 2000\n  ): Promise<{ [frequency: number]: number }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 2048;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Float32Array(bufferLength);\n      const measurements: Float32Array[] = [];\n\n      const startTime = Date.now();\n\n      const measureNoise = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Calculate average noise profile\n          const avgNoise: { [frequency: number]: number } = {};\n          \n          for (let bin = 0; bin < bufferLength; bin++) {\n            const frequency = (bin * audioContext.sampleRate) / (analyser.fftSize);\n            let sum = 0;\n            \n            for (const measurement of measurements) {\n              sum += measurement[bin];\n            }\n            \n            avgNoise[Math.round(frequency)] = sum / measurements.length;\n          }\n\n          source.disconnect();\n          resolve(avgNoise);\n          return;\n        }\n\n        analyser.getFloatFrequencyData(dataArray);\n        measurements.push(new Float32Array(dataArray));\n        \n        setTimeout(measureNoise, 100);\n      };\n\n      measureNoise();\n    });\n  }\n\n  /**\n   * Calibrate volume levels\n   */\n  private async calibrateVolumeLevels(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 3000\n  ): Promise<{ offset: number; range: { min: number; max: number } }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 1024;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.fftSize;\n      const dataArray = new Float32Array(bufferLength);\n      const volumeMeasurements: number[] = [];\n\n      const startTime = Date.now();\n\n      const measureVolume = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Analyze volume distribution\n          volumeMeasurements.sort((a, b) => a - b);\n          \n          const min = volumeMeasurements[0] || 0;\n          const max = volumeMeasurements[volumeMeasurements.length - 1] || 1;\n          const median = volumeMeasurements[Math.floor(volumeMeasurements.length / 2)] || 0.5;\n          \n          // Calculate offset to center dynamic range\n          const targetCenter = 0.3; // Aim for 30% as comfortable speaking level\n          const offset = targetCenter - median;\n\n          source.disconnect();\n          resolve({\n            offset,\n            range: { min, max }\n          });\n          return;\n        }\n\n        analyser.getFloatTimeDomainData(dataArray);\n        \n        // Calculate RMS\n        let sum = 0;\n        for (let i = 0; i < bufferLength; i++) {\n          sum += dataArray[i] * dataArray[i];\n        }\n        const rms = Math.sqrt(sum / bufferLength);\n        volumeMeasurements.push(rms);\n        \n        setTimeout(measureVolume, 50);\n      };\n\n      measureVolume();\n    });\n  }\n\n  /**\n   * Measure frequency response (simplified version)\n   */\n  private async measureFrequencyResponse(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 5000\n  ): Promise<{ [frequency: number]: number }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 4096;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Float32Array(bufferLength);\n      const responseMap: { [frequency: number]: number[] } = {};\n\n      const startTime = Date.now();\n\n      const measureResponse = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Calculate average response for each frequency\n          const avgResponse: { [frequency: number]: number } = {};\n          \n          Object.keys(responseMap).forEach(freqStr => {\n            const frequency = parseInt(freqStr);\n            const measurements = responseMap[frequency];\n            const avg = measurements.reduce((sum, val) => sum + val, 0) / measurements.length;\n            avgResponse[frequency] = avg;\n          });\n\n          source.disconnect();\n          resolve(avgResponse);\n          return;\n        }\n\n        analyser.getFloatFrequencyData(dataArray);\n        \n        // Store measurements for key frequencies\n        for (let bin = 0; bin < bufferLength; bin++) {\n          const frequency = Math.round((bin * audioContext.sampleRate) / (analyser.fftSize));\n          \n          // Focus on vocal range\n          if (frequency >= 80 && frequency <= 1000) {\n            if (!responseMap[frequency]) {\n              responseMap[frequency] = [];\n            }\n            responseMap[frequency].push(dataArray[bin]);\n          }\n        }\n        \n        setTimeout(measureResponse, 100);\n      };\n\n      measureResponse();\n    });\n  }\n\n  /**\n   * Calculate optimal settings based on calibration data\n   */\n  private calculateOptimalSettings(\n    noiseProfile: { [frequency: number]: number },\n    volumeCalibration: any,\n    frequencyResponse: { [frequency: number]: number }\n  ): any {\n    const baseSettings = this.getDefaultSettings();\n\n    // Adjust sensitivity based on volume calibration\n    const sensitivityAdjustment = Math.max(0.5, Math.min(2.0, 1.0 - volumeCalibration.offset));\n    const adjustedSensitivity = baseSettings.sensitivity * sensitivityAdjustment;\n\n    // Adjust noise gate based on background noise\n    const noiseFrequencies = Object.keys(noiseProfile).map(f => parseInt(f));\n    const vocalRangeNoise = noiseFrequencies\n      .filter(f => f >= 100 && f <= 800)\n      .map(f => noiseProfile[f]);\n    \n    const avgNoise = vocalRangeNoise.length > 0 ? \n      vocalRangeNoise.reduce((sum, val) => sum + val, 0) / vocalRangeNoise.length : -60;\n    \n    const noiseGateAdjustment = Math.max(-20, avgNoise + 10); // 10dB above average noise\n    const adjustedNoiseGate = Math.max(baseSettings.noiseGate, Math.abs(noiseGateAdjustment) / 1000);\n\n    // Analyze frequency response for filter adjustments\n    const frequencyKeys = Object.keys(frequencyResponse).map(f => parseInt(f)).sort((a, b) => a - b);\n    const responseLevels = frequencyKeys.map(f => frequencyResponse[f]);\n    \n    // Simple frequency response correction\n    const lowFreqResponse = responseLevels.slice(0, Math.floor(responseLevels.length * 0.3));\n    const midFreqResponse = responseLevels.slice(\n      Math.floor(responseLevels.length * 0.3),\n      Math.floor(responseLevels.length * 0.7)\n    );\n    const highFreqResponse = responseLevels.slice(Math.floor(responseLevels.length * 0.7));\n\n    const lowAvg = lowFreqResponse.reduce((sum, val) => sum + val, 0) / lowFreqResponse.length;\n    const midAvg = midFreqResponse.reduce((sum, val) => sum + val, 0) / midFreqResponse.length;\n    const highAvg = highFreqResponse.reduce((sum, val) => sum + val, 0) / highFreqResponse.length;\n\n    return {\n      sensitivity: Math.round(adjustedSensitivity * 10) / 10,\n      noiseGate: Math.round(adjustedNoiseGate * 1000) / 1000,\n      volumeOffset: volumeCalibration.offset,\n      filterSettings: {\n        highpassFreq: lowAvg < (midAvg - 5) ? 100 : 80, // Stronger highpass if low freq is weak\n        lowpassFreq: highAvg > (midAvg + 3) ? 600 : 800, // Lower cutoff if high freq is strong\n        notchFreq: 60, // Standard power line frequency\n        highpassQ: 0.7,\n        lowpassQ: 0.7,\n        notchQ: 10.0\n      },\n      deviceAdjustments: {\n        lowFreqCompensation: Math.max(0.8, Math.min(1.5, midAvg / (lowAvg || -60))),\n        highFreqCompensation: Math.max(0.8, Math.min(1.2, midAvg / (highAvg || -60)))\n      }\n    };\n  }\n\n  /**\n   * Get default settings for current device\n   */\n  private getDefaultSettings(): any {\n    return {\n      sensitivity: this.deviceSpecs.sensitivity,\n      noiseGate: this.deviceSpecs.noiseGate,\n      volumeOffset: 0,\n      filterSettings: {\n        highpassFreq: 80,\n        lowpassFreq: 800,\n        notchFreq: 60,\n        highpassQ: 0.7,\n        lowpassQ: 0.7,\n        notchQ: 10.0\n      }\n    };\n  }\n\n  /**\n   * Apply calibrated settings to audio processing\n   */\n  applyCalibration(audioProcessor: any): boolean {\n    if (!this.isCalibrated || !this.calibrationData) {\n      console.warn('⚠️ [CalibrationSystem] No calibration data available');\n      return false;\n    }\n\n    try {\n      const settings = this.calibrationData.optimalSettings;\n      \n      // Apply settings to audio processor\n      if (audioProcessor.setSensitivity) {\n        audioProcessor.setSensitivity(settings.sensitivity);\n      }\n      \n      if (audioProcessor.setNoiseGate) {\n        audioProcessor.setNoiseGate(settings.noiseGate);\n      }\n      \n      if (audioProcessor.updateFilterSettings) {\n        audioProcessor.updateFilterSettings(settings.filterSettings);\n      }\n\n      Logger.log('✅ [CalibrationSystem] Calibration applied successfully');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to apply calibration:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get calibration status\n   */\n  getCalibrationStatus(): {\n    isCalibrated: boolean;\n    inProgress: boolean;\n    deviceSpecs: DeviceSpecs;\n    calibrationData: any;\n  } {\n    return {\n      isCalibrated: this.isCalibrated,\n      inProgress: this.calibrationInProgress,\n      deviceSpecs: this.deviceSpecs,\n      calibrationData: this.calibrationData\n    };\n  }\n\n  /**\n   * Reset calibration\n   */\n  reset(): void {\n    this.isCalibrated = false;\n    this.calibrationInProgress = false;\n    this.calibrationData = null;\n    \n    Logger.log('🔄 [CalibrationSystem] Calibration reset');\n  }\n\n  /**\n   * Save calibration data to localStorage\n   */\n  saveCalibration(): boolean {\n    if (!this.isCalibrated || !this.calibrationData) {\n      return false;\n    }\n\n    try {\n      const calibrationKey = `pitchpro_calibration_${this.deviceSpecs.deviceType}`;\n      const dataToSave = {\n        deviceSpecs: this.deviceSpecs,\n        calibrationData: this.calibrationData,\n        timestamp: Date.now()\n      };\n\n      localStorage.setItem(calibrationKey, JSON.stringify(dataToSave));\n      Logger.log('💾 [CalibrationSystem] Calibration saved');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to save calibration:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Load calibration data from localStorage\n   */\n  loadCalibration(): boolean {\n    try {\n      const calibrationKey = `pitchpro_calibration_${this.deviceSpecs.deviceType}`;\n      const savedData = localStorage.getItem(calibrationKey);\n      \n      if (!savedData) {\n        return false;\n      }\n\n      const parsedData = JSON.parse(savedData);\n      \n      // Check if calibration is recent (within 7 days)\n      const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days\n      if (Date.now() - parsedData.timestamp > maxAge) {\n        Logger.log('⏰ [CalibrationSystem] Saved calibration is too old, ignoring');\n        return false;\n      }\n\n      // Verify device compatibility\n      if (parsedData.deviceSpecs.deviceType !== this.deviceSpecs.deviceType) {\n        Logger.log('📱 [CalibrationSystem] Device type mismatch, ignoring saved calibration');\n        return false;\n      }\n\n      this.calibrationData = parsedData.calibrationData;\n      this.isCalibrated = true;\n      \n      Logger.log('📂 [CalibrationSystem] Calibration loaded successfully');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to load calibration:', error);\n      return false;\n    }\n  }\n}","/**\n * FrequencyUtils - Frequency conversion and analysis utilities\n * \n * Provides utilities for converting between frequencies, notes, cents, and MIDI values\n * Includes musical interval calculations and frequency analysis functions\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\n\nexport class FrequencyUtils {\n  // Standard reference frequency (A4 = 440 Hz)\n  static readonly A4_FREQUENCY = 440;\n  static readonly A4_MIDI_NUMBER = 69;\n  \n  // Note names and chromatic scale\n  static readonly NOTE_NAMES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  static readonly FLAT_NOTE_NAMES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\n  \n  // Common musical intervals (in semitones)\n  static readonly INTERVALS = {\n    unison: 0,\n    minorSecond: 1,\n    majorSecond: 2,\n    minorThird: 3,\n    majorThird: 4,\n    perfectFourth: 5,\n    tritone: 6,\n    perfectFifth: 7,\n    minorSixth: 8,\n    majorSixth: 9,\n    minorSeventh: 10,\n    majorSeventh: 11,\n    octave: 12\n  };\n\n  /**\n   * Convert frequency to MIDI note number\n   */\n  static frequencyToMidi(frequency: number): number {\n    if (frequency <= 0) return 0;\n    return Math.round(12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER);\n  }\n\n  /**\n   * Convert MIDI note number to frequency\n   */\n  static midiToFrequency(midiNumber: number): number {\n    return FrequencyUtils.A4_FREQUENCY * Math.pow(2, (midiNumber - FrequencyUtils.A4_MIDI_NUMBER) / 12);\n  }\n\n  /**\n   * Convert frequency to note name with octave\n   */\n  static frequencyToNote(frequency: number, useFlats = false): MusicalNote {\n    if (frequency <= 0) {\n      return {\n        name: '--',\n        octave: 0,\n        midi: 0,\n        frequency: 0\n      };\n    }\n\n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    const noteNames = useFlats ? FrequencyUtils.FLAT_NOTE_NAMES : FrequencyUtils.NOTE_NAMES;\n    \n    const noteIndex = (midiNumber - 12) % 12; // C0 = MIDI 12\n    const octave = Math.floor((midiNumber - 12) / 12);\n    const noteName = noteNames[noteIndex];\n    \n    return {\n      name: noteName + octave,\n      octave,\n      midi: midiNumber,\n      frequency: FrequencyUtils.midiToFrequency(midiNumber)\n    };\n  }\n\n  /**\n   * Convert frequency to cents deviation from nearest semitone\n   */\n  static frequencyToCents(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = 12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER;\n    const nearestMidi = Math.round(midiNumber);\n    const centsDeviation = (midiNumber - nearestMidi) * 100;\n    \n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Convert cents to frequency ratio\n   */\n  static centsToRatio(cents: number): number {\n    return Math.pow(2, cents / 1200);\n  }\n\n  /**\n   * Convert frequency ratio to cents\n   */\n  static ratioToCents(ratio: number): number {\n    if (ratio <= 0) return 0;\n    return Math.round(1200 * Math.log2(ratio));\n  }\n\n  /**\n   * Get the closest note frequency to a given frequency\n   */\n  static getClosestNoteFrequency(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Calculate the interval between two frequencies in semitones\n   */\n  static getInterval(frequency1: number, frequency2: number): number {\n    if (frequency1 <= 0 || frequency2 <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(frequency1);\n    const midi2 = FrequencyUtils.frequencyToMidi(frequency2);\n    \n    return Math.abs(midi2 - midi1);\n  }\n\n  /**\n   * Calculate the interval between two frequencies with direction\n   */\n  static getSignedInterval(fromFrequency: number, toFrequency: number): number {\n    if (fromFrequency <= 0 || toFrequency <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(fromFrequency);\n    const midi2 = FrequencyUtils.frequencyToMidi(toFrequency);\n    \n    return midi2 - midi1;\n  }\n\n  /**\n   * Get musical interval information\n   */\n  static getIntervalInfo(semitones: number): MusicalInterval {\n    const intervalNames = {\n      0: 'Perfect Unison',\n      1: 'Minor Second',\n      2: 'Major Second',\n      3: 'Minor Third',\n      4: 'Major Third',\n      5: 'Perfect Fourth',\n      6: 'Tritone',\n      7: 'Perfect Fifth',\n      8: 'Minor Sixth',\n      9: 'Major Sixth',\n      10: 'Minor Seventh',\n      11: 'Major Seventh',\n      12: 'Perfect Octave'\n    };\n\n    const normalizedSemitones = ((semitones % 12) + 12) % 12;\n    const octaves = Math.floor(semitones / 12);\n    \n    const baseName = intervalNames[normalizedSemitones as keyof typeof intervalNames] || 'Unknown';\n    const name = octaves > 0 ? `${baseName} + ${octaves} octave(s)` : baseName;\n    \n    return {\n      name,\n      semitones,\n      cents: semitones * 100,\n      ratio: Math.pow(2, semitones / 12)\n    };\n  }\n\n  /**\n   * Check if frequency is within human vocal range\n   */\n  static isInVocalRange(frequency: number): boolean {\n    // Human vocal range roughly 80Hz to 1100Hz\n    return frequency >= 80 && frequency <= 1100;\n  }\n\n  /**\n   * Check if frequency is in piano range\n   */\n  static isInPianoRange(frequency: number): boolean {\n    // Piano range A0 (27.5Hz) to C8 (4186Hz)\n    return frequency >= 27.5 && frequency <= 4186;\n  }\n\n  /**\n   * Get frequency range for a specific instrument\n   */\n  static getInstrumentRange(instrument: string): { min: number; max: number } | null {\n    const ranges = {\n      piano: { min: 27.5, max: 4186 },\n      guitar: { min: 82.4, max: 1397 }, // E2 to F6\n      violin: { min: 196, max: 3520 },  // G3 to A7\n      cello: { min: 65.4, max: 1397 },  // C2 to F6\n      voice_bass: { min: 87.3, max: 349 }, // F2 to F4\n      voice_tenor: { min: 131, max: 523 }, // C3 to C5\n      voice_alto: { min: 175, max: 698 },  // F3 to F5\n      voice_soprano: { min: 262, max: 1047 } // C4 to C6\n    };\n\n    return ranges[instrument as keyof typeof ranges] || null;\n  }\n\n  /**\n   * Generate a chromatic scale starting from a base frequency\n   */\n  static generateChromaticScale(baseFrequency: number, octaves = 1): number[] {\n    const frequencies: number[] = [];\n    \n    for (let i = 0; i < 12 * octaves; i++) {\n      const frequency = baseFrequency * Math.pow(2, i / 12);\n      frequencies.push(frequency);\n    }\n    \n    return frequencies;\n  }\n\n  /**\n   * Generate a major scale starting from a base frequency\n   */\n  static generateMajorScale(baseFrequency: number): number[] {\n    // Major scale pattern: W-W-H-W-W-W-H (W=whole step=2 semitones, H=half step=1 semitone)\n    const pattern = [0, 2, 4, 5, 7, 9, 11, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Generate a minor scale starting from a base frequency\n   */\n  static generateMinorScale(baseFrequency: number): number[] {\n    // Natural minor scale pattern: W-H-W-W-H-W-W\n    const pattern = [0, 2, 3, 5, 7, 8, 10, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Find harmonics of a fundamental frequency\n   */\n  static findHarmonics(fundamental: number, maxHarmonic = 8): number[] {\n    const harmonics: number[] = [];\n    \n    for (let i = 1; i <= maxHarmonic; i++) {\n      harmonics.push(fundamental * i);\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Check if a frequency could be a harmonic of a fundamental\n   */\n  static isHarmonic(frequency: number, fundamental: number, tolerance = 0.05): {\n    isHarmonic: boolean;\n    harmonicNumber: number | null;\n    exactFrequency: number | null;\n  } {\n    if (fundamental <= 0 || frequency <= 0) {\n      return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n    }\n\n    const ratio = frequency / fundamental;\n    const nearestInteger = Math.round(ratio);\n    \n    // Check if the ratio is close to an integer (within tolerance)\n    if (nearestInteger >= 1 && Math.abs(ratio - nearestInteger) <= tolerance) {\n      return {\n        isHarmonic: true,\n        harmonicNumber: nearestInteger,\n        exactFrequency: fundamental * nearestInteger\n      };\n    }\n\n    return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n  }\n\n  /**\n   * Calculate the fundamental frequency from a suspected harmonic\n   */\n  static calculateFundamental(harmonicFrequency: number, harmonicNumber: number): number {\n    if (harmonicNumber <= 0 || harmonicFrequency <= 0) return 0;\n    return harmonicFrequency / harmonicNumber;\n  }\n\n  /**\n   * Convert frequency to scientific pitch notation\n   */\n  static frequencyToScientificPitch(frequency: number): string {\n    const note = FrequencyUtils.frequencyToNote(frequency);\n    return note.name;\n  }\n\n  /**\n   * Convert scientific pitch notation to frequency\n   */\n  static scientificPitchToFrequency(scientificPitch: string): number {\n    const match = scientificPitch.match(/^([A-G][#b]?)(-?\\d+)$/);\n    if (!match) return 0;\n\n    const [, noteName, octaveStr] = match;\n    const octave = parseInt(octaveStr, 10);\n    \n    // Convert note name to semitone offset from C\n    let semitoneOffset = 0;\n    const baseNote = noteName[0];\n    const accidental = noteName.slice(1);\n    \n    const baseOffsets: { [key: string]: number } = {\n      'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11\n    };\n    \n    semitoneOffset = baseOffsets[baseNote] || 0;\n    \n    if (accidental === '#') {\n      semitoneOffset += 1;\n    } else if (accidental === 'b') {\n      semitoneOffset -= 1;\n    }\n    \n    // Calculate MIDI number (C4 = MIDI 60)\n    const midiNumber = (octave + 1) * 12 + semitoneOffset;\n    \n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Format frequency display with appropriate precision\n   */\n  static formatFrequency(frequency: number, decimalPlaces = 1): string {\n    if (frequency === 0) return '0 Hz';\n    if (frequency < 0.1) return '<0.1 Hz';\n    if (frequency >= 10000) return `${Math.round(frequency / 1000)}k Hz`;\n    \n    return `${frequency.toFixed(decimalPlaces)} Hz`;\n  }\n\n  /**\n   * Format cents display with sign\n   */\n  static formatCents(cents: number): string {\n    if (cents === 0) return '0¢';\n    const sign = cents > 0 ? '+' : '';\n    return `${sign}${cents}¢`;\n  }\n}","/**\n * MusicTheory - Musical theory utilities and calculations\n * \n * Provides utilities for scales, chords, intervals, and musical analysis\n * Supports various temperaments and tuning systems\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\nimport { FrequencyUtils } from './FrequencyUtils';\n\nexport class MusicTheory {\n  // Scale patterns (in semitones from root)\n  static readonly SCALE_PATTERNS = {\n    major: [0, 2, 4, 5, 7, 9, 11],\n    naturalMinor: [0, 2, 3, 5, 7, 8, 10],\n    harmonicMinor: [0, 2, 3, 5, 7, 8, 11],\n    melodicMinor: [0, 2, 3, 5, 7, 9, 11],\n    dorian: [0, 2, 3, 5, 7, 9, 10],\n    phrygian: [0, 1, 3, 5, 7, 8, 10],\n    lydian: [0, 2, 4, 6, 7, 9, 11],\n    mixolydian: [0, 2, 4, 5, 7, 9, 10],\n    locrian: [0, 1, 3, 5, 6, 8, 10],\n    pentatonicMajor: [0, 2, 4, 7, 9],\n    pentatonicMinor: [0, 3, 5, 7, 10],\n    blues: [0, 3, 5, 6, 7, 10],\n    chromatic: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  };\n\n  // Chord patterns (in semitones from root)\n  static readonly CHORD_PATTERNS = {\n    major: [0, 4, 7],\n    minor: [0, 3, 7],\n    diminished: [0, 3, 6],\n    augmented: [0, 4, 8],\n    sus2: [0, 2, 7],\n    sus4: [0, 5, 7],\n    major7: [0, 4, 7, 11],\n    minor7: [0, 3, 7, 10],\n    dominant7: [0, 4, 7, 10],\n    majorMaj7: [0, 4, 7, 11],\n    halfDiminished7: [0, 3, 6, 10],\n    diminished7: [0, 3, 6, 9],\n    add9: [0, 4, 7, 14], // 14 = 2 + 12 (octave)\n    major9: [0, 4, 7, 11, 14],\n    minor9: [0, 3, 7, 10, 14]\n  };\n\n  // Circle of fifths\n  static readonly CIRCLE_OF_FIFTHS = [\n    'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'Ab', 'Eb', 'Bb', 'F'\n  ];\n\n  // Interval names\n  static readonly INTERVAL_NAMES = {\n    0: 'Perfect Unison',\n    1: 'Minor Second',\n    2: 'Major Second',\n    3: 'Minor Third',\n    4: 'Major Third',\n    5: 'Perfect Fourth',\n    6: 'Tritone',\n    7: 'Perfect Fifth',\n    8: 'Minor Sixth',\n    9: 'Major Sixth',\n    10: 'Minor Seventh',\n    11: 'Major Seventh',\n    12: 'Perfect Octave'\n  };\n\n  /**\n   * Generate scale from root note\n   */\n  static generateScale(\n    rootFrequency: number, \n    scaleType: keyof typeof MusicTheory.SCALE_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.SCALE_PATTERNS[scaleType];\n    if (!pattern) {\n      throw new Error(`Unknown scale type: ${scaleType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Generate chord from root note\n   */\n  static generateChord(\n    rootFrequency: number,\n    chordType: keyof typeof MusicTheory.CHORD_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.CHORD_PATTERNS[chordType];\n    if (!pattern) {\n      throw new Error(`Unknown chord type: ${chordType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Identify scale from a set of frequencies\n   */\n  static identifyScale(frequencies: number[]): Array<{\n    scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n  }> {\n    if (frequencies.length < 3) {\n      return [];\n    }\n\n    // Convert frequencies to note numbers relative to the lowest note\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const baseFreq = sortedFreqs[0];\n    const intervals = sortedFreqs.map(freq => \n      Math.round(12 * Math.log2(freq / baseFreq))\n    );\n\n    const results: Array<{\n      scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n    }> = [];\n\n    // Test each scale pattern\n    Object.entries(MusicTheory.SCALE_PATTERNS).forEach(([scaleName, pattern]) => {\n      // Test each possible root\n      for (let rootOffset = 0; rootOffset < 12; rootOffset++) {\n        const adjustedPattern = pattern.map(interval => (interval + rootOffset) % 12).sort((a, b) => a - b);\n        const normalizedIntervals = intervals.map(interval => interval % 12).sort((a, b) => a - b);\n        \n        // Calculate confidence based on pattern matching\n        let matches = 0;\n        normalizedIntervals.forEach(interval => {\n          if (adjustedPattern.includes(interval)) {\n            matches++;\n          }\n        });\n\n        const confidence = matches / Math.max(normalizedIntervals.length, adjustedPattern.length);\n        \n        if (confidence > 0.5) { // Only include reasonable matches\n          const rootFreq = baseFreq * Math.pow(2, -rootOffset / 12);\n          results.push({\n            scale: scaleName as keyof typeof MusicTheory.SCALE_PATTERNS,\n            confidence,\n            root: FrequencyUtils.frequencyToNote(rootFreq)\n          });\n        }\n      }\n    });\n\n    // Sort by confidence and return top matches\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 5);\n  }\n\n  /**\n   * Identify chord from frequencies\n   */\n  static identifyChord(frequencies: number[]): Array<{\n    chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n    inversion?: number;\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const results: Array<{\n      chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n      inversion?: number;\n    }> = [];\n\n    // Test each chord pattern\n    Object.entries(MusicTheory.CHORD_PATTERNS).forEach(([chordName, pattern]) => {\n      // Test different inversions\n      for (let inversion = 0; inversion < pattern.length; inversion++) {\n        // Create inverted pattern\n        const invertedPattern = [\n          ...pattern.slice(inversion),\n          ...pattern.slice(0, inversion).map(interval => interval + 12)\n        ];\n\n        // Test each possible bass note as root\n        sortedFreqs.forEach((bassFreq, _bassIndex) => {\n          const intervals = sortedFreqs.map(freq => \n            Math.round(12 * Math.log2(freq / bassFreq))\n          );\n\n          // Calculate confidence\n          let matches = 0;\n          const patternSet = new Set(invertedPattern);\n          intervals.forEach(interval => {\n            const normalizedInterval = interval % 12;\n            if (patternSet.has(normalizedInterval) || patternSet.has(normalizedInterval + 12)) {\n              matches++;\n            }\n          });\n\n          const confidence = matches / Math.max(intervals.length, pattern.length);\n          \n          if (confidence > 0.6) {\n            const rootFreq = inversion === 0 ? bassFreq : \n              bassFreq * Math.pow(2, -pattern[inversion] / 12);\n            \n            results.push({\n              chord: chordName as keyof typeof MusicTheory.CHORD_PATTERNS,\n              confidence,\n              root: FrequencyUtils.frequencyToNote(rootFreq),\n              inversion: inversion > 0 ? inversion : undefined\n            });\n          }\n        });\n      }\n    });\n\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 3);\n  }\n\n  /**\n   * Get the key signature for a given key\n   */\n  static getKeySignature(key: string, mode: 'major' | 'minor' = 'major'): {\n    sharps: string[];\n    flats: string[];\n    accidentalCount: number;\n  } {\n    // Order of sharps: F# C# G# D# A# E# B#\n    const sharpOrder = ['F', 'C', 'G', 'D', 'A', 'E', 'B'];\n    // Order of flats: Bb Eb Ab Db Gb Cb Fb\n    const flatOrder = ['B', 'E', 'A', 'D', 'G', 'C', 'F'];\n    \n    // Major key signatures\n    const majorKeys = {\n      'C': { sharps: 0, flats: 0 },\n      'G': { sharps: 1, flats: 0 },\n      'D': { sharps: 2, flats: 0 },\n      'A': { sharps: 3, flats: 0 },\n      'E': { sharps: 4, flats: 0 },\n      'B': { sharps: 5, flats: 0 },\n      'F#': { sharps: 6, flats: 0 },\n      'C#': { sharps: 7, flats: 0 },\n      'F': { sharps: 0, flats: 1 },\n      'Bb': { sharps: 0, flats: 2 },\n      'Eb': { sharps: 0, flats: 3 },\n      'Ab': { sharps: 0, flats: 4 },\n      'Db': { sharps: 0, flats: 5 },\n      'Gb': { sharps: 0, flats: 6 },\n      'Cb': { sharps: 0, flats: 7 }\n    };\n\n    // Adjust for minor keys (relative minor is 3 semitones below major)\n    let keySignature = majorKeys[key as keyof typeof majorKeys];\n    \n    if (!keySignature && mode === 'minor') {\n      // Find relative major\n      const minorToMajor = {\n        'A': 'C', 'E': 'G', 'B': 'D', 'F#': 'A', 'C#': 'E', 'G#': 'B', 'D#': 'F#', 'A#': 'C#',\n        'D': 'F', 'G': 'Bb', 'C': 'Eb', 'F': 'Ab', 'Bb': 'Db', 'Eb': 'Gb', 'Ab': 'Cb'\n      };\n      \n      const relativeMajor = minorToMajor[key as keyof typeof minorToMajor];\n      if (relativeMajor) {\n        keySignature = majorKeys[relativeMajor as keyof typeof majorKeys];\n      }\n    }\n\n    if (!keySignature) {\n      return { sharps: [], flats: [], accidentalCount: 0 };\n    }\n\n    const sharps = sharpOrder.slice(0, keySignature.sharps).map(note => note + '#');\n    const flats = flatOrder.slice(0, keySignature.flats).map(note => note + 'b');\n    \n    return {\n      sharps,\n      flats,\n      accidentalCount: keySignature.sharps || keySignature.flats\n    };\n  }\n\n  /**\n   * Calculate the harmonic series for a fundamental frequency\n   */\n  static getHarmonicSeries(fundamental: number, harmonicCount: number = 16): MusicalNote[] {\n    const harmonics: MusicalNote[] = [];\n    \n    for (let i = 1; i <= harmonicCount; i++) {\n      const frequency = fundamental * i;\n      harmonics.push(FrequencyUtils.frequencyToNote(frequency));\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Calculate just intonation ratios for common intervals\n   */\n  static getJustIntonationRatios(): { [key: string]: { ratio: number; cents: number } } {\n    return {\n      'unison': { ratio: 1/1, cents: 0 },\n      'minorSecond': { ratio: 16/15, cents: 112 },\n      'majorSecond': { ratio: 9/8, cents: 204 },\n      'minorThird': { ratio: 6/5, cents: 316 },\n      'majorThird': { ratio: 5/4, cents: 386 },\n      'perfectFourth': { ratio: 4/3, cents: 498 },\n      'tritone': { ratio: 45/32, cents: 590 },\n      'perfectFifth': { ratio: 3/2, cents: 702 },\n      'minorSixth': { ratio: 8/5, cents: 814 },\n      'majorSixth': { ratio: 5/3, cents: 884 },\n      'minorSeventh': { ratio: 16/9, cents: 996 },\n      'majorSeventh': { ratio: 15/8, cents: 1088 },\n      'octave': { ratio: 2/1, cents: 1200 }\n    };\n  }\n\n  /**\n   * Convert equal temperament interval to just intonation\n   */\n  static equalTemperamentToJustIntonation(semitones: number): {\n    ratio: number;\n    cents: number;\n    closestJustInterval?: string;\n    centsDeviation?: number;\n  } {\n    const equalTempCents = semitones * 100;\n    const justRatios = MusicTheory.getJustIntonationRatios();\n    \n    // Find closest just intonation interval\n    let closestInterval: string | undefined;\n    let smallestDeviation = Infinity;\n    \n    Object.entries(justRatios).forEach(([intervalName, { cents }]) => {\n      const deviation = Math.abs(equalTempCents - cents);\n      if (deviation < smallestDeviation) {\n        smallestDeviation = deviation;\n        closestInterval = intervalName;\n      }\n    });\n    \n    const ratio = Math.pow(2, semitones / 12);\n    \n    return {\n      ratio,\n      cents: equalTempCents,\n      closestJustInterval: closestInterval,\n      centsDeviation: closestInterval ? smallestDeviation : undefined\n    };\n  }\n\n  /**\n   * Analyze melodic intervals in a sequence of notes\n   */\n  static analyzeMelody(frequencies: number[]): Array<{\n    fromNote: MusicalNote;\n    toNote: MusicalNote;\n    interval: MusicalInterval;\n    direction: 'up' | 'down' | 'same';\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const analysis: Array<{\n      fromNote: MusicalNote;\n      toNote: MusicalNote;\n      interval: MusicalInterval;\n      direction: 'up' | 'down' | 'same';\n    }> = [];\n\n    for (let i = 1; i < frequencies.length; i++) {\n      const fromFreq = frequencies[i - 1];\n      const toFreq = frequencies[i];\n      \n      const fromNote = FrequencyUtils.frequencyToNote(fromFreq);\n      const toNote = FrequencyUtils.frequencyToNote(toFreq);\n      \n      const semitones = FrequencyUtils.getSignedInterval(fromFreq, toFreq);\n      const interval = FrequencyUtils.getIntervalInfo(Math.abs(semitones));\n      \n      const direction = semitones > 0 ? 'up' : semitones < 0 ? 'down' : 'same';\n      \n      analysis.push({\n        fromNote,\n        toNote,\n        interval,\n        direction\n      });\n    }\n\n    return analysis;\n  }\n\n  /**\n   * Generate chord progressions in a given key\n   */\n  static generateChordProgression(\n    key: string, \n    mode: 'major' | 'minor' = 'major',\n    progression: number[] = [1, 4, 5, 1] // Roman numerals as scale degrees\n  ): MusicalNote[][] {\n    const rootFreq = FrequencyUtils.scientificPitchToFrequency(key + '4');\n    if (rootFreq === 0) {\n      throw new Error(`Invalid key: ${key}`);\n    }\n\n    const scale = MusicTheory.generateScale(rootFreq, mode === 'minor' ? 'naturalMinor' : 'major');\n    const chords: MusicalNote[][] = [];\n\n    progression.forEach(degree => {\n      const chordRoot = scale[(degree - 1) % scale.length];\n      const chordType = mode === 'major' \n        ? MusicTheory.getMajorScaleChordType(degree)\n        : MusicTheory.getMinorScaleChordType(degree);\n      \n      const chord = MusicTheory.generateChord(chordRoot.frequency, chordType);\n      chords.push(chord);\n    });\n\n    return chords;\n  }\n\n  /**\n   * Get chord type for scale degree in major scale\n   */\n  private static getMajorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['major', 'minor', 'minor', 'major', 'major', 'minor', 'diminished'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n\n  /**\n   * Get chord type for scale degree in minor scale\n   */\n  private static getMinorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['minor', 'diminished', 'major', 'minor', 'minor', 'major', 'major'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n}","/**\n * PitchPro Audio Processing Library\n * High-precision pitch detection and audio processing for web applications\n * \n * @version 1.0.0\n * @author PitchPro Team\n * @license MIT\n */\n\n// Core exports\nexport { AudioManager } from './core/AudioManager';\nexport { PitchDetector } from './core/PitchDetector';\nexport { NoiseFilter } from './core/NoiseFilter';\nexport { MicrophoneLifecycleManager } from './core/MicrophoneLifecycleManager';\nexport { MicrophoneController } from './core/MicrophoneController';\nexport { ErrorNotificationSystem } from './core/ErrorNotificationSystem';\n\n// Advanced exports\nexport { HarmonicCorrection } from './advanced/HarmonicCorrection';\nexport { VoiceAnalyzer } from './advanced/VoiceAnalyzer';\nexport { CalibrationSystem } from './advanced/CalibrationSystem';\n\n// Utils exports\nexport { FrequencyUtils } from './utils/FrequencyUtils';\nexport { MusicTheory } from './utils/MusicTheory';\nexport { DeviceDetection } from './utils/DeviceDetection';\n\n// Type exports\nexport type {\n  AudioManagerConfig,\n  PitchDetectorConfig,\n  PitchDetectionResult,\n  NoiseFilterConfig,\n  HarmonicCorrectionResult,\n  NotificationConfig,\n  MusicalNote,\n  MusicalInterval,\n  VoiceAnalysis,\n  DeviceSpecs\n} from './types';\n\n// Constants\nexport const VERSION = '1.0.0';\nexport const BUILD_DATE = new Date().toISOString();\n\n// Default configurations\nexport const DEFAULT_CONFIG = {\n  pitchDetector: {\n    fftSize: 4096,\n    smoothing: 0.1,\n    clarityThreshold: 0.8,\n    minVolumeAbsolute: 0.01\n  },\n  audioManager: {\n    sampleRate: 44100,\n    channelCount: 1,\n    echoCancellation: false,\n    noiseSuppression: false,\n    autoGainControl: false\n  },\n  noiseFilter: {\n    highpassFreq: 80,\n    lowpassFreq: 800,\n    notchFreq: 60,\n    Q: 0.7\n  }\n} as const;"],"names":["_Logger","args","enabled","Logger","AudioManager","config","healthCheck","_a","_b","_c","t","resolve","result","error","deviceSpecs","audioConstraints","tracks","id","options","fftSize","smoothingTimeConstant","minDecibels","maxDecibels","useFilters","analyser","finalNode","filterChain","highpass","lowpass","notch","sensitivity","clampedSensitivity","isIPhone","isIPad","isIPadOS","isIOS","analyserIds","track","index","audioTrack","_d","trackStates","_e","_g","_h","_i","_f","FFT","size","table","i","angle","power","j","shift","revShift","fft","complex","storage","res","input","spectrum","half","out","data","width","step","len","outOff","bitrev","off","inv","quarterLen","limit","k","A","B","D","Ar","Ai","Br","Bi","Cr","Ci","Dr","Di","MAr","MAi","tableBr","tableBi","MBr","MBi","tableCr","tableCi","MCr","MCi","tableDr","tableDi","MDr","MDi","T0r","T0i","T1r","T1i","T2r","T2i","T3r","T3i","FAr","FAi","FCr","FCi","FBr","FBi","FDr","FDi","evenR","evenI","oddR","oddI","leftR","leftI","rightR","rightI","step2","step3","halfLen","hquarterLen","C","ST0r","ST0i","ST1r","ST1i","ST2r","ST2i","ST3r","ST3i","SFAr","SFAi","SFBr","SFBi","SA","SB","Autocorrelator","inputLength","bufferSupplier","__publicField","ceilPow2","length","output","tb","getKeyMaximumIndices","keyIndices","lookingForMaximum","max","maxIndex","refineResultIndex","x0","x1","x2","y0","y1","y2","a","b","c","xMax","yMax","PitchDetector$1","PitchDetector","threshold","volume","db","amplitude","sampleRate","keyMaximumIndices","nMax","resultIndex","refinedResultIndex","clarity","squareSum","m","v","_PitchDetector","audioManager","callbacks","filteredAnalyserId","rawAnalyserId","PitchyDetector","bufferLength","buffer","rawBuffer","sum","rms","platformSpecs","adjustedRms","volumePercent","rawSum","rawRms","rawVolumePercent","audioContext","pitch","isValidVocalRange","finalFreq","normalizedVolume","roundedFreq","historyCount","avgFreq","f","octaveRatio","displayVolume","frequency","now","confidenceThreshold","historyWindow","h","volumeConfidence","stabilityConfidence","confidence","recentHistory","avgFrequency","avgConfidence","halfFrequency","doubleFrequency","noteNames","semitonesFromA4","noteIndex","octave","nearestSemitone","centsDeviation","NoiseFilter","inputNode","outputNode","params","currentTime","savedOutputNode","frequencyArray","magnitudeArray","phaseArray","highpassMagnitude","lowpassMagnitude","notchMagnitude","preset","MicrophoneLifecycleManager","resources","visibilityChangeHandler","activityHandler","unloadHandler","focusHandler","blurHandler","healthStatus","maxAttemptsError","timeSinceActivity","eventName","detail","event","newConfig","listener","ErrorNotificationSystem","existingContainer","css","style","notification","oldestId","duration","title","message","details","list","item","solution","closeButton","context","resource","styleElement","MicrophoneController","audioManagerConfig","lifecycleConfig","showErrorNotifications","state","oldSensitivity","newSensitivity","durationMs","startTime","maxVolume","detectedFrequency","endTime","checkAudio","dataArray","maxValue","value","success","frequencyDisplay","newState","oldState","errorId","isSameError","isInCooldown","type","HarmonicCorrection","analysis","recentFrequencies","entry","fundamentalCandidates","bestCandidate","candidate","candidates","harmonicNum","fundamental","exactHarmonic","centDeviation","likelihood","_harmonicNumber","totalConfidence","validMeasurements","freq","closestHarmonicNum","expectedFreq","stabilityBonus","timestamp","lastFreq","freqRatio","cutoffTime","frequencies","confidences","conf","minFreq","maxFreq","mean","variance","coefficientOfVariation","stabilityScore","VoiceQuality","VoiceAnalyzer","spectralData","stability","vibrato","breathiness","consistency","quality","recommendations","validFrequencies","deviationCents","smoothed","extrema","timeSpan","rate","depths","freq1","freq2","cents","averageDepth","depth","periods","period","regularity","periodMean","periodVariance","fundamentalBin","noiseBins","fundamentalEnergy","val","noiseEnergy","noiseRatio","volumes","clarities","volumeConsistency","clarityConsistency","values","weights","score","windowSize","count","start","end","prev","curr","next","vol","_DeviceDetection","userAgent","hasIOSNavigator","hasIOSPlatform","deviceType","optimizations","screenWidth","screenHeight","maxDimension","minDimension","_isIOS","specs","baseConstraints","DeviceDetection","CalibrationSystem","mediaStream","noiseProfile","volumeCalibration","frequencyResponse","optimalSettings","source","measurements","measureNoise","avgNoise","bin","measurement","volumeMeasurements","measureVolume","min","offset","responseMap","measureResponse","avgResponse","freqStr","avg","baseSettings","sensitivityAdjustment","adjustedSensitivity","vocalRangeNoise","noiseGateAdjustment","adjustedNoiseGate","responseLevels","lowFreqResponse","midFreqResponse","highFreqResponse","lowAvg","midAvg","highAvg","audioProcessor","settings","calibrationKey","dataToSave","savedData","parsedData","maxAge","_FrequencyUtils","midiNumber","useFlats","nearestMidi","ratio","frequency1","frequency2","midi1","midi2","fromFrequency","toFrequency","semitones","intervalNames","normalizedSemitones","octaves","baseName","instrument","baseFrequency","maxHarmonic","harmonics","tolerance","nearestInteger","harmonicFrequency","harmonicNumber","scientificPitch","match","noteName","octaveStr","semitoneOffset","baseNote","accidental","decimalPlaces","FrequencyUtils","_MusicTheory","rootFrequency","scaleType","pattern","chordType","sortedFreqs","baseFreq","intervals","results","scaleName","rootOffset","adjustedPattern","interval","normalizedIntervals","matches","rootFreq","chordName","inversion","invertedPattern","bassFreq","_bassIndex","patternSet","normalizedInterval","key","mode","sharpOrder","flatOrder","majorKeys","keySignature","relativeMajor","sharps","note","flats","harmonicCount","equalTempCents","justRatios","closestInterval","smallestDeviation","intervalName","deviation","fromFreq","toFreq","fromNote","toNote","direction","progression","scale","chords","degree","chordRoot","chord","MusicTheory","VERSION","BUILD_DATE","DEFAULT_CONFIG"],"mappings":"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","x_google_ignoreList":[2,3]}